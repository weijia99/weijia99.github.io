[{"title":"pa1.1小结","date":"2022-11-19T12:41:21.000Z","path":"2022/11/19/pa1-1小结/","content":"<h1 id=\"pa1-1\"><a href=\"#pa1-1\" class=\"headerlink\" title=\"pa1.1\"></a>pa1.1</h1><p>本章主要是要求大家进行使用构建完成简易表达式，主要包括单步执行，打印寄存器，还有扫描内存</p>\n<blockquote>\n<p>为什么使用static，因为使用static可以解决两个c文件有相同函数名的问题，不会造成编译问题</p>\n</blockquote>\n<h2 id=\"单步执行\"><a href=\"#单步执行\" class=\"headerlink\" title=\"单步执行\"></a>单步执行</h2><p>但不执行，我们可以看到远吗使用的cmdc这个函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">cmd_c</span><span class=\"params\">(<span class=\"type\">char</span> *args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//    -1是65535最大的2的64-1</span></span><br><span class=\"line\">  cpu_exec(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用cpu_exec代表就是直接执行，使用-1，因为这是uint，无符号，-1的无符号就是最大值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">cpu_exec</span><span class=\"params\">(<span class=\"type\">uint64_t</span> n)</span> &#123;</span><br><span class=\"line\">  g_print_step = (n &lt; MAX_INST_TO_PRINT);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (nemu_state.state) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> NEMU_END: <span class=\"keyword\">case</span> NEMU_ABORT:</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Program execution has ended. To restart the program, exit NEMU and run again.\\n&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: nemu_state.state = NEMU_RUNNING;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>所以我们只需要对当前的函数，进行查找出需要执行的步数，然后调用cpu——exec来进行执行代码</p>\n<p>使用strtok来进行抽取参数就可以</p>\n<p>然后转换函数可以直接使用atoi</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">cmd_si</span><span class=\"params\">(<span class=\"type\">char</span> *args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* extract the first argument */</span></span><br><span class=\"line\">    <span class=\"comment\">/*get steps,default is 1*/</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *arg = strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arg==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* no argument given */</span></span><br><span class=\"line\">        i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt; <span class=\"built_in\">strlen</span>(arg);j++)&#123;</span><br><span class=\"line\">            i=i*<span class=\"number\">10</span>+arg[j]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//    printf(&quot;%s&quot;,arg);</span></span><br><span class=\"line\">    cpu_exec(i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"打印寄存器\"><a href=\"#打印寄存器\" class=\"headerlink\" title=\"打印寄存器\"></a>打印寄存器</h2><blockquote>\n<p>打印寄存器就更简单了. 不过既然寄存器的结构是ISA相关的, 我们希望能为简易调试器屏蔽ISA的差异. 框架代码已经为大家准备了如下的API:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nemu/src/isa/$ISA/reg.c</span><br><span class=\"line\">void isa_reg_display(void);</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>info r</code>之后, 就调用<code>isa_reg_display()</code>, 在里面直接通过<code>printf()</code>输出所有寄存器的值即可. 如果你从来没有使用过<code>printf()</code>, 请RTFM或者STFW. 如果你不知道要输出什么, 你可以参考GDB中的输出.</p>\n</blockquote>\n<p>这个因为我们使用的riscv，所以需要去riscv里面进行修改isa——display这个函数。</p>\n<p>直接调用isa，主要思路就是在reg里面进行遍历每一个寄存器，然后reg里面有gpr这个可以直接获取值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">isa_reg_display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; ++i) &#123;</span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;%s %s&quot;,regs[i],isa_reg_str2val(regs[i],false));</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%-3s :0x%08lx |  \\n&quot;</span>, regs[i], cpu.gpr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"扫描内存\"><a href=\"#扫描内存\" class=\"headerlink\" title=\"扫描内存\"></a>扫描内存</h2><p>这个意思就是求出地址附近的10个值。如何求出值，观看rtfsc，可以发现调用vaddr，传入地址，还有字节数就行。默认riscv一个地址有4B，所以我们就传入就行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">cmd_x</span><span class=\"params\">(<span class=\"type\">char</span> *args)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* get N info,with the start of exp*/</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * vaddr_read(addr,len),这个len是长度的意思，单位是byte，一条指令默认4B，所以取的4</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *arg= strtok(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> N=atoi(arg);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">paddr_t</span> exprs=<span class=\"number\">0x80000000</span>;</span><br><span class=\"line\"><span class=\"comment\">//    printf(&quot;0x%08x&quot;,exprs);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    printf(&quot;Address    Dword block ... Byte sequence\\n&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0x%8x  0x%08lx\\n&quot;</span>,exprs + i*<span class=\"number\">4</span>,vaddr_read(exprs + i * <span class=\"number\">4</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后地址的话，每次都是更新4，。直接+4就可以</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总的来说还是比较简单的，但是由于是第一次接触到这种作业，还是查了不少资料。重点还是要看jyy的2020ics的习题课</p>\n","tags":[{"name":"pa","slug":"pa","permalink":"http://yoursite.com/tags/pa/"}]},{"title":"leetcode150","date":"2022-11-19T12:33:58.000Z","path":"2022/11/19/leetcode150/","content":"<h1 id=\"leetcode-150\"><a href=\"#leetcode-150\" class=\"headerlink\" title=\"leetcode 150\"></a>leetcode 150</h1><blockquote>\n<p>Evaluate the value of an arithmetic expression in <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\">Reverse Polish Notation</a>.</p>\n<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>. Each operand may be an integer or another expression.</p>\n<p><strong>Note</strong> that division between two integers should truncate toward zero.</p>\n<p>It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.</p>\n</blockquote>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>本题是给你了逆波兰表达式，让你自己求，这个结果。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>我们可以发现，这个就是后缀表达式，使用后缀遍历，然后我们也可以发现，这个树的叶子节点就是数字。</p>\n<p>整体思路就是遍历这个字符串，然后发现是数字就push到stack里面，然后发现是符号就pop出来两个数字，对他进行操作。</p>\n<p>最后返回栈顶元素</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    stack&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; s;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 简单的后缀表达式求和</span></span><br><span class=\"line\">        set&lt;string&gt; rec;</span><br><span class=\"line\">        rec.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;+&quot;</span>);</span><br><span class=\"line\">        rec.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        rec.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        rec.<span class=\"built_in\">insert</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:tokens)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(rec.<span class=\"built_in\">find</span>(i)!=rec.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> a=s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> b=s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"comment\">// cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"string\">&quot;+&quot;</span>)&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(a+b);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==<span class=\"string\">&quot;-&quot;</span>)&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(b-a);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i==<span class=\"string\">&quot;*&quot;</span>)&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>((<span class=\"type\">long</span> <span class=\"type\">long</span>)a*(<span class=\"type\">long</span> <span class=\"type\">long</span> )b);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    s.<span class=\"built_in\">push</span>(b/a);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(<span class=\"built_in\">atoi</span>(i.<span class=\"built_in\">c_str</span>()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://yoursite.com/tags/leetcode/"},{"name":"后序遍历","slug":"后序遍历","permalink":"http://yoursite.com/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"}]},{"title":"leetcode148","date":"2022-11-19T12:13:00.000Z","path":"2022/11/19/leetcode148/","content":"<h1 id=\"leetcode-148\"><a href=\"#leetcode-148\" class=\"headerlink\" title=\"leetcode 148\"></a>leetcode 148</h1><blockquote>\n<p>Given the <code>head</code> of a linked list, return <em>the list after sorting it in <strong>ascending order</strong></em>.</p>\n</blockquote>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16688601431171668860143064.png\"></p>\n<blockquote>\n<p><strong>Follow up:</strong> Can you sort the linked list in <code>O(n logn)</code> time and <code>O(1)</code> memory (i.e. constant space)?</p>\n</blockquote>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>把链表进行排序输出，但是只能使用o1的空间，nlogn的时间。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>使用nlogn的方法来进行排序只有快排还有归并，但是都是用来递归，那空间就是on。所以只能使用迭代的方法来进行排序。</p>\n<p>地带也是给予归并的，就是我们手动从下到上，手动进行排序。排序完成一层厚，再次进行下一层来排序。</p>\n<p>现在我们进行引进dummy还有cur，dummy使用尾插法，来构建新的完整的链表（这是新一层的）</p>\n<p>每一层开始的时候p&#x3D;q&#x3D;head，</p>\n<p>然后q多走i补来达到下一组的开始</p>\n<p>然后引进p还有q，pq是两组的开头，对pq进行循环遍历，次数小于1,2,4，（这是分组的方式）。同事还有一个 o，o是2i的位置（表示新的一组开始进行排序，连接），这个都是用cur来进行尾插法。之后再把head&#x3D;o，开始进行下一组</p>\n<p>完成一层厚，我们让head&#x3D;dummy-》next。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><blockquote>\n<p><code>[4,3,1,7,8,9,2,11,5,6]</code>.这个进行排序</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">step=<span class=\"number\">1</span>: (<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>)-&gt;(<span class=\"number\">1</span>-&gt;<span class=\"number\">7</span>)-&gt;(<span class=\"number\">8</span>-&gt;<span class=\"number\">9</span>)-&gt;(<span class=\"number\">2</span>-&gt;<span class=\"number\">11</span>)-&gt;(<span class=\"number\">5</span>-&gt;<span class=\"number\">6</span>)</span><br><span class=\"line\">step=<span class=\"number\">2</span>: (<span class=\"number\">1</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">7</span>)-&gt;(<span class=\"number\">2</span>-&gt;<span class=\"number\">8</span>-&gt;<span class=\"number\">9</span>-&gt;<span class=\"number\">11</span>)-&gt;(<span class=\"number\">5</span>-&gt;<span class=\"number\">6</span>)</span><br><span class=\"line\">step=<span class=\"number\">4</span>: (<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">7</span>-&gt;<span class=\"number\">8</span>-&gt;<span class=\"number\">9</span>-&gt;<span class=\"number\">11</span>)-&gt;(<span class=\"number\">5</span>-&gt;<span class=\"number\">6</span>)</span><br><span class=\"line\">step=<span class=\"number\">8</span>: (<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;<span class=\"number\">6</span>-&gt;<span class=\"number\">7</span>-&gt;<span class=\"number\">8</span>-&gt;<span class=\"number\">9</span>-&gt;<span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们可以看第一轮i&#x3D;1，dummy-&gt;next表示step1这个完整的链表（3417.。），cur都是尾插法，然后p&#x3D;4，q&#x3D;3，o&#x3D;1，34</p>\n<p>结束后就是head&#x3D;o，p&#x3D;head&#x3D;1，q&#x3D;7，然后接着进行更新</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/*1.首先求出长度n</span></span><br><span class=\"line\"><span class=\"comment\">   2.第一个for i是求出层数</span></span><br><span class=\"line\"><span class=\"comment\">   3.第二个for是求出分了几组，想领2gei是一组</span></span><br><span class=\"line\"><span class=\"comment\">   4.然后对q走到下一个开头，p是当前的开头</span></span><br><span class=\"line\"><span class=\"comment\">   5.对o走到2i的位置，使他们可以接着循环</span></span><br><span class=\"line\"><span class=\"comment\">   6.之后就是常规的归并方法使用while</span></span><br><span class=\"line\"><span class=\"comment\">   7.一层遍历结束完成后，让cur-&gt;next=null,同事更新head为dummy-》nexzt表示新的开头</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">sortList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用地带进行排序</span></span><br><span class=\"line\">        <span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> cur=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur)&#123;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">            cur=cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i*=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">auto</span> dummy=<span class=\"keyword\">new</span> <span class=\"built_in\">ListNode</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">            <span class=\"comment\">//  dummy指示的是一层的开始</span></span><br><span class=\"line\">            cur=dummy;</span><br><span class=\"line\">            <span class=\"comment\">//第一层循环是层数，从第一个开始,1,2,4</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j+=<span class=\"number\">2</span>*i)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//第二个循环是组好，然后进行比较</span></span><br><span class=\"line\">                <span class=\"comment\">//  在组好开始进行排序 这是一次组里的比较</span></span><br><span class=\"line\">               </span><br><span class=\"line\">                <span class=\"comment\">// auto cur=dummy;使用cur来进行插入</span></span><br><span class=\"line\">                <span class=\"keyword\">auto</span> p=head;<span class=\"comment\">//第一组开始</span></span><br><span class=\"line\">                 <span class=\"keyword\">auto</span> q=p;<span class=\"comment\">//第二组开始</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//找到下一个组开始的0号</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i&amp;&amp;q;k++)&#123;</span><br><span class=\"line\">                    q=q-&gt;next;</span><br><span class=\"line\">                    <span class=\"comment\">//下一组的开始</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> o=q;<span class=\"comment\">//下一组的开始标签，使用2i开始</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i&amp;&amp;o;k++)&#123;</span><br><span class=\"line\">                    o=o-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 两个开始,第一组开始都是1开始比较</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(p&amp;&amp;q&amp;&amp;l&lt;i&amp;&amp;r&lt;i)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(p-&gt;val&lt;q-&gt;val)&#123;</span><br><span class=\"line\">                        l++;</span><br><span class=\"line\">                     cur-&gt;next=p;</span><br><span class=\"line\">                     cur=cur-&gt;next;</span><br><span class=\"line\">                     p=p-&gt;next;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        r++;</span><br><span class=\"line\">                        cur-&gt;next=q;</span><br><span class=\"line\">                        cur=cur-&gt;next;</span><br><span class=\"line\">                        q=q-&gt;next;</span><br><span class=\"line\">                        <span class=\"comment\">//尾插法</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(p&amp;&amp;l&lt;i)&#123;</span><br><span class=\"line\">                    l++;</span><br><span class=\"line\">                     cur-&gt;next=p;</span><br><span class=\"line\">                     cur=cur-&gt;next; </span><br><span class=\"line\">                     p=p-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(q&amp;&amp;r&lt;i)&#123;</span><br><span class=\"line\">                   r++;</span><br><span class=\"line\">                        cur-&gt;next=q;</span><br><span class=\"line\">                        cur=cur-&gt;next;</span><br><span class=\"line\">                        q=q-&gt;next;</span><br><span class=\"line\">                        <span class=\"comment\">//尾插法 </span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                head=o;<span class=\"comment\">//下一次开始</span></span><br><span class=\"line\">                <span class=\"comment\">// cout&lt;&lt;head-&gt;val&lt;&lt;&quot; &quot;;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 整个结束了，插入到开始</span></span><br><span class=\"line\">            cur-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"comment\">//尾插法，是因为要保持开始的顺序不变</span></span><br><span class=\"line\">            head=dummy-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://yoursite.com/tags/leetcode/"},{"name":"linked list","slug":"linked-list","permalink":"http://yoursite.com/tags/linked-list/"}]},{"title":"pa配置vscode","date":"2022-11-18T12:59:12.000Z","path":"2022/11/18/pa配置vscode/","content":"<h1 id=\"pa配置vscode\"><a href=\"#pa配置vscode\" class=\"headerlink\" title=\"pa配置vscode\"></a>pa配置vscode</h1><h2 id=\"1-为什么会写这一个\"><a href=\"#1-为什么会写这一个\" class=\"headerlink\" title=\"1.为什么会写这一个\"></a>1.为什么会写这一个</h2><p>目前正在写nju pa。pa是用makefile进行构建的，然后使用了多个自定义宏，导致，无法进行，直接的和之前一样，按一下run就可以运行。所以得进行手动配置。</p>\n<p>还有就是，没有使用ide进行编码，导致一堆{}对齐的问题，然后找bug比较难受</p>\n<h2 id=\"2-配置方法\"><a href=\"#2-配置方法\" class=\"headerlink\" title=\"2.配置方法\"></a>2.配置方法</h2><p>根据jyy<a href=\"https://www.bilibili.com/video/BV1qa4y1j7xk?p=4&vd_source=d043013c6aa637931d747eae4c52b842\">的课程</a>在1小时16分钟左右的时候，只需要进行vscode配置一会儿就可以正常使用。把defines里面进行添加宏就可以，这个宏如何查找，在第三届讲makefile的时候介绍过。我们使用make -nB(可以进行强制编译所有的)然后我们使用vim</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687772080711668777207848.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -nB \\</span><br><span class=\"line\"> | grep -ve &#x27;^\\(\\#\\|echo\\|mkdir\\)&#x27; \\</span><br><span class=\"line\"> | vim -</span><br></pre></td></tr></table></figure>\n\n<p>然后进行搜索 -D ，这个参数就是在编译里面加入自定义宏，然后我们把这些宏进行拷贝过来，使用管道连接，去除echo 还有mkidr，传递给vim，vim用搜索按钮查找就可以</p>\n<h2 id=\"3-vscode配置教程\"><a href=\"#3-vscode配置教程\" class=\"headerlink\" title=\"3.vscode配置教程\"></a>3.vscode配置教程</h2><p>参考教程：<a href=\"https://zhuanlan.zhihu.com/p/87864677\">https://zhuanlan.zhihu.com/p/87864677</a></p>\n<ol>\n<li>安装c++插件</li>\n<li>安装远程开发（我是用的虚拟机，进行ssh开发）</li>\n<li>之后就是通过ssh连接虚拟机，然后插件安装后，进行设置</li>\n<li>进行配置c_cpp_properties.json，在defines进行添加宏（无人其他改动）</li>\n<li><strong>接下来就是配置gdb</strong></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Linux&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;includePath&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;defines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;__GUESR_ISA__=riscv64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;_GNU_SOURCE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;__STDC_CONSTANT_MACROS&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;__STDC_FORMAT_MACROS&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;__STDC_LIMIT_MACROS&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;compilerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/bin/clang&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;cStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c17&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;cppStandard&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c++14&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;intelliSenseMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux-clang-x64&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>gdb配置有坑：</p>\n<p>参考下面 ： <a href=\"https://www.youtube.com/watch?v=9VpiGwp8Vos&amp;ab_channel=SavvyNik\">https://www.youtube.com/watch?v=9VpiGwp8Vos&amp;ab_channel=SavvyNik</a></p>\n<p>我们要进行配置gdb，就得要在编译过程加入- g ，这个可以在makefile发现是在build.mk里面的，我们加入-g选项。然后还得设置launch.json</p>\n<p>参考如下：<a href=\"https://blog.csdn.net/zztiger123/article/details/105544640\">https://blog.csdn.net/zztiger123/article/details/105544640</a></p>\n<p>修改program为build下面那个输出的，然后cwd，修改为nemu的目录</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class=\"line\">    <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">    <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;(gdb) Launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;/nemu/build/riscv64-nemu-interpreter&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;-b&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stopAtConnect&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceRoot&#125;/nemu&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;externalConsole&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span>  <span class=\"string\">&quot;将反汇编风格设置为 Intel&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/bin/gdb&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个结束之后，有个坑，jyy在is_mode_batch这个函数设置为true，我用gdb就追踪不了，我输入p命令的结果，把那个函数值设置为false就可以走正常流程，进行追踪。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;make&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shell&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;make -j8&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppbuild&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C/C++: gcc 生成活动文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/usr/bin/gcc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-fdiagnostics-color=always&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$gcc&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;kind&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;isDefault&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;detail&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;调试器生成的任务。&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-clion应该也一样\"><a href=\"#4-clion应该也一样\" class=\"headerlink\" title=\"4.clion应该也一样\"></a>4.clion应该也一样</h2><p>明天有空在进行配置clion，修改自定义make目标，然后进行添加，可以参考下面的连接</p>\n<p><a href=\"https://www.jetbrains.com/help/clion/custom-build-targets.html#custom-rundebug\">https://www.jetbrains.com/help/clion/custom-build-targets.html#custom-rundebug</a></p>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h2><p>pa确实难，对于我这个非科班跨考的。不过感觉也学到挺多知识的，好的大学，课程真的可以和没过高校的课程差不多，现在才做完1.2，还得接着写。</p>\n","tags":[{"name":"pa","slug":"pa","permalink":"http://yoursite.com/tags/pa/"},{"name":"nemu","slug":"nemu","permalink":"http://yoursite.com/tags/nemu/"},{"name":"vscode","slug":"vscode","permalink":"http://yoursite.com/tags/vscode/"}]},{"title":"学习技巧","date":"2022-11-18T09:48:27.000Z","path":"2022/11/18/学习技巧/","content":"<h1 id=\"1-学习技巧\"><a href=\"#1-学习技巧\" class=\"headerlink\" title=\"1.学习技巧\"></a>1.学习技巧</h1><p>来源于youtube 的crashcourse 里面分为10节进行讲述，如何学习。一个半小时左右可以看完，还是很不错的。具体连接如下</p>\n<p><a href=\"https://youtu.be/IhuwS5ZLwKY\">https://youtu.be/IhuwS5ZLwKY</a></p>\n<p>看完了这个视频，解决了我研一所与到的多个问题，是使用笔记本还是手写做笔记。做笔记的方法有哪些怎么进行读书</p>\n<h2 id=\"1-1学会做笔记\"><a href=\"#1-1学会做笔记\" class=\"headerlink\" title=\"1.1学会做笔记\"></a>1.1学会做笔记</h2><p>分为下面几个重点</p>\n<p>1.<strong>工具</strong></p>\n<ol>\n<li>电脑</li>\n<li>传统的笔记本</li>\n</ol>\n<blockquote>\n<p><strong>研究表明，使用电脑的打字速度会更快，但是，打字只会让自己变成一个记忆机器，没有自己的思考。人的大佬不能并行处理时间（打字还有进行思考），所以得需要使用纸币来进行记录，这样不会进行打断思路</strong></p>\n</blockquote>\n<p>2.<strong>记录内容</strong></p>\n<ol>\n<li>idea</li>\n<li>专业术语</li>\n<li>例子</li>\n</ol>\n<p>3.<strong>笔记记录方式</strong></p>\n<ol>\n<li>思维导图，xmind</li>\n<li>cmu笔记，使用左边hint，右边笔记，下面是总结</li>\n<li>总结（目录法），就是word</li>\n</ol>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687713222201668771322176.png\" alt=\"word大纲\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687713750721668771374689.png\"></p>\n<h2 id=\"1-2读书\"><a href=\"#1-2读书\" class=\"headerlink\" title=\"1.2读书\"></a>1.2读书</h2><p>只能处理4-7bit的信息</p>\n<p>看论文的方法</p>\n<p>如何学习可课本教科书</p>\n<ol>\n<li>简介</li>\n<li>标题</li>\n<li>课后习题</li>\n</ol>\n<p><strong>如何快速的阅读</strong></p>\n<ol>\n<li>设置时间ddl</li>\n<li>使用highlight</li>\n<li>使用跳读,(跳过 and,or)</li>\n<li>消除默读现象</li>\n</ol>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687716960771668771695525.png\"></p>\n<p>广泛的阅读还有其他多看书</p>\n<ol>\n<li>观点花点</li>\n<li>论证的用破折号</li>\n</ol>\n<h2 id=\"1-3回忆与记忆\"><a href=\"#1-3回忆与记忆\" class=\"headerlink\" title=\"1.3回忆与记忆\"></a>1.3回忆与记忆</h2><p>recall&amp;memory</p>\n<p>工作记忆只能处理4-7位的信息</p>\n<p>长期记忆需要进行连接</p>\n<p>记忆喜欢记得是图像,有形的(使用注记法),就是被关键词,使用联想法</p>\n<p>然后就是记忆衰退的方法,多次检索,就会容易回忆(就是多次开始记录)</p>\n<p>盒子记录：就是anki，会的就进入下一个盒子，不会的就重新回到第一个盒子</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687725300721668772529814.png\"></p>\n<p>，每天学习，没三天学习</p>\n<h2 id=\"1-4如何做组织管理\"><a href=\"#1-4如何做组织管理\" class=\"headerlink\" title=\"1.4如何做组织管理\"></a>1.4如何做组织管理</h2><p>这一节，解决了我之前想的，到底如何进行处理数据。使用日历+todo+笔记系统（calendar+todo+typora）</p>\n<p>学习必须要在学习环境，在图书馆，或者咖啡店</p>\n<p><strong>及时捕获自己的想法</strong></p>\n<ol>\n<li>任务</li>\n<li>事件</li>\n<li>还有知识</li>\n<li>想法（论文的idea）</li>\n</ol>\n<p><strong>输出自己的想法</strong></p>\n<ol>\n<li>写作</li>\n<li>代码</li>\n</ol>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687728890711668772888770.png\"></p>\n<p><strong>记录自己的戒指信息还有任务详情</strong></p>\n<p>谷歌日历来进行记录</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687730720801668773071545.png\"></p>\n<p>云端笔记如何记录：</p>\n<blockquote>\n<p>使用电脑结构，跟目录，时间，课程</p>\n</blockquote>\n<p>quick catch：</p>\n<ol>\n<li>当时有的信息，就储存下来</li>\n<li>使用todo，记录今天发生的事件</li>\n</ol>\n<p>每周计划还有每日计划</p>\n<ol>\n<li>每个星期天来做（分成几个小块）</li>\n<li><strong>杂事（全部在一起处理）</strong></li>\n<li>还要复盘，每周（什么做了。什么没做）</li>\n</ol>\n<p>为什么无法坚持，因为熵增定律</p>\n<h2 id=\"1-5如何专注\"><a href=\"#1-5如何专注\" class=\"headerlink\" title=\"1.5如何专注\"></a>1.5如何专注</h2><blockquote>\n<p>这个解决了，我为什么感觉什么都没有学到专注不了自己喜欢的东西</p>\n</blockquote>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687735320721668773531358.png\"></p>\n<p>基于任务的（做数学题），自顶向下的，但是会匹配</p>\n<p>如何加强自己</p>\n<ol>\n<li>环境</li>\n<li>兴趣爱好</li>\n<li>还有大脑的状态</li>\n</ol>\n<p><strong>加强自己专注</strong></p>\n<ol>\n<li>去图书馆（健身房就会自己想去健身）</li>\n<li>停止多线程，经常切换，会让自己的大脑没有思路</li>\n<li>关闭手机（断网，有时候多就是少，关闭手机还有电脑）（请勿打扰）</li>\n<li>把我任务进行结块（摘要，结论，研究方法，实验）</li>\n<li>使用forset或者番茄土豆（不要切换任务）</li>\n<li>还要学会放松</li>\n</ol>\n<h2 id=\"1-6拖延症\"><a href=\"#1-6拖延症\" class=\"headerlink\" title=\"1.6拖延症\"></a>1.6拖延症</h2><blockquote>\n<p>又是一个好的course，给解决拖延症提供了思路</p>\n</blockquote>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687744690781668774468167.png\"></p>\n<p>预期可以考到那个学校（求其上这得中）</p>\n<p>价值越高（就是工作给的钱，就不会不拖延）</p>\n<p>冲动做其他的事，拖延的时间越长，就容易拖延（</p>\n<p><strong>减少冲动</strong></p>\n<ol>\n<li>分解任务</li>\n</ol>\n<p><strong>寻求帮助</strong></p>\n<ol>\n<li><p>成立学习小组</p>\n</li>\n<li><p>提高奖励（看完论文和朋友看电影</p>\n</li>\n<li><p>提高体验（打游戏，很久时间）</p>\n</li>\n<li><p>去图书馆</p>\n</li>\n<li><p>使用block进行阻挡网络</p>\n</li>\n<li><p>使用番茄土豆</p>\n</li>\n</ol>\n<p><strong>进行娱乐</strong></p>\n<h2 id=\"1-10体育学习\"><a href=\"#1-10体育学习\" class=\"headerlink\" title=\"1.10体育学习\"></a>1.10体育学习</h2><p>健身版提供助学习，还是要运动。 </p>\n<p>用进废退</p>\n<p>定期训练</p>\n","tags":[{"name":"crash course","slug":"crash-course","permalink":"http://yoursite.com/tags/crash-course/"},{"name":"学习方法","slug":"学习方法","permalink":"http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"}]},{"title":"虚拟机网络","date":"2022-11-18T09:32:01.000Z","path":"2022/11/18/虚拟机网络/","content":"<h1 id=\"vmware桥接没有网络\"><a href=\"#vmware桥接没有网络\" class=\"headerlink\" title=\"vmware桥接没有网络\"></a>vmware桥接没有网络</h1><p>好久没有登录虚拟机，虚拟机的桥接出现问题。我以为是这个虚拟机iso的问题。于是我对manjaro这个linux进行折腾了半天。从下午折腾到晚上。</p>\n<p>主要包括，自己手动进行网络配置，然后重新建立网卡，还使用其他网络工具。最后我对网络进行啥用nat可以联网，但是使用nat联网，我的jetbrains gateway的配置识别不了，换了nat的ip也进不去。于是我准备使用新的iso，同时在manjaro里面下载github，把我写的代码进行上传。manjaro仓库有github第三方，可以直接下载。然后我是用deepin进行安装，安装完成后，我也是使用桥接的方式来进行连接，结果发现网络还是连接不了。那我就意识到是vmware的问题，于是我去stfw，网上进行搜索，发现这个问题是因为vmwarre进行桥接的时候识别不了，本机现在联网的网卡，需要自己手动设置。我 手动设置之后，结果两个linux都连上网了，又是折腾了一下午。</p>\n<p>主要还是对manjaro这个系统不熟悉，我看到他的问题，显示已经连上网络，但是不能上网，我就以为是可能香谷歌那种，只是上不了谷歌才显示的，于是就以为是linux的问题。但是deepin安装完成后，直接就是显示网络平已经断开，所以，我才觉得是虚拟机的问题。</p>\n<hr>\n<p>总结</p>\n<ol>\n<li>主要是对manjaro这个linux发行版不熟悉</li>\n<li>然后就是vmaware这个软件的bug</li>\n</ol>\n<p>具体解决方法</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687647390781668764738161.png\"></p>\n","tags":[{"name":"运维","slug":"运维","permalink":"http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"},{"name":"网络","slug":"网络","permalink":"http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"多源bfs","date":"2022-11-12T13:26:33.000Z","path":"2022/11/12/多源bfs/","content":"<h1 id=\"多源bfs-amp-最小树\"><a href=\"#多源bfs-amp-最小树\" class=\"headerlink\" title=\"多源bfs&amp;最小树\"></a>多源bfs&amp;最小树</h1><h2 id=\"0-证明\"><a href=\"#0-证明\" class=\"headerlink\" title=\"0.证明\"></a>0.证明</h2><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682604660491668260465791.png\"></p>\n<p>归纳法,开始为0,不用证明</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682605600491668260559129.png\"></p>\n<p>去除对头的第一个元素x,可以加入3个x+1的元素,最多有两端</p>\n<p>两个特性,一般是队列,前面是x,后面是x+1</p>\n<p>默认开始的元素是最小值,喝dij的使用优先队列的最小值一样.</p>\n<p>入队就是最小值的</p>\n<h2 id=\"1-bfs\"><a href=\"#1-bfs\" class=\"headerlink\" title=\"1.bfs\"></a>1.bfs</h2><h3 id=\"1-1矩阵距离\"><a href=\"#1-1矩阵距离\" class=\"headerlink\" title=\"1.1矩阵距离\"></a>1.1矩阵距离</h3><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682596642021668259663290.png\"></p>\n<blockquote>\n<p>大致意识就是求每个位置到1的最短距离</p>\n</blockquote>\n<p>这个就是求最短路,求每个点到一堆起点的距离,建立一个虚拟起点,让1 作为起点开始寻找,然后使用虚拟起点,连接所有的 1</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682598242021668259823715.png\"></p>\n<p>思路:先把所有是1的位置加入到queue里面,距离是0</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682603282041668260328053.png\"></p>\n<p>重点是找到放入所有的值,还有一个就是进行更新,tt&#x3D;-1</p>\n<hr>\n<p>总体思路如下</p>\n<ol>\n<li>使用1作为开始的点,把所有的1进行插入到队列</li>\n<li>之后就是常规bfs,进行pop</li>\n<li>然后第二阶段就是搜索周围的元素,找到符合的元素,二姐没有被使用(没有被使用就是距离为-1),使用的直接continue</li>\n<li>然后进行更新,更新之后在把他插入到队列里面,</li>\n</ol>\n<h2 id=\"2-魔棒\"><a href=\"#2-魔棒\" class=\"headerlink\" title=\"2.魔棒\"></a>2.魔棒</h2><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682614080511668261407501.png\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682616770571668261677035.png\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682616960541668261695181.png\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682617290551668261728112.png\"></p>\n","tags":[]},{"title":"pa1","date":"2022-11-11T03:40:00.000Z","path":"2022/11/11/pa1/","content":"<h2 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1\"></a>1.1</h2><h3 id=\"单步执行\"><a href=\"#单步执行\" class=\"headerlink\" title=\"单步执行\"></a>单步执行</h3><blockquote>\n<p>单步执行的功能十分简单, 而且框架代码中已经给出了模拟CPU执行方式的函数, 你只要使用相应的参数去调用它就可以了. 如果你仍然不知道要怎么做, RTFSC</p>\n</blockquote>\n<p>我们从源代码可以看到这个，通过查看c（继续执行发现）他条用了一个exec函数，我们的目的，就是通过求职，得到那个数字是多少，然后调用exec这个函数，如何得到数字，使用strtok进行得到，之后得到的是char，转换需要使用atoi来进行使用</p>\n<p>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"打印寄存器\"><a href=\"#打印寄存器\" class=\"headerlink\" title=\"打印寄存器\"></a>打印寄存器</h3><blockquote>\n<p>打印寄存器就更简单了. 不过既然寄存器的结构是ISA相关的, 我们希望能为简易调试器屏蔽ISA的差异. 框架代码已经为大家准备了如下的API:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nemu/src/isa/$ISA/reg.c</span><br><span class=\"line\">void isa_reg_display(void);</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>info r</code>之后, 就调用<code>isa_reg_display()</code>, 在里面直接通过<code>printf()</code>输出所有寄存器的值即可. 如果你从来没有使用过<code>printf()</code>, 请RTFM或者STFW. 如果你不知道要输出什么, 你可以参考GDB中的输出</p>\n</blockquote>\n<p>通过这个可以知道，我们需要使用打印寄存器，只需要调用isa——display，因为我们选择的是riscv，所以我们需要在，make menuconfig里面选择isa，同事也要去对应的架构下面完善这个打印函数，这个打印函数还要输出数字，这个数值，是使用gdr这个api得到的，这个在头文件里有定义</p>\n<p>代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"扫描内存\"><a href=\"#扫描内存\" class=\"headerlink\" title=\"扫描内存\"></a>扫描内存</h3><blockquote>\n<p>扫描内存的实现也不难, 对命令进行解析之后, 先求出表达式的值. 但你还没有实现表达式求值的功能, 现在可以先实现一个简单的版本: 规定表达式<code>EXPR</code>中只能是一个十六进制数, 例如</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x 10 0x80000000</span><br></pre></td></tr></table></figure>\n\n<p>这样的简化可以让你暂时不必纠缠于表达式求值的细节. 解析出待扫描内存的起始地址之后, 就可以使用循环将指定长度的内存数据通过十六进制打印出来. 如果你不知道要怎么输出, 同样的, 你可以参考GDB中的输出. 问题是, 我们要如何访问客户计算机的内存数据呢? (答案早就说了喂)</p>\n<p>实现了扫描内存的功能之后, 你可以打印<code>0x80000000</code>或者<code>0x100000</code>附近的内存, 你应该会看到程序的代码, 和内置客户程序的内容进行对比, 检查你的实现是否正确.</p>\n</blockquote>\n<p>刚开始没有看懂题目意思，主要是使用，后面这个地址，来得到后10位地址的指，一个地址有4B，因此800下一个就是804，夹具体调用的函数是vaddr——read（addr，len），这个len是字节长度，写4就是4B，暂时是固定所有制来进行执行的</p>\n<p>代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"pa，一生一芯","slug":"pa，一生一芯","permalink":"http://yoursite.com/tags/pa%EF%BC%8C%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF/"}]},{"title":"word技巧","date":"2022-11-11T02:18:29.000Z","path":"2022/11/11/word技巧/","content":"<h1 id=\"word操作技巧\"><a href=\"#word操作技巧\" class=\"headerlink\" title=\"word操作技巧\"></a>word操作技巧</h1><h2 id=\"3-1项目\"><a href=\"#3-1项目\" class=\"headerlink\" title=\"3.1项目\"></a>3.1项目</h2><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681334072201668133406077.png\"></p>\n<ol>\n<li>带圈字符在拼音那里</li>\n<li>然后段落可以设置行间距</li>\n<li>选择之后可以设置字体，字体又是可以分为大小，还有样式</li>\n<li>项目符号就是指那个三角形，编号是123，直接右击都是可以使用</li>\n<li>最后的是使用对齐方式，使用居中对齐</li>\n<li>还有一件事，可以使用格式刷，对已经设置好样式的文本进行复制粘贴。不需要自己手动设置格式</li>\n</ol>\n<h2 id=\"3-2项目\"><a href=\"#3-2项目\" class=\"headerlink\" title=\"3.2项目\"></a>3.2项目</h2><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681337809981668133780647.png\"></p>\n<p>这个主要是学习表格的使用</p>\n<ol>\n<li>前面的格式样式设置就不提了</li>\n<li>然后是插入表格</li>\n<li>插入之后</li>\n<li>选择之后表单有对齐的功能，使用对齐</li>\n<li>还有合并单元格</li>\n<li>.进行设置行高还有列宽</li>\n<li>之后就是wps的功能，使用公式进行求和还有求级，product（left），还有sum</li>\n<li>之后设置格式，设置的格式有，人民币大写，还有一些其他</li>\n<li>设置表格变宽，使用全选进行设置，设置表格样式，选择线性颜色，还有粗细度</li>\n</ol>\n<h2 id=\"3-3项目\"><a href=\"#3-3项目\" class=\"headerlink\" title=\"3.3项目\"></a>3.3项目</h2><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681348640571668134864015.png\"></p>\n<p>目前，难度比较大的一个。</p>\n<p>学习这个就是药了解到文本框的作用。使用普通的文本没有办法</p>\n<ol>\n<li>文本框进行插入，插入之后可以对他进行字体设置吗，还有字体效果，同事去除文本边框</li>\n<li>接下来就是进行图片插入，插入之后药把文字进行浮动与上方，不然不好移动图片</li>\n<li>之后就是手指下沉</li>\n<li>还有设置文字的行间距这些，就可以skip</li>\n<li>最后一个就是进行插入分栏，插入分栏，需要选择药进行芬兰的段落，还要进行选择分割线。注意不要选择到回车键</li>\n<li>然后就是艺术字进行设置，艺术字插入之后就是对齐，还有一些其他效果。</li>\n</ol>\n<h2 id=\"3-4项目\"><a href=\"#3-4项目\" class=\"headerlink\" title=\"3.4项目\"></a>3.4项目</h2><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681357919941668135791288.png\"></p>\n<p>本次项目还是实际作用比较大，这个对于文档排版还是很有帮助的</p>\n<ol>\n<li>首先就是设置标题，在进行设置标题之前，我们可以对标题格式进行自定义设置</li>\n<li>然后就是对正文样式，还有标题2的样式进行设置</li>\n<li>之后就是对每一本部分进行选择设置</li>\n<li><strong>重点使用分节符，在第一页的最开头</strong>（这样可以分成，正文还有目录2节）‘</li>\n<li>之后就是进行目录的插入，也要进行设置，在应用你进行插入目录</li>\n<li>最后就是也没页脚之间的设置，使用页眉，可以定义最上面</li>\n<li>使用页脚可以定义页码，在不同节的页码，我们就不连接上一节了。然后重新设置页码</li>\n<li>最后就是插入封面，这个也是有点的</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这些项目的操作，重点还是文本框的使用，行间距还有字体。对于我们使用的是最后一个项目，如何进行word排版，发出文章。还有那个字体和插入图片的意思。</p>\n","tags":[{"name":"word","slug":"word","permalink":"http://yoursite.com/tags/word/"}]},{"title":"框架代码","date":"2022-11-08T02:30:13.000Z","path":"2022/11/08/框架代码/","content":"","tags":[]},{"title":"github的action","date":"2022-10-26T09:58:55.000Z","path":"2022/10/26/github的action/","content":"<h1 id=\"action-操作\"><a href=\"#action-操作\" class=\"headerlink\" title=\"action 操作\"></a>action 操作</h1><h2 id=\"1-workflow是什么\"><a href=\"#1-workflow是什么\" class=\"headerlink\" title=\"1.workflow是什么\"></a>1.workflow是什么</h2><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667785330551666778532504.png\"></p>\n<p>假设你开发的java软件又bug,用户提交问题到issue,代码人员进行修复,修复完成,之后进行pull request,然后就进行合并,合并之后旧的进行测试才能发布,这就是一个流程</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667787870631666778786133.png\"></p>\n<h2 id=\"2-名称解释\"><a href=\"#2-名称解释\" class=\"headerlink\" title=\"2.名称解释\"></a>2.名称解释</h2><p><strong>event</strong></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667789010571666778900736.png\"></p>\n<p>就是我触发的条件(pull request)</p>\n<p>workflow就是一系列自动化流程</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667789610561666778960997.png\"></p>\n<p>常用的cicd</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667791370571666779136700.png\"></p>\n<h2 id=\"3-为什么使用action\"><a href=\"#3-为什么使用action\" class=\"headerlink\" title=\"3.为什么使用action\"></a>3.为什么使用action</h2><p>因为你 不想配置环境变量   </p>\n<h2 id=\"3-demo\"><a href=\"#3-demo\" class=\"headerlink\" title=\"3.demo\"></a>3.demo</h2><h3 id=\"3-1yaml教程\"><a href=\"#3-1yaml教程\" class=\"headerlink\" title=\"3.1yaml教程\"></a>3.1yaml教程</h3><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667809480571666780947313.png\"></p>\n<p>使用tab就是一个对象,使用kv来记录纸</p>\n<p>使用过 list记录多个,那就需要-</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667810550641666781054310.png\"></p>\n<h3 id=\"3-2demo简介\"><a href=\"#3-2demo简介\" class=\"headerlink\" title=\"3.2demo简介\"></a>3.2demo简介</h3><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667812140551666781213509.png\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667812860561666781285494.png\"></p>\n<ol>\n<li>name是可选</li>\n<li>on就是event,单位需要出发的事件</li>\n</ol>\n<p>jobs,就是执行的事件</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667813680551666781367823.png\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667815090571666781508152.png\"></p>\n<p>到这一步就是进行代码检查,使用github编译好的checkout</p>\n<p>每一个-,代表一个list,就代表一次操作</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667816150561666781614964.png\"></p>\n<blockquote>\n<p>uses,时使用别人的action,run是自己执行linux命令</p>\n</blockquote>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667816900551666781689860.png\"></p>\n<h2 id=\"4-cicd在哪里执行\"><a href=\"#4-cicd在哪里执行\" class=\"headerlink\" title=\"4.cicd在哪里执行\"></a>4.cicd在哪里执行</h2><p>在github的服务器上 </p>\n<p>jobs是并行的,如果publish需要build,那就要使用关键字,need</p>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h2><p>首先 on 是触发条件(push,pull)</p>\n<p>接下来就是正常的jobs</p>\n<p>首先第一步就是checkout,第二部就是设置值环境时候用java,然后就是读取使用run,之后就clone文件,并且进入,之后就是build,一般使用gradle,并且权限777</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667840363551666784036329.png\"></p>\n","tags":[{"name":"action","slug":"action","permalink":"http://yoursite.com/tags/action/"}]},{"title":"元编程","date":"2022-10-25T11:23:57.000Z","path":"2022/10/25/元编程/","content":"<h1 id=\"元编程\"><a href=\"#元编程\" class=\"headerlink\" title=\"元编程\"></a>元编程</h1><h2 id=\"1-概念解释\"><a href=\"#1-概念解释\" class=\"headerlink\" title=\"1.概念解释\"></a>1.概念解释</h2><p>就相当云java构建spring项目,进行build.使用规则来定义如何使用这些文件来的到,jar包</p>\n<p>cmake 比make跟smart,cmake查找本地的哭,make只会自己寻找文件</p>\n<p>使用make来进行build固件,make寻找makefile来进行make </p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666973194161666697319373.png\"></p>\n<p>上面是需按照那两个文件,然后接下来才是进行编译代码</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666974668991666697465989.png\"></p>\n<h2 id=\"2-ci持续集成\"><a href=\"#2-ci持续集成\" class=\"headerlink\" title=\"2.ci持续集成\"></a>2.ci持续集成</h2><p>自动进行构建,每一个event出发一个action,自动调用</p>\n<p>例如本文的网站,当我写好一个markdwon文件,然后使用push操作,github就会进行ci,并且生成网页</p>\n<h2 id=\"3-测速\"><a href=\"#3-测速\" class=\"headerlink\" title=\"3.测速\"></a>3.测速</h2><p>单元测试,值测试某一个功能</p>\n<p>集成测试,测试代码交互之间是不是又问题</p>\n","tags":[]},{"title":"git控制","date":"2022-10-25T02:26:53.000Z","path":"2022/10/25/git控制/","content":"<h1 id=\"git操作\"><a href=\"#git操作\" class=\"headerlink\" title=\"git操作\"></a>git操作</h1><h2 id=\"1-模型\"><a href=\"#1-模型\" class=\"headerlink\" title=\"1.模型\"></a>1.模型</h2><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666653059061666665304945.png\"></p>\n<p>模型树。对于文件夹，叫做tree，对于文件叫做blob，根目录是root</p>\n<p>git工作流</p>\n<p>使用分支branch，还有merge合并</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666656019051666665601612.png\"></p>\n<p>元数据：作者，message</p>\n<p><strong>数据模型</strong></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666657919001666665791145.png\"></p>\n<p>定义的文件为数组，tree是hash隐射，然后commit是要提交的stack</p>\n<p>一个obejcect是一个版本，维护，使用hash进行映射</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666659669051666665966713.png\"></p>\n<h2 id=\"2git-demo\"><a href=\"#2git-demo\" class=\"headerlink\" title=\"2git demo\"></a>2git demo</h2><p>暂存区</p>\n<blockquote>\n<p>为什么add和commit分开</p>\n</blockquote>\n<p>因为add可能已经完成了一个新的feature，还有一些没有完成，只提交完成的就可以进行发布</p>\n<p>也可能不想上传日志文件</p>\n<p>git checkout 进行版本切换回退 </p>\n<p>git diff进行代码比较</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666813658981666681365480.png\"></p>\n<p>可以比较不同时期某个文件的的区别</p>\n<h2 id=\"3-分支\"><a href=\"#3-分支\" class=\"headerlink\" title=\"3.分支\"></a>3.分支</h2><p>git branch cat，新建一个cat分支</p>\n<p> <img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666817818981666681781631.png\"></p>\n<p>可以之间checkout -b创新建新分支，然后进去</p>\n<p>回到什么功能都没有的master分支，进行合并cat和dog分支</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666821539001666682152951.png\"></p>\n<p>首先git merge cat</p>\n<p>然后出现合并不兼容的情况（conflic）</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666822748981666682274329.png\"></p>\n<p>因为那个if判断不对</p>\n<p>最终结果</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666824468971666682446494.png\"></p>\n","tags":[]},{"title":"acw数论","date":"2022-10-24T13:31:35.000Z","path":"2022/10/24/acw数论/","content":"<h1 id=\"4-数学知识\"><a href=\"#4-数学知识\" class=\"headerlink\" title=\"4.数学知识\"></a>4.数学知识</h1><h2 id=\"4-1质数\"><a href=\"#4-1质数\" class=\"headerlink\" title=\"4.1质数\"></a>4.1质数</h2><h3 id=\"4-1-1基本算法\"><a href=\"#4-1-1基本算法\" class=\"headerlink\" title=\"4.1.1基本算法\"></a>4.1.1基本算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(i&lt;<span class=\"number\">2</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=n/;i++)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(n%i==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-1-2分解质因数\"><a href=\"#4-1-2分解质因数\" class=\"headerlink\" title=\"4.1.2分解质因数\"></a>4.1.2分解质因数</h3><p>从小到大尝试每一个因素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void divide(int n)&#123;</span><br><span class=\"line\">\tfor(int i=2;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tif(n%i==0)&#123;</span><br><span class=\"line\">\t\tint s=0;</span><br><span class=\"line\">\t\t#求出i的次数</span><br><span class=\"line\">\t\twhile(n%i==0)&#123;</span><br><span class=\"line\">\t\tn/=s;</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>优化版本</p>\n<p>n中至多质保函一个最多大于根号n的因子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void divide(int n)&#123;</span><br><span class=\"line\">\tfor(int i=2;i&lt;=n/i;i++)&#123;</span><br><span class=\"line\">\t\tif(n%i==0)&#123;</span><br><span class=\"line\">\t\tint s=0;</span><br><span class=\"line\">\t\t#求出i的次数</span><br><span class=\"line\">\t\twhile(n%i==0)&#123;</span><br><span class=\"line\">\t\tn/=i;</span><br><span class=\"line\">\t\ts++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t#这个循环是求出质数i的次数</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(n&gt;1)print(n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"4-1-3筛质数\"><a href=\"#4-1-3筛质数\" class=\"headerlink\" title=\"4.1.3筛质数\"></a>4.1.3筛质数</h3><p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666190608981666619060512.png\"></p>\n<p>筛选倍数，直到n，是质数的倍数的直接pass</p>\n<p>核心思想，反思倍数的，坑定不是质数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void get_prime(int n)&#123;</span><br><span class=\"line\">\tfor(int i=2;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\tif(!st[i])&#123;</span><br><span class=\"line\">\t\tprime[cnt++]=i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor(int j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class=\"line\">\t\tst[i]=true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<hr>\n<p>下面这个是线性筛法</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666205978511666620597830.png\"></p>\n<p>为什么是正确的，n只会倍最小质因子甩掉。从小到大枚举质数，每次筛掉i和质数</p>\n<p><strong>当break发生意味着prime【j】是i的最小质因子，因此primes【j】</strong></p>\n<p>第一次出现摸他为0 ，一定是质因子</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666209365431666620936520.png\"></p>\n<p>如果摸不是0，pj也一定是pj*i的最小质因子</p>\n","tags":[{"name":"算法基础","slug":"算法基础","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"},{"name":"数论","slug":"数论","permalink":"http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"}]},{"title":"bilibili视频下载","date":"2022-10-24T13:02:31.000Z","path":"2022/10/24/bilibili视频下载/","content":"<h1 id=\"1-哔哩哔哩下载\"><a href=\"#1-哔哩哔哩下载\" class=\"headerlink\" title=\"1.哔哩哔哩下载\"></a>1.哔哩哔哩下载</h1><p>发现一个好用的工具,直接输入连接,就可以批量下载哔哩哔哩视频</p>\n<p>推荐大家star</p>\n<p><a href=\"https://github.com/leiurayer/downkyi\">leiurayer&#x2F;downkyi: 哔哩下载姬downkyi，B站视频下载工具，支持批量下载，支持8K、HDR、杜比视界，提供工具箱（音视频提取、去水印等）。 (github.com)</a></p>\n","tags":[{"name":"使用工具","slug":"使用工具","permalink":"http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/"},{"name":"bilibili","slug":"bilibili","permalink":"http://yoursite.com/tags/bilibili/"}]},{"title":"command教程","date":"2022-10-24T09:39:20.000Z","path":"2022/10/24/command教程/","content":"<h1 id=\"命令行教程\"><a href=\"#命令行教程\" class=\"headerlink\" title=\"命令行教程\"></a>命令行教程</h1><p>工作流，终端复用，dotfile配置，还有远程服务器</p>\n<h2 id=\"2-工作流\"><a href=\"#2-工作流\" class=\"headerlink\" title=\"2.工作流\"></a>2.工作流</h2><p>ctrl+c是打断程序</p>\n<p>ctrl+z是暂停</p>\n<p>ctrl+\\是结束程序 </p>\n<p><strong>使用&amp;表示程序后台执行</strong></p>\n<p>使用jobs可以查看当前执行的进程状态，</p>\n<p>使用bg %1，回复倍暂停的jobs</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666049269001666604925973.png\"></p>\n<p>产生式挂起进程使用nohup</p>\n<h2 id=\"2-tmux\"><a href=\"#2-tmux\" class=\"headerlink\" title=\"2.tmux\"></a>2.tmux</h2><p>一般使用screen，不过也学习一下</p>\n<p>三大核心，session，windows，panel</p>\n<ul>\n<li><p>会话</p>\n<p>- 每个会话都是一个独立的工作区，其中包含一个或多个窗口</p>\n<ul>\n<li><code>tmux</code> 开始一个新的会话</li>\n<li><code>tmux new -s NAME</code> 以指定名称开始一个新的会话</li>\n<li><code>tmux ls</code> 列出当前所有会话</li>\n<li>在 <code>tmux</code> 中输入 <code>&lt;C-b&gt; d</code> ，将当前会话分离</li>\n<li><code>tmux a</code> 重新连接最后一个会话。您也可以通过 <code>-t</code> 来指定具体的会话</li>\n</ul>\n</li>\n</ul>\n<p>windows&#x3D;&#x3D;tab（浏览器的窗口）</p>\n<ul>\n<li><p>会话</p>\n<p>- 每个会话都是一个独立的工作区，其中包含一个或多个窗口</p>\n<ul>\n<li><code>tmux</code> 开始一个新的会话</li>\n<li><code>tmux new -s NAME</code> 以指定名称开始一个新的会话</li>\n<li><code>tmux ls</code> 列出当前所有会话</li>\n<li>在 <code>tmux</code> 中输入 <code>&lt;C-b&gt; d</code> ，将当前会话分离</li>\n<li><code>tmux a</code> 重新连接最后一个会话。您也可以通过 <code>-t</code> 来指定具体的会话</li>\n</ul>\n</li>\n</ul>\n<p>ctrl+a （n，是下一个，p是之前一个tmux窗口</p>\n<h2 id=\"3-重命名\"><a href=\"#3-重命名\" class=\"headerlink\" title=\"3.重命名\"></a>3.重命名</h2><p>alias把长命令进行缩短</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666058858981666605885498.png\"></p>\n<p>alias gc&#x3D;“git clone”</p>\n<p>如何写入重命名，关闭终端，重命名就结束了</p>\n<p><strong>直接写入到dotfiles</strong></p>\n<h2 id=\"4-符号链接\"><a href=\"#4-符号链接\" class=\"headerlink\" title=\"4.符号链接\"></a>4.符号链接</h2><p>就是和快捷方式一样</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666064699001666606468924.png\"></p>\n<h2 id=\"5-ssh\"><a href=\"#5-ssh\" class=\"headerlink\" title=\"5.ssh\"></a>5.ssh</h2><p>这个已经熟练了</p>\n<p>、</p>\n<p>还有设置别名，在ssh里面进行配置，就不用一个刚刚输入IP了</p>\n<h2 id=\"6-homework\"><a href=\"#6-homework\" class=\"headerlink\" title=\"6.homework\"></a>6.homework</h2><h3 id=\"6-1任务控制\"><a href=\"#6-1任务控制\" class=\"headerlink\" title=\"6.1任务控制\"></a>6.1任务控制</h3><blockquote>\n<ol>\n<li>我们可以使用类似 <code>ps aux | grep</code> 这样的命令来获取任务的 pid ，然后您可以基于pid 来结束这些进程。但我们其实有更好的方法来做这件事。在终端中执行 <code>sleep 10000</code> 这个任务。然后用 <code>Ctrl-Z</code> 将其切换到后台并使用 <code>bg</code>来继续允许它。现在，使用 <a href=\"https://www.man7.org/linux/man-pages/man1/pgrep.1.html\"><code>pgrep</code></a> 来查找 pid 并使用 <a href=\"https://www.man7.org/linux/man-pages/man1/pgrep.1.html\"><code>pkill</code></a> 结束进程而不需要手动输入pid。(提示：: 使用 <code>-af</code> 标记)。</li>\n</ol>\n</blockquote>\n<p>这一题使用的pger&#x3D;&#x3D;ps aux|grep python</p>\n<p>pgrep python</p>\n<p>使用prep sleep可以得到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sleep 10000</span><br><span class=\"line\">Ctrl-Z</span><br><span class=\"line\">bg</span><br><span class=\"line\"></span><br><span class=\"line\">pgrep sleep </span><br><span class=\"line\"></span><br><span class=\"line\">pkill  -af sleep</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<blockquote>\n<ol>\n<li><p>如果您希望某个进程结束后再开始另外一个进程， 应该如何实现呢？在这个练习中，我们使用 <code>sleep 60 &amp;</code> 作为先执行的程序。一种方法是使用 <a href=\"http://man7.org/linux/man-pages/man1/wait.1p.html\"><code>wait</code></a> 命令。尝试启动这个休眠命令，然后待其结束后再执行 <code>ls</code> 命令。</p>\n<p>但是，如果我们在不同的 bash 会话中进行操作，则上述方法就不起作用了。因为 <code>wait</code> 只能对子进程起作用。之前我们没有提过的一个特性是，<code>kill</code> 命令成功退出时其状态码为 0 ，其他状态则是非0。<code>kill -0</code> 则不会发送信号，但是会在进程不存在时返回一个不为0的状态码。请编写一个 bash 函数 <code>pidwait</code> ，它接受一个 pid 作为输入参数，然后一直等待直到该进程结束。您需要使用 <code>sleep</code> 来避免浪费 CPU 性能。</p>\n</li>\n</ol>\n</blockquote>\n","tags":[]},{"title":"vim教程","date":"2022-10-22T07:08:51.000Z","path":"2022/10/22/vim教程/","content":"<h1 id=\"vim基础\"><a href=\"#vim基础\" class=\"headerlink\" title=\"vim基础\"></a>vim基础</h1><h2 id=\"1-模式区分\"><a href=\"#1-模式区分\" class=\"headerlink\" title=\"1.模式区分\"></a>1.模式区分</h2><p>分为normal还有iinsert</p>\n<p>norm是倒过来,insert是输入</p>\n<p>:这个是是command命令模式</p>\n<h2 id=\"2-缓冲区和窗口\"><a href=\"#2-缓冲区和窗口\" class=\"headerlink\" title=\"2.缓冲区和窗口\"></a>2.缓冲区和窗口</h2><p>vim也开开启多个tab</p>\n<p>使用:sp可以进行分区</p>\n<p>使用:tabnew创建一个行窗口,一个窗口多个buffer</p>\n<p>使用:qa进行全部关闭窗口</p>\n<h2 id=\"3-文本编辑\"><a href=\"#3-文本编辑\" class=\"headerlink\" title=\"3.文本编辑\"></a>3.文本编辑</h2><p>使用w是向后,b是向前,e是单词结尾,使用s开头,$是结尾</p>\n<p>浏览模式,使用u(向上),使用D(向下)</p>\n<p>查找模式使用f,后面加要查找的单词</p>\n<blockquote>\n<p>以上都是normal模式</p>\n</blockquote>\n<hr>\n<p>下面是insert模式</p>\n<p>使用d进行删除,使用u进行undo,删除到结尾就是de(delete end)</p>\n<p>dd删除一行,cc是删除后给一个空白的给你(d和c差不多)</p>\n<p>u是undo, ctrl+r是重做</p>\n<p>y是粘贴,p是赋值</p>\n<h2 id=\"4-visual模式\"><a href=\"#4-visual模式\" class=\"headerlink\" title=\"4.visual模式\"></a>4.visual模式</h2><p>这个就是进行多选使用的,按住v进入</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16664246597541666424658817.png\"></p>\n<p>然后使用y进行赋值,p紧张粘贴</p>\n<h2 id=\"5-计数模式\"><a href=\"#5-计数模式\" class=\"headerlink\" title=\"5.计数模式\"></a>5.计数模式</h2><p>就是使用4j,线下跳转4行,就是前面加上数字</p>\n<h2 id=\"6-修饰词\"><a href=\"#6-修饰词\" class=\"headerlink\" title=\"6.修饰词\"></a>6.修饰词</h2><p>i是inside ,a是all</p>\n<p>使用da(,会删除所有的值,在(,包括() </p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16664250417491666425041531.png\"></p>\n<p>使用&#x2F;进行查找,n进行查找下一个符合的</p>\n","tags":[]},{"title":"shell教程","date":"2022-10-19T02:44:36.000Z","path":"2022/10/19/shell教程/","content":"<h1 id=\"0-shell脚本\"><a href=\"#0-shell脚本\" class=\"headerlink\" title=\"0.shell脚本\"></a>0.shell脚本</h1><h2 id=\"0-1shell赋值\"><a href=\"#0-1shell赋值\" class=\"headerlink\" title=\"0.1shell赋值\"></a>0.1shell赋值</h2><p>一般使用双一号,这样可以进行输出</p>\n<p>使用方法和python的f差不多,直接使用$</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo=bar</span><br><span class=\"line\">echo &quot;$foo&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打印 bar</span></span><br><span class=\"line\">echo &#x27;$foo&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打印 <span class=\"variable\">$foo</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/.com//code\\site\\weijia99.github.io\\source_posts\\shell教程\\image-20221019203249378.png\" alt=\"image-20221019203249378\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661831919761666183191589.png\"></p>\n<h2 id=\"0-2shell进行函数变换\"><a href=\"#0-2shell进行函数变换\" class=\"headerlink\" title=\"0.2shell进行函数变换\"></a>0.2shell进行函数变换</h2><p>如何使用sh脚本,直接加载到source,使用source保存,然后直接运行函数</p>\n<p>&amp;1-9是保存的函数变量,</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661833769821666183376434.png\"></p>\n<blockquote>\n<p>经常会遇到权限不够的问题,写入,或者读取,那么只要使用sudo!!,就可以执行上面一个权限不够的命令</p>\n</blockquote>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661835669731666183566863.png\"></p>\n<p>grep是查找函数 ,$?代表是不是有错误,正确就是0(没有错误,0个错误)</p>\n<p>这里的||的意思是第一个不对,就执行第二个</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661838109721666183810355.png\"></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661839759721666183975015.png\"></p>\n<p>目前看来这里的||还有&amp;&amp; 都是相反的,一个是只有,一个是或者</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661840729731666184072240.png\"></p>\n<p><strong>使用()代表的是全局变量,局部自定义的变量不需要括号,linux命令</strong></p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661843409731666184340326.png\"></p>\n<p>例题讲解</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661844299741666184429787.png\"></p>\n<p>0代表函数的名称, &amp;#代表参数的数量(#是number的意思) $$代表当前运行的pid </p>\n<ul>\n<li><code>$@</code> - 所有参数 读取参数</li>\n</ul>\n<p>-ne是不相等就代表错误</p>\n<p>for循环所有的参数,然后进行grep查找,有就进行写入,没有就有错误,然后进行追加</p>\n<ul>\n<li><blockquote>\n<p>花括号<code>&#123;&#125;</code> - 当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661858169731666185816168.png\"></p>\n<p>直接进行扩展,可以建立多个文件,或者是少些几个命令</p>\n<p>同时花括号还宽裕使用{a..b},遵循笛卡尔乘积,使用{a…h}表示a到h</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661859079801666185907753.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">convert image.&#123;png,jpg&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会展开为</span></span><br><span class=\"line\">convert image.png image.jpg</span><br><span class=\"line\"></span><br><span class=\"line\">cp /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会展开为</span></span><br><span class=\"line\">cp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可以结合通配使用</span></span><br><span class=\"line\">mv *&#123;.py,.sh&#125; folder</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">会移动所有 *.py 和 *.sh 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">mkdir foo bar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下面命令会创建foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h这些文件</span></span><br><span class=\"line\">touch &#123;foo,bar&#125;/&#123;a..h&#125;</span><br><span class=\"line\">touch foo/x bar/y</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">比较文件夹 foo 和 bar 中包含文件的不同</span></span><br><span class=\"line\">diff &lt;(ls foo) &lt;(ls bar)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输出</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">&lt; x</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">---</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">&gt; y</span></span><br></pre></td></tr></table></figure>\n\n<p>shell最开始是指定运行的文件位置</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661863736751666186372698.png\"></p>\n<h1 id=\"1-shell工具\"><a href=\"#1-shell工具\" class=\"headerlink\" title=\"1.shell工具\"></a>1.shell工具</h1><h2 id=\"1-1查询使用帮助\"><a href=\"#1-1查询使用帮助\" class=\"headerlink\" title=\"1.1查询使用帮助\"></a>1.1查询使用帮助</h2><ol>\n<li>使用-h</li>\n<li>或者直接man rm（man是Manuel</li>\n</ol>\n<h2 id=\"1-2查找文件\"><a href=\"#1-2查找文件\" class=\"headerlink\" title=\"1.2查找文件\"></a>1.2查找文件</h2><p>顾名思义就是使用使用find</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name src -type d </span><br><span class=\"line\">#这是查找名称为src的文件夹，type可以分为d，f，f是文件</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -path */test/*.py -type f</span><br><span class=\"line\">#这是查找路径</span><br></pre></td></tr></table></figure>\n\n\n\n<p>还有其他的参数 -exec就是执行命令，找到后删除</p>\n<p>fd还可以使用</p>\n<p>ctrl+r 也是可以进行查找使用的快捷键</p>\n<h1 id=\"2-课后练习\"><a href=\"#2-课后练习\" class=\"headerlink\" title=\"2.课后练习\"></a>2.课后练习</h1><h2 id=\"2-1ls命令\"><a href=\"#2-1ls命令\" class=\"headerlink\" title=\"2.1ls命令\"></a>2.1ls命令</h2><blockquote>\n<ol>\n<li><p>阅读 <a href=\"https://man7.org/linux/man-pages/man1/ls.1.html\"><code>man ls</code></a> ，然后使用<code>ls</code> 命令进行如下操作：</p>\n<ul>\n<li>所有文件（包括隐藏文件）</li>\n<li>文件打印以人类可以理解的格式输出 (例如，使用454M 而不是 454279954)</li>\n<li>文件以最近访问顺序排序</li>\n<li>以彩色文本显示输出结果</li>\n</ul>\n<p>典型输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--   1 user group 1.1M Jan 14 09:53 baz</span><br><span class=\"line\">drwxr-xr-x   5 user group  160 Jan 14 09:53 .</span><br><span class=\"line\">-rw-r--r--   1 user group  514 Jan 14 06:42 bar</span><br><span class=\"line\">-rw-r--r--   1 user group 106M Jan 13 12:12 foo</span><br><span class=\"line\">drwx------+ 47 user group 1.5K Jan 12 18:08 ..</span><br></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n<p>1.直接使用ls -a</p>\n<p>2.搜索打印就是-h</p>\n<p><img src=\"https://files.catbox.moe/kuxnto.png\"></p>\n<p>3.直接搜索time</p>\n<p><img src=\"https://files.catbox.moe/a0vaqn.png\"></p>\n<p>4.直接搜索color</p>\n<p><img src=\"https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16662495226761666249521717.png\"></p>\n<h2 id=\"2-2shell函数\"><a href=\"#2-2shell函数\" class=\"headerlink\" title=\"2.2shell函数\"></a>2.2shell函数</h2><blockquote>\n<ol>\n<li>编写两个bash函数 <code>marco</code> 和 <code>polo</code> 执行下面的操作。 每当你执行 <code>marco</code> 时，当前的工作目录应当以某种形式保存，当执行 <code>polo</code> 时，无论现在处在什么目录下，都应当 <code>cd</code> 回到当时执行 <code>marco</code> 的目录。 为了方便debug，你可以把代码写在单独的文件 <code>marco.sh</code> 中，并通过 <code>source marco.sh</code>命令，（重新）加载函数。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i</span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">这里忘了加开始解释的地址</span></span><br><span class=\"line\"> marco()&#123;</span><br><span class=\"line\">     echo &quot;$(pwd)&quot; &gt; $HOME/marco_history.log</span><br><span class=\"line\">     echo &quot;save pwd $(pwd)&quot;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> polo()&#123;</span><br><span class=\"line\">     cd &quot;$(cat &quot;$HOME/marco_history.log&quot;)&quot;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"2-3错误检验\"><a href=\"#2-3错误检验\" class=\"headerlink\" title=\"2.3错误检验\"></a>2.3错误检验</h2><blockquote>\n<p>假设您有一个命令，它很少出错。因此为了在出错时能够对其进行调试，需要花费大量的时间重现错误并捕获输出。 编写一段bash脚本，运行如下的脚本直到它出错，将它的标准输出和标准错误流记录到文件，并在最后输出所有内容。 加分项：报告脚本在失败前共运行了多少次。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/env bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">n=$(( RANDOM % 100 ))</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ n -eq 42 ]]; then</span><br><span class=\"line\">    echo &quot;Something went wrong&quot;</span><br><span class=\"line\">    &gt;&amp;2 echo &quot;The error was using magic numbers&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Everything went according to plan&quot;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count=1</span><br><span class=\"line\"></span><br><span class=\"line\"> while true</span><br><span class=\"line\"> do</span><br><span class=\"line\">     ./buggy.sh 2&gt; out.log</span><br><span class=\"line\">     if [[ $? -ne 0 ]]; then</span><br><span class=\"line\">         echo &quot;failed after $count times&quot;</span><br><span class=\"line\">         cat out.log</span><br><span class=\"line\">         break</span><br><span class=\"line\">     fi</span><br><span class=\"line\">     ((count++))</span><br><span class=\"line\"></span><br><span class=\"line\"> done</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"计算机教程缺失的一课","slug":"计算机教程缺失的一课","permalink":"http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E7%A8%8B%E7%BC%BA%E5%A4%B1%E7%9A%84%E4%B8%80%E8%AF%BE/"}]},{"title":"dfg代码解读","date":"2022-10-18T14:05:12.000Z","path":"2022/10/18/dfg代码解读/","content":"","tags":[]},{"title":"换电脑更新hexo","date":"2022-10-18T10:02:26.000Z","path":"2022/10/18/换电脑更新hexo/","content":"<h2 id=\"换电脑更新hexo\"><a href=\"#换电脑更新hexo\" class=\"headerlink\" title=\"换电脑更新hexo\"></a>换电脑更新hexo</h2><blockquote>\n<p>因为更换电脑之后，原始数据在之前的电脑，所以博客一直没有更新。最近为了，监督自己复盘，花费两天重新折腾 了一下博客。本来想着把博客迁移到hugo，结果hugo，更新的教程还没有hexo教程多。而且我这个github.io的域名已经使用了。如果更新hugo。就得把这个仓库的数据清空。（主要是折腾两天了，githubpage使用action自动更新还比较繁琐）。所以才换回hexo。下面我来复盘一下这两天的折腾过程。</p>\n</blockquote>\n<h2 id=\"1-更换hugo\"><a href=\"#1-更换hugo\" class=\"headerlink\" title=\"1.更换hugo\"></a>1.更换hugo</h2><p>主要参考的是这个up的教程。</p>\n<p><a href=\"https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/\">Hugo + GitHub Action，搭建你的博客自动发布系统 · Pseudoyu</a></p>\n<h3 id=\"1-1hugo本地搭建\"><a href=\"#1-1hugo本地搭建\" class=\"headerlink\" title=\"1.1hugo本地搭建\"></a>1.1hugo本地搭建</h3><p>本地搭建参照这个up没有任何问题，主要是要把下载的主题里面的example文件复制下来，然后更新<strong>config。toml</strong>文件，注意这里的坑点（需要解析自己baseurl为自己github的地址）不然搭建之后直接跳转到example的网站，让我以为是自己搭建问题，折腾了几个小时。然后就没有什么坑点了</p>\n<h3 id=\"1-2域名购买\"><a href=\"#1-2域名购买\" class=\"headerlink\" title=\"1.2域名购买\"></a>1.2域名购买</h3><p>为了贯彻讲白嫖进行到底的思想，我本来想着是使用freenom进行搭建一个 域名。但是一直购买失败。然后我又突然想起来，我之前认证了github学生包了的，所以直接去github学生包找到了一个提供免费域名的公司。顶级域名是.tech.一年的白嫖时间。博主使用的cloudflare，这个也不错，之前有过部署服务器的经验。所以我吧购买的域名，直接把dns改到cloudflare里的域名了。（可能等了一个小时才有结果）</p>\n<p>域名设置到cloudflare后，需要进行cname设置（cname的意思就是重新跳转，例如输入世界一流大学.com直接跳转到sdu.edu.cn）</p>\n<p>上述过程还好，没有花费多少时间。主要下面的设置自定义域名</p>\n<h3 id=\"1-3设置自定义域名\"><a href=\"#1-3设置自定义域名\" class=\"headerlink\" title=\"1.3设置自定义域名\"></a>1.3设置自定义域名</h3><p>因为我的原始github.io的域名已经设置成为hexo的网站了，不能再次使用。所以我就参考了别人的方法，不能够有多个github.io的网站，但是可以在其他仓库里面开启一个仓库，然后使用github .io&#x2F;projectname 来进行构成一个新的网站。所以哦去setting里面打开了一个新的page，然后此时还有一个坑点（<strong>仓库默认的是main分支，我之后按照这个up的都是master分支，所以会出现几次配置失败的情况）</strong>我删除重建了几个仓库才解决这个问题。</p>\n<p>在setting进行悬着page，然后悬着page，在page里选择master分支，使用githubbot进行更新网页。</p>\n<p>下面是设置自定义域名的坑，因为设置自定义域名，会<strong>新建一个cname文件</strong>，造成本地与远程版本内容不一样，所以我之前使用push操作都是push失败，后来强制push，造成cname丢失，无法通过自定义域名访问到网页。这个卡了一晚上。</p>\n<h3 id=\"1-4自定义action的坑点\"><a href=\"#1-4自定义action的坑点\" class=\"headerlink\" title=\"1.4自定义action的坑点\"></a>1.4自定义action的坑点</h3><p>因为使用自定义action的话，是需要设置github workflows的，我直接新建一个仓库，进行设置了workflows，结果</p>\n<p>就是push的时候本地雨远程还是有 差异。而且他这个是需要把本地hugo的文件夹全部上传。（原文没些清楚，我以为只需要一个workflows工作流），结果也是看了一上午，触发任务失败。然后痛定思痛还是换成hexo了c</p>\n<h3 id=\"1-5总结错误\"><a href=\"#1-5总结错误\" class=\"headerlink\" title=\"1.5总结错误\"></a>1.5总结错误</h3><p>目前犯了下列几个错误</p>\n<ol>\n<li>git操作不熟悉（remote branch，checkout，push -f）不知道怎么查看分支，如何删除，还有切换分支，分支管理</li>\n<li>自定义域名，这个大坑</li>\n<li>主要是设置config.toml文件没有进行设置，一直跳转到example网页，心态崩了几次</li>\n<li>之后就是主题设置问题，theme</li>\n<li>还有就是两个仓库，一个仓库上传public内容，一个进行上传所有的文件</li>\n<li>觉得没有时间然后换回来hexo了</li>\n</ol>\n<h2 id=\"2-hexo进行重装\"><a href=\"#2-hexo进行重装\" class=\"headerlink\" title=\"2.hexo进行重装\"></a>2.hexo进行重装</h2><p><a href=\"https://wungjyan.github.io/2018/08/17/move-hexo/\">hexo博客迁移到另一台电脑 | wj’blog (wungjyan.github.io)</a></p>\n<p>复制下面的文件，就相当于在hexo分支里面的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">package.json</span><br><span class=\"line\">scaffolds/</span><br><span class=\"line\">source/</span><br><span class=\"line\">themes/</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// mac环境</span><br><span class=\"line\">sudo npm install -g hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>说起来也是比较简单，就是直接git下来所有的文件，但是也有小坑</p>\n<p>git版本问题，因为，我是最新的npm，但是hexo的版本还是3.6的，结果就造成版本不同。按照上述的直接进行重装，就会造成安装版本不兼容，直接造成无法推送到服务端。但是本地没有问题。</p>\n<p>所以接下来就是进行更新npm的不兼容的hexo版本</p>\n<p>主要参考的是下面的</p>\n<p><a href=\"https://novnan.github.io/Hexo/update_hexo/\">Hexo版本升级指南 | novnan’s notes</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以下指令均在Hexo目录下操作，先定位到Hexo目录</span><br><span class=\"line\">//查看当前版本，判断是否需要升级</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo version</span></span><br><span class=\"line\"></span><br><span class=\"line\">//全局升级hexo-cli</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm i hexo-cli -g</span></span><br><span class=\"line\"></span><br><span class=\"line\">//再次查看版本，看hexo-cli是否升级成功</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo version</span></span><br><span class=\"line\"></span><br><span class=\"line\">//安装npm-check，若已安装可以跳过</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm install -g npm-check</span></span><br><span class=\"line\"></span><br><span class=\"line\">//检查系统插件是否需要升级</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm-check</span></span><br><span class=\"line\"></span><br><span class=\"line\">//安装npm-upgrade，若已安装可以跳过</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm install -g npm-upgrade</span></span><br><span class=\"line\"></span><br><span class=\"line\">//更新package.json</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm-upgrade</span></span><br><span class=\"line\"></span><br><span class=\"line\">//更新全局插件</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm update -g</span></span><br><span class=\"line\"></span><br><span class=\"line\">//更新系统插件</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">npm update --save</span></span><br><span class=\"line\"></span><br><span class=\"line\">//再次查看版本，判断是否升级成功</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">hexo version</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>需要我们自己安装npm-check工具，然后就是网络原因，不提了（直接使用clash打开cmd）</p>\n<p>然后更新也有可能会有问题，于是就进行重启了。</p>\n<p>之后hexo就成功的到hexo</p>\n<h2 id=\"3-更换hexo主题\"><a href=\"#3-更换hexo主题\" class=\"headerlink\" title=\"3.更换hexo主题\"></a>3.更换hexo主题</h2><p>由于之前一直是使用yiliya主题，这次换的是butterfly主题，然后新的主题也有坑的，需要在原始的config里面进行更换主题轻微butterfly。同事还得继续复制自带的config文件，到跟目录，进行重命名，修改文件的信息，才可以更换主题细节。具体还有其他细节还在摸索，是参考下面这个的。有时间再继续折腾一下。</p>\n<p><a href=\"https://akilar.top/posts/f99b208/\">Butterfly主题美化日记 | Akilarの糖果屋</a></p>\n<h2 id=\"4-复盘\"><a href=\"#4-复盘\" class=\"headerlink\" title=\"4.复盘\"></a>4.复盘</h2><p>失败原因，还有一段时间尝试使用gitee，结果gitee使用网页，需要认证身份证。弄了半天，我就跑路了，耽误时间。</p>\n<ol>\n<li>不想丢失以前写的hexo数据</li>\n<li>然后使用自定义域名不熟悉</li>\n<li>不熟悉使用git操作</li>\n<li>好久没使用相关前段工具</li>\n<li>折腾太少了，应该及时止损</li>\n<li>b站有非常详细的教程</li>\n</ol>\n","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"}]},{"title":"test","date":"2022-10-18T09:00:50.000Z","path":"2022/10/18/test/","content":"","tags":[]},{"title":"Hello World","date":"2022-10-18T08:54:26.073Z","path":"2022/10/18/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","tags":[]},{"title":"5.3.11删除以x为根的子树","date":"2020-07-09T07:30:12.000Z","path":"2020/07/09/5-3-11删除以x为根的子树/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>删除以x为根节点的所有子树，注意可能有多个为x值</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>先递归删除所有节点</li>\n<li>可能有多个值是x，所以用层序找出他们的父节点，然后删除x，同时设置父节点的子节点为空</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除每个以x为值的子树（可能有多个，父节点智能用层序找到）</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.递归删除节点</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.层序找到后调用1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">del</span><span class=\"params\">(TreeNode* root)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root== <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">del</span>(root-&gt;left);</span><br><span class=\"line\">    <span class=\"built_in\">del</span>(root-&gt;right);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(root);</span><br><span class=\"line\">    <span class=\"comment\">//释放节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">searchDel</span><span class=\"params\">(TreeNode *root,<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root== <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;val==x)&#123;</span><br><span class=\"line\"><span class=\"comment\">//        根节点就是，全删</span></span><br><span class=\"line\">        <span class=\"built_in\">del</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//    层序遍历找父亲</span></span><br><span class=\"line\">    queue&lt;TreeNode*&gt; queue1;</span><br><span class=\"line\">    queue1.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue1.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        TreeNode* cur=queue1.<span class=\"built_in\">front</span>();</span><br><span class=\"line\"><span class=\"comment\">//        如果是就删除</span></span><br><span class=\"line\">        queue1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur-&gt;left)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur-&gt;left-&gt;val==x)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">del</span>(cur-&gt;left);</span><br><span class=\"line\">                cur-&gt;left= <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//                加入</span></span><br><span class=\"line\">                queue1.<span class=\"built_in\">push</span>(cur-&gt;left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur-&gt;right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur-&gt;right-&gt;val==x)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">del</span>(cur-&gt;right);</span><br><span class=\"line\">                cur-&gt;right= <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//                加入</span></span><br><span class=\"line\">                queue1.<span class=\"built_in\">push</span>(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"树","slug":"树","permalink":"http://yoursite.com/tags/%E6%A0%91/"}]},{"title":"王道5.3.7完全二叉树的判定","date":"2020-07-09T01:29:25.000Z","path":"2020/07/09/王道5-3-7完全二叉树的判定/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给定一个二叉树，确定它是否是一个完全二叉树。</p>\n<p>百度百科中对完全二叉树的定义如下：</p>\n<p>若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~ 2h 个节点。）</p>\n<p>示例 1：</p>\n<p>输入：[1,2,3,4,5,6] 输出：true 解释：最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后一层中的所有结点（{4,5,6}）都尽可能地向左。</p>\n<p>来源：力扣（LeetCode） 链接：<a href=\"https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree\">https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据层序遍历，设置flag标志是否出现过null，如果出现null，设置flag为1.如果存在当前节点，判断当前flag如果是1，就直接返回false，不是就把他的左右节点加入（无论他的左右节点是否存在），接着层序。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isCompleteTree</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root== <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue&lt;TreeNode*&gt; queue1;</span><br><span class=\"line\">    queue1.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">    <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//    是否出现null</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue1.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        TreeNode* cur=queue1.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cur) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            queue1.<span class=\"built_in\">push</span>(cur-&gt;left);</span><br><span class=\"line\">            queue1.<span class=\"built_in\">push</span>(cur-&gt;right);</span><br><span class=\"line\">            queue1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            queue1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","tags":[{"name":"树","slug":"树","permalink":"http://yoursite.com/tags/%E6%A0%91/"}]},{"title":"王道5.3.5","date":"2020-07-08T04:33:26.000Z","path":"2020/07/08/王道5-3-5/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给定一个二叉树，找出其最大深度。</p>\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>说明: 叶子节点是指没有子节点的节点。</p>\n<p>示例： 给定二叉树 [3,9,20,null,null,15,7]，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<p>&#x2F; \\ 9 20 &#x2F; \\ 15 7 返回它的最大深度 3 。</p>\n<p>来源：力扣（LeetCode） 链接：<a href=\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree\">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>通过层序遍历来获取</li>\n<li>queue记录当前层的所有元素，用for遍历这一层的元素加入他的左右节点，for结束就是一层结束</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    queue&lt;TreeNode*&gt; queue1;</span><br><span class=\"line\">    queue1.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue1.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n=queue1.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"><span class=\"comment\">//        对这一层所有的元素进行加子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            TreeNode *cur=queue1.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur-&gt;left)&#123;</span><br><span class=\"line\">                queue1.<span class=\"built_in\">push</span>(cur-&gt;left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur-&gt;right)&#123;</span><br><span class=\"line\">                queue1.<span class=\"built_in\">push</span>(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            queue1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        for结束后这一层就结束了</span></span><br><span class=\"line\">        num++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","tags":[{"name":"树","slug":"树","permalink":"http://yoursite.com/tags/%E6%A0%91/"}]},{"title":"王道5.3_2_3非递归后续遍历","date":"2020-07-08T03:39:50.000Z","path":"2020/07/08/王道5-3-2-3非递归后续遍历/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给定一个二叉树，返回它的 后序 遍历。</p>\n<p>示例:</p>\n<p>输入: [1,null,2,3] 1 \\ 2 &#x2F; 3</p>\n<p>输出: [3,2,1] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>\n<p>来源：力扣（LeetCode） 链接：<a href=\"https://leetcode-cn.com/problems/binary-tree-postorder-traversal\">https://leetcode-cn.com/problems/binary-tree-postorder-traversal</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<h2 id=\"2-思路\"><a href=\"#2-思路\" class=\"headerlink\" title=\"2.思路\"></a>2.思路</h2><p>构建模板</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>( 栈非空 || p 非空)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( p 非空)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>填写步骤</p>\n<ol>\n<li>p非空一直左压</li>\n<li>然后，如果是空的，获取栈的顶端，如果右节点也是空的或者访问了的就是p.right&#x3D;pre，那么就直接访问当前的，并把p给pop出来，同时设置pre&#x3D;p，标志访问，*<strong>同时设置p&#x3D;null（否则下一次p会进入if判断，然后一直压）*</strong></li>\n<li>如果不是空的，并且没有访问，那么把p&#x3D;p.right，他就会进入之前的if，一直左压</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">   <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">postorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">    stack&lt;TreeNode*&gt; stack1;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; vector;</span><br><span class=\"line\"><span class=\"comment\">//    两个一个判断，一个向前走</span></span><br><span class=\"line\">    TreeNode *p=root;</span><br><span class=\"line\">    TreeNode *pre= <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p||!stack1.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p)&#123;</span><br><span class=\"line\"><span class=\"comment\">//            如果p存在就一直左压</span></span><br><span class=\"line\">            stack1.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">            p=p-&gt;left;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            不存在先取top</span></span><br><span class=\"line\">            p=stack1.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!p-&gt;right||p-&gt;right==pre)&#123;</span><br><span class=\"line\"><span class=\"comment\">//                不存在，或者是之前访问的了</span></span><br><span class=\"line\">                vector.<span class=\"built_in\">push_back</span>(p-&gt;val);</span><br><span class=\"line\"><span class=\"comment\">//                并设置这个也是访问的</span></span><br><span class=\"line\">                pre=p;</span><br><span class=\"line\"><span class=\"comment\">//                弹出当前的</span></span><br><span class=\"line\">                stack1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                p= <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//                设置为右边的，然后他访问右边的所有左树</span></span><br><span class=\"line\">                p=p-&gt;right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vector;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","tags":[{"name":"树","slug":"树","permalink":"http://yoursite.com/tags/%E6%A0%91/"}]},{"title":"kmp数组求法","date":"2020-07-05T08:15:01.000Z","path":"2020/07/05/kmp数组求法/","content":"<h2 id=\"1-next求法\"><a href=\"#1-next求法\" class=\"headerlink\" title=\"1.next求法\"></a>1.next求法</h2><p>例如s&#x3D;‘abcac’，首先从第一位a开始，设置a为0（如果是-1，后面的都不需要+1），第二个是b，b的前面子串是a，没有匹配的设置成0+1，接下来是c，前面子串是ab，同理设置为0+1，下一个a也是0+1，最后是c，前面子串是abca，他的前缀子串a和后缀a相等，设置成1+1，所以next&#x3D;{0,1,1,1,2}</p>\n<h2 id=\"2-nextval求法\"><a href=\"#2-nextval求法\" class=\"headerlink\" title=\"2.nextval求法\"></a>2.nextval求法</h2><p>例如，s&#x3D;‘aaaab’，next&#x3D;{0，1,2,3,4,}，第一个是a，i&#x3D;0，设置naxtval&#x3D;0，i++.第二个是a与第一位相同，设置nextval【2】&#x3D;nextval【1】&#x3D;0，i++，第三个是a与第i个相同就是nextval【3】&#x3D;nextval【2】，第四个与第3个也相同，也是nv【4】&#x3D;nv【3】，第5位是b与第4位是a不同，i不加，nextval【5】&#x3D;next【5】&#x3D;4，所以nextval&#x3D;{0,0,0,0,4}</p>\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"王道2_2_24","date":"2020-07-01T13:44:57.000Z","path":"2020/07/01/王道2-2-24/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">题目大意</a></h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>\n<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>\n<p>说明：不允许修改给定的链表。</p>\n<p>。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>快慢两个指针，fast走两步，slow走一步，如果相遇就是有环</li>\n<li>假设head与入幻点相差a，入环与slow差b，fast比slow多走a+b（2倍关系），若slow再走a会到入幻点（因为入幻与slow差b），而且head走a也是入幻点，所以如果a&#x3D;slow，那么就是入幻点</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//快慢指针，若相遇择优换</span></span><br><span class=\"line\">        ListNode *fast=head,*slow=head;</span><br><span class=\"line\">        <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(slow&amp;&amp;fast-&gt;next)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//fast走两次，所以需要检查fast的下一个</span></span><br><span class=\"line\">            slow=slow-&gt;next;</span><br><span class=\"line\">            fast=fast-&gt;next-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            ListNode *p=head;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p!=slow)&#123;</span><br><span class=\"line\">                p=p-&gt;next;</span><br><span class=\"line\">                slow=slow-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"},{"name":"王道数据结构","slug":"王道数据结构","permalink":"http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"王道2_2_25","date":"2020-07-01T08:23:13.000Z","path":"2020/07/01/王道2-2-25/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><blockquote>\n<p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ， 将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p>\n</blockquote>\n<blockquote>\n<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>\n</blockquote>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>先找到中间节点，q用两次next，p用一次next，等q为空，那么p就是中间节点</li>\n<li>对p后面的节点进行头插法，形成逆序，如123456，变成123465，*<strong>注意是465*</strong></li>\n<li>然后进行断链，形成1234和65两条链</li>\n<li>最后进行和链162534</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reorderList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* p=head,*q=head,*r,*s=head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!head)            <span class=\"comment\">//head为空，则直接退出</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;         </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q-&gt;next)&#123;      <span class=\"comment\">//寻找中间结点</span></span><br><span class=\"line\">            q=q-&gt;next;       <span class=\"comment\">//p走一步</span></span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q-&gt;next)</span><br><span class=\"line\">              q=q-&gt;next;     <span class=\"comment\">//q走两步</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q=p-&gt;next;           <span class=\"comment\">//p所指结点为中间结点，q为后半段链表的首结点</span></span><br><span class=\"line\">        p-&gt;next=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q)&#123;            <span class=\"comment\">//将链表后半段逆置</span></span><br><span class=\"line\">            r=q-&gt;next;</span><br><span class=\"line\">            q-&gt;next=p-&gt;next;</span><br><span class=\"line\">            p-&gt;next=q;</span><br><span class=\"line\">            q=r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q=p-&gt;next;            <span class=\"comment\">//q指向后半段的第一个数据结点</span></span><br><span class=\"line\">        p-&gt;next=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q)&#123;             <span class=\"comment\">//将链表后半段的结点插入到指定位置</span></span><br><span class=\"line\">            r=q-&gt;next;        <span class=\"comment\">//r指向后半段的下一个结点</span></span><br><span class=\"line\">            q-&gt;next=s-&gt;next;  <span class=\"comment\">//将q所指结点插入到s所指结点（head结点）之后</span></span><br><span class=\"line\">            s-&gt;next=q;        </span><br><span class=\"line\">            s=q-&gt;next;        <span class=\"comment\">//s指向前半段的下一个插入点</span></span><br><span class=\"line\">            q=r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"},{"name":"王道数据结构","slug":"王道数据结构","permalink":"http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"王道2_2_21","date":"2020-07-01T08:23:08.000Z","path":"2020/07/01/王道2-2-21/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>双指针，第一个p先走k部，然后q从head开始，pq同时走，直到p为空，q就是索要的节点</p>\n<p>设p与结尾查x次，总长k+x次，p走了x次，也就是倒数k</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kthToLast</span><span class=\"params\">(ListNode* head, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    ListNode* c=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">            head=head.next;</span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">            c=c.next;</span><br><span class=\"line\">            head=head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"},{"name":"王道数据结构","slug":"王道数据结构","permalink":"http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"王道2_2_6","date":"2020-07-01T08:22:49.000Z","path":"2020/07/01/王道2-2-6/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给定一个头结点链表，按照从小到大排序</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据插入排序的思路和逆置链表的思路，首先先把头结点和他的next摘出p，让p为读取元链表的节点，pre为摘出来新链表的头结点，然后pre遍历，小于p.val的就继续，不然就是正常的插入。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> val;</span><br><span class=\"line\">      ListNode *next;</span><br><span class=\"line\">      <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//本题思路插入排序，头插法类似，吧l取出，做个新链表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode* node)</span> </span>&#123;</span><br><span class=\"line\">       ListNode *p=node.next,*q=p.next;</span><br><span class=\"line\">       <span class=\"comment\">//pre是断链后端头插法节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">       ListNode *pre;</span><br><span class=\"line\">       <span class=\"comment\">//进行断链</span></span><br><span class=\"line\">       p.next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">       <span class=\"comment\">//进行替换</span></span><br><span class=\"line\">       p=r;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        r=p.next;</span><br><span class=\"line\">        pre=node;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pre.next!=null&amp;&amp;pre.next.val&lt;p.val)&#123;</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next=pre.next;</span><br><span class=\"line\">        pre.next=p;</span><br><span class=\"line\">        p=r;</span><br><span class=\"line\">        <span class=\"comment\">//进行下一轮</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"},{"name":"王道数据结构","slug":"王道数据结构","permalink":"http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"a1010","date":"2020-06-25T13:18:56.000Z","path":"2020/06/25/a1010/","content":"","tags":[]},{"title":"a1009","date":"2020-06-25T13:18:51.000Z","path":"2020/06/25/a1009/","content":"<h1 id=\"a1009\"><a href=\"#a1009\" class=\"headerlink\" title=\"a1009\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805509540921344\">a1009</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>多项式乘法。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>与前面的多项式加法基本类似。不过要构建两个双精度数组。第一个保存第一列的数字系数和指数。然后再还有一个哈希表。这个是保存第一列由哪几个数字是要进行指数相加的。第二列就首先是遍历这个哈希表。然后进行赋值。如果bi不是零，那么次数就加一。经过加法后，如果bi的值为0，那么次数就减一。，然后再次利用sort函数进行倒序输出就可以了。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span>  a[maxn],b[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a,a+maxn,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(b,b+maxn,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[maxn];</span><br><span class=\"line\">    <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//    统计一共有多少个</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a_index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> hash[maxn];</span><br><span class=\"line\">    <span class=\"type\">int</span> total=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n,zhishu;</span><br><span class=\"line\">        <span class=\"type\">double</span> xishu;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            cin&gt;&gt;zhishu&gt;&gt;xishu;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                a[zhishu]=xishu;</span><br><span class=\"line\">                temp[a_index++]=zhishu;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; a_index; ++k) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">int</span> weizhi=zhishu+temp[k];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (b[weizhi]==<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\">                        hash[count]=weizhi;</span><br><span class=\"line\">                        count++;</span><br><span class=\"line\"><span class=\"comment\">//                        系数增加</span></span><br><span class=\"line\">                        total++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    b[weizhi]+=xishu*a[temp[k]];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (b[weizhi]==<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\">                        total--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;total;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(hash,hash+count);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> l = count<span class=\"number\">-1</span>; l &gt;=<span class=\"number\">0</span> ; --l) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[hash[l]]!=<span class=\"number\">0.0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d %0.1lf&quot;</span>,hash[l],b[hash[l]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/%E6%B0%B4%E9%A2%98/"}]},{"title":"a1008","date":"2020-06-25T13:18:47.000Z","path":"2020/06/25/a1008/","content":"<h1 id=\"a1008\"><a href=\"#a1008\" class=\"headerlink\" title=\"a1008\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805511923286016\">a1008</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>求错电梯所需要花费的所有时间。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n ;</span><br><span class=\"line\">    <span class=\"type\">int</span> cost[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;cost[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> total=cost[<span class=\"number\">0</span>]*<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cost[j]&lt;cost[j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">            total+=(cost[j<span class=\"number\">-1</span>]-cost[j])*<span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            total+=(cost[j]-cost[j<span class=\"number\">-1</span>])*<span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    total+=n*<span class=\"number\">5</span>;</span><br><span class=\"line\">    cout&lt;&lt;total;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/%E6%B0%B4%E9%A2%98/"}]},{"title":"a1007","date":"2020-06-25T13:18:43.000Z","path":"2020/06/25/a1007/","content":"<h1 id=\"a1007\"><a href=\"#a1007\" class=\"headerlink\" title=\"a1007\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168\">a1007</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给出序列片段最大的和。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>使用动态规划,</p>\n<h3 id=\"第一步构建d-p-初始值\"><a href=\"#第一步构建d-p-初始值\" class=\"headerlink\" title=\"第一步构建d[p]初始值\"></a>第一步构建d[p]初始值</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d[<span class=\"number\">0</span>]=cost[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二步检查是不是所有的都是负数\"><a href=\"#第二步检查是不是所有的都是负数\" class=\"headerlink\" title=\"第二步检查是不是所有的都是负数\"></a>第二步检查是不是所有的都是负数</h3><p>如果是,那么直接返回0</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cost[j]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0 %d %d&quot;</span>,cost[<span class=\"number\">0</span>],cost[n<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写出转移态方程\"><a href=\"#写出转移态方程\" class=\"headerlink\" title=\"写出转移态方程\"></a>写出转移态方程</h3><p>如果d[j-1]+a[j]&gt;a[j],d[j]&#x3D;d[j-1]+a[j],否则d[j]&#x3D;a[j]</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt; n; ++k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d[k<span class=\"number\">-1</span>]+cost[k]&gt;cost[k])&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">            d[k]=d[k<span class=\"number\">-1</span>]+cost[k];</span><br><span class=\"line\">            s[k]=s[k<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            d[k]=cost[k];</span><br><span class=\"line\"><span class=\"comment\">//            更新起点</span></span><br><span class=\"line\">            s[k]=k;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总体代码\"><a href=\"#总体代码\" class=\"headerlink\" title=\"总体代码\"></a>总体代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"type\">int</span> cost[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;cost[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    首先检查睡吧睡吧全是负数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cost[j]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;0 %d %d&quot;</span>,cost[<span class=\"number\">0</span>],cost[n<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构建转移方程</span></span><br><span class=\"line\"><span class=\"comment\">//    首先是初始化d【0】=a【0】</span></span><br><span class=\"line\"><span class=\"comment\">//    然后是d【i】=a【i】或者是d【i】=d【i-1】+a【i】</span></span><br><span class=\"line\">    <span class=\"type\">int</span> d[n];</span><br><span class=\"line\">    d[<span class=\"number\">0</span>]=cost[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> s[n];</span><br><span class=\"line\"><span class=\"comment\">//    这是起点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt; n; ++k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d[k<span class=\"number\">-1</span>]+cost[k]&gt;cost[k])&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">            d[k]=d[k<span class=\"number\">-1</span>]+cost[k];</span><br><span class=\"line\">            s[k]=s[k<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            d[k]=cost[k];</span><br><span class=\"line\"><span class=\"comment\">//            更新起点</span></span><br><span class=\"line\">            s[k]=k;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> l = <span class=\"number\">0</span>; l &lt;n ; ++l) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d[l]&gt;d[p])&#123;</span><br><span class=\"line\">            p=l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;d[p]&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;cost[s[p]]&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;cost[p];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"a1006","date":"2020-06-25T13:18:40.000Z","path":"2020/06/25/a1006/","content":"<h1 id=\"a1006\"><a href=\"#a1006\" class=\"headerlink\" title=\"a1006\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805516654460928\">a1006</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给出最早走了和最迟走的人。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>通过把时间转化为秒，然后再利用sought函数进行排序。就可以给出答案。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;</span><br><span class=\"line\">    string  name;</span><br><span class=\"line\">    <span class=\"type\">int</span> start;</span><br><span class=\"line\">    <span class=\"type\">int</span> end;</span><br><span class=\"line\">&#125;stu[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp11</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.start&lt;b.start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp12</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.end&gt;b.end;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin&gt;&gt;n ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        string name;</span><br><span class=\"line\">        <span class=\"type\">int</span> h1,h2,m1,m2,s1,s2;</span><br><span class=\"line\">        cin&gt;&gt;name;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d:%d:%d %d:%d:%d&quot;</span>,&amp;h1,&amp;m1,&amp;s1,&amp;h2,&amp;m2,&amp;s2);</span><br><span class=\"line\">        <span class=\"type\">int</span> start=h1*<span class=\"number\">3600</span>+m1*<span class=\"number\">60</span>+s1;</span><br><span class=\"line\">        <span class=\"type\">int</span> end=h2*<span class=\"number\">3600</span>+m2*<span class=\"number\">60</span>+s2;</span><br><span class=\"line\">        stu[i].name=name;</span><br><span class=\"line\">        stu[i].start=start;</span><br><span class=\"line\">        stu[i].end=end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(stu,stu+n,cmp11);</span><br><span class=\"line\">    cout&lt;&lt;stu[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(stu,stu+n,cmp12);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;stu[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"a1005","date":"2020-06-25T13:18:36.000Z","path":"2020/06/25/a1005/","content":"<h1 id=\"a1005\"><a href=\"#a1005\" class=\"headerlink\" title=\"a1005\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805519074574336\">a1005</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给出一个数，把它的和加起来。然后再用英语来表达出他的和。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>通过字符串来进行加减，然后再利用哈希表来进行查值输出。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string string1;</span><br><span class=\"line\">    cin&gt;&gt;string1;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; string1.<span class=\"built_in\">length</span>(); ++i) &#123;</span><br><span class=\"line\">        ans+=string1[i]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    string string2=<span class=\"built_in\">to_string</span>(ans);</span><br><span class=\"line\">    string out[<span class=\"number\">10</span>]=&#123;<span class=\"string\">&quot;zero&quot;</span>,<span class=\"string\">&quot;one&quot;</span>,<span class=\"string\">&quot;two&quot;</span>,<span class=\"string\">&quot;three&quot;</span>,<span class=\"string\">&quot;four&quot;</span>,<span class=\"string\">&quot;five&quot;</span>,<span class=\"string\">&quot;six&quot;</span>,<span class=\"string\">&quot;seven&quot;</span>,<span class=\"string\">&quot;eight&quot;</span>,<span class=\"string\">&quot;nine&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; string2.<span class=\"built_in\">length</span>(); ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            cout&lt;&lt;out[string2[j]-<span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;out[string2[j]-<span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/%E6%B0%B4%E9%A2%98/"}]},{"title":"a1004","date":"2020-06-25T13:18:31.000Z","path":"2020/06/25/a1004/","content":"","tags":[]},{"title":"a1003","date":"2020-06-25T13:18:27.000Z","path":"2020/06/25/a1003/","content":"<h1 id=\"a1003\"><a href=\"#a1003\" class=\"headerlink\" title=\"a1003\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376\">a1003</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>根据距离人数构成最短路径，如果距离相等，选择人数多的，最后输出有几条最短路径和最多几个人</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>最短路径的代码正常写法</p>\n<h3 id=\"0-首先初始化\"><a href=\"#0-首先初始化\" class=\"headerlink\" title=\"0.首先初始化\"></a>0.首先初始化</h3><p>G的所有值设置为maxn，距离d也设置maxn，visited设置false</p>\n<h3 id=\"1-首先是选出距离的点\"><a href=\"#1-首先是选出距离的点\" class=\"headerlink\" title=\"1.首先是选出距离的点\"></a>1.首先是选出距离的点</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> less=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> min=maxn;</span><br><span class=\"line\"><span class=\"comment\">//        首先找到最小编</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[i]&lt;min&amp;&amp;!visited[i])&#123;</span><br><span class=\"line\">                less=i;</span><br><span class=\"line\">                min=d[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-异常检查\"><a href=\"#2-异常检查\" class=\"headerlink\" title=\"2.异常检查\"></a>2.异常检查</h2><p>就是如果没找到最短的边那就结束</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (less==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-设置为访问过，并且通过这个点的周围所有点更新d\"><a href=\"#3-设置为访问过，并且通过这个点的周围所有点更新d\" class=\"headerlink\" title=\"3.设置为访问过，并且通过这个点的周围所有点更新d\"></a>3.设置为访问过，并且通过这个点的周围所有点更新d</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">visited[less]= <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//        通过这个最短点找与他相连的其他点，通过这个桥梁更新距离</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[j]&amp;&amp;G[less][j]!=maxn)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d[less]+G[less][j]&lt;d[j])&#123;</span><br><span class=\"line\">                    d[j]=d[less]+G[less][j];</span><br><span class=\"line\">                    ren[j]=cost[j]+ren[less];</span><br><span class=\"line\">                    times[j]=times[less];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (d[less]+G[less][j]==d[j])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cost[j]+ren[less]&gt;ren[j])&#123;</span><br><span class=\"line\">                        ren[j]=cost[j]+ren[less];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    times[j]+=times[less];</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-完整的代码\"><a href=\"#4-完整的代码\" class=\"headerlink\" title=\"4.完整的代码\"></a>4.完整的代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,m,c1,c2;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class=\"line\">    <span class=\"type\">int</span> cost[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> d[n];</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(d,d+n,maxn);</span><br><span class=\"line\">    <span class=\"type\">bool</span> visited[n];</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(visited,visited+n, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> G[n][n];</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(G[<span class=\"number\">0</span>],G[<span class=\"number\">0</span>]+n*n,maxn);</span><br><span class=\"line\">    <span class=\"type\">int</span> ren[n];</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(ren,ren+n,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin&gt;&gt;cost[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p,q,t;</span><br><span class=\"line\">        cin&gt;&gt;p&gt;&gt;q&gt;&gt;t;</span><br><span class=\"line\">        G[p][q]=G[q][p]=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[c1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> times[n];</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(times,times+n,<span class=\"number\">0</span>);</span><br><span class=\"line\">    times[c1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    ren[c1]=cost[c1];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k) &#123;</span><br><span class=\"line\"><span class=\"comment\">//        寻找最短的点</span></span><br><span class=\"line\">        <span class=\"type\">int</span> less=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> min=maxn;</span><br><span class=\"line\"><span class=\"comment\">//        首先找到最小编</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[i]&lt;min&amp;&amp;!visited[i])&#123;</span><br><span class=\"line\">                less=i;</span><br><span class=\"line\">                min=d[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        没找到直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (less==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        visited[less]= <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//        通过这个最短点找与他相连的其他点，通过这个桥梁更新距离</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[j]&amp;&amp;G[less][j]!=maxn)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d[less]+G[less][j]&lt;d[j])&#123;</span><br><span class=\"line\">                    d[j]=d[less]+G[less][j];</span><br><span class=\"line\">                    ren[j]=cost[j]+ren[less];</span><br><span class=\"line\">                    times[j]=times[less];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (d[less]+G[less][j]==d[j])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cost[j]+ren[less]&gt;ren[j])&#123;</span><br><span class=\"line\">                        ren[j]=cost[j]+ren[less];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    times[j]+=times[less];</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout&lt;&lt;times[c2]&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;ren[c2];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"图","slug":"图","permalink":"http://yoursite.com/tags/%E5%9B%BE/"},{"name":"最短路径","slug":"最短路径","permalink":"http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"}]},{"title":"a1002","date":"2020-06-25T13:18:07.000Z","path":"2020/06/25/a1002/","content":"<h1 id=\"a1002\"><a href=\"#a1002\" class=\"headerlink\" title=\"a1002\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000\">a1002</a></h1><h2 id=\"题目大意。\"><a href=\"#题目大意。\" class=\"headerlink\" title=\"题目大意。\"></a>题目大意。</h2><p>两个多项式相加。</p>\n<h2 id=\"解决方法。\"><a href=\"#解决方法。\" class=\"headerlink\" title=\"解决方法。\"></a>解决方法。</h2><p>构建一个双精度的数组。同时在构建一个索引表。这个索引表来看一共有哪几个是要加入的指数，如果系数为零，那么就把它给加入到索引表里面。然后进行加法运算，如果最后的系数还是为零，那么就减少一个要输出的数值。最后再使用short来进行排序，按倒叙的方法来输入所有的值。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,zhishu;</span><br><span class=\"line\">    <span class=\"type\">double</span> xishu;</span><br><span class=\"line\">    <span class=\"type\">double</span> ans[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(ans,ans+<span class=\"number\">1000</span>,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> temp[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> time=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i) &#123;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;  n; ++j) &#123;</span><br><span class=\"line\">            cin&gt;&gt;zhishu&gt;&gt;xishu;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans[zhishu]==<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\">                temp[time]=zhishu;</span><br><span class=\"line\">                time++;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ans[zhishu]+=xishu;</span><br><span class=\"line\"><span class=\"comment\">//            如多相加为0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans[zhishu]==<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                count--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;count;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(temp,temp+time);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = time<span class=\"number\">-1</span>; k &gt;=<span class=\"number\">0</span> ; --k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans[temp[k]]!=<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;temp[k]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1lf&quot;</span>,ans[temp[k]]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/%E6%B0%B4%E9%A2%98/"}]},{"title":"a1001","date":"2020-06-25T13:16:15.000Z","path":"2020/06/25/a1001/","content":"<h1 id=\"a1001\"><a href=\"#a1001\" class=\"headerlink\" title=\"a1001\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400\">a1001</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>计算结果并且用英式符号来表达。 就是每三位用一个逗号来表达。</p>\n<h2 id=\"解决方法。\"><a href=\"#解决方法。\" class=\"headerlink\" title=\"解决方法。\"></a>解决方法。</h2><p>通过把他们的和变成字符串。然后从后往前便利了每三位取模等于零，那就是要添加逗号的地方。但是了最后一个和第一个不能要呀逗号。同时还要考虑到这个字符串的正负性。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> maxn=<span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a,b;</span><br><span class=\"line\">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"type\">int</span> c=a+b;</span><br><span class=\"line\">    string  d=<span class=\"built_in\">to_string</span>(c);</span><br><span class=\"line\">    <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    string  temp=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = d.<span class=\"built_in\">length</span>()<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">1</span>; --i) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            temp=d[i]+temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count%<span class=\"number\">3</span>==<span class=\"number\">0</span>&amp;&amp;i!=d.<span class=\"built_in\">length</span>()<span class=\"number\">-1</span>&amp;&amp;i!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//                cout&lt;&lt;&#x27;,&#x27;;</span></span><br><span class=\"line\">                temp=<span class=\"string\">&#x27;,&#x27;</span>+temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = d.<span class=\"built_in\">length</span>()<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            temp=d[i]+temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count%<span class=\"number\">3</span>==<span class=\"number\">0</span>&amp;&amp;i!=d.<span class=\"built_in\">length</span>()<span class=\"number\">-1</span>&amp;&amp;i!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                temp=<span class=\"string\">&#x27;,&#x27;</span>+temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/%E6%B0%B4%E9%A2%98/"}]},{"title":"pat输入","date":"2020-06-25T09:59:08.000Z","path":"2020/06/25/pat输入/","content":"<h1 id=\"输入方法\"><a href=\"#输入方法\" class=\"headerlink\" title=\"输入方法\"></a>输入方法</h1><h2 id=\"1-eof\"><a href=\"#1-eof\" class=\"headerlink\" title=\"1.eof\"></a>1.eof</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-条件读入\"><a href=\"#2-条件读入\" class=\"headerlink\" title=\"2.条件读入\"></a>2.条件读入</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n)!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-for\"><a href=\"#3-for\" class=\"headerlink\" title=\"3.for\"></a>3.for</h2>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"输入","slug":"输入","permalink":"http://yoursite.com/tags/%E8%BE%93%E5%85%A5/"}]},{"title":"单纯形方法","date":"2019-09-07T07:00:21.000Z","path":"2019/09/07/单纯形方法/","content":"<h1 id=\"单纯形方法\"><a href=\"#单纯形方法\" class=\"headerlink\" title=\"单纯形方法\"></a>单纯形方法</h1><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"1-第一步：化标准形\"><a href=\"#1-第一步：化标准形\" class=\"headerlink\" title=\"1.第一步：化标准形\"></a>1.第一步：化标准形</h3><p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107213728799-361504213.png\" alt=\"示例图片\"></p>\n<h4 id=\"标准型的规定\"><a href=\"#标准型的规定\" class=\"headerlink\" title=\"标准型的规定\"></a>标准型的规定</h4><h5 id=\"1-目标函数要求max\"><a href=\"#1-目标函数要求max\" class=\"headerlink\" title=\"1.目标函数要求max\"></a>1.目标函数要求max</h5><h5 id=\"2-约束条件均为等式\"><a href=\"#2-约束条件均为等式\" class=\"headerlink\" title=\"2.约束条件均为等式\"></a>2.约束条件均为等式</h5><h5 id=\"3-决策变量为非负约束\"><a href=\"#3-决策变量为非负约束\" class=\"headerlink\" title=\"3.决策变量为非负约束\"></a>3.决策变量为非负约束</h5><h4 id=\"最终结果\"><a href=\"#最终结果\" class=\"headerlink\" title=\"最终结果\"></a>最终结果</h4><p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107213813096-1714683258.png\" alt=\"图片\"></p>\n<h3 id=\"2-第二步：构建单纯形表\"><a href=\"#2-第二步：构建单纯形表\" class=\"headerlink\" title=\"2.第二步：构建单纯形表\"></a>2.第二步：构建单纯形表</h3><h4 id=\"1-找出基向量，就是他们系数组成的矩阵是单位向量\"><a href=\"#1-找出基向量，就是他们系数组成的矩阵是单位向量\" class=\"headerlink\" title=\"1.找出基向量，就是他们系数组成的矩阵是单位向量\"></a>1.找出基向量，就是他们系数组成的矩阵是单位向量</h4><h4 id=\"2-把z函数的系数也加入这个矩阵，除了自己的系数是1，其余都为0，用行变换变成只有1个1，其余列上都为0\"><a href=\"#2-把z函数的系数也加入这个矩阵，除了自己的系数是1，其余都为0，用行变换变成只有1个1，其余列上都为0\" class=\"headerlink\" title=\"2.把z函数的系数也加入这个矩阵，除了自己的系数是1，其余都为0，用行变换变成只有1个1，其余列上都为0\"></a><em><strong>2.把z函数的系数也加入这个矩阵，除了自己的系数是1，其余都为0，用行变换变成只有1个1，其余列上都为0</strong></em></h4><p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107213844346-2035122277.png\" alt=\"图片\"></p>\n<h3 id=\"3-第三步：求解\"><a href=\"#3-第三步：求解\" class=\"headerlink\" title=\"3.第三步：求解\"></a>3.第三步：求解</h3><h4 id=\"1-找出θi里最大的所对应那一列\"><a href=\"#1-找出θi里最大的所对应那一列\" class=\"headerlink\" title=\"1.找出θi里最大的所对应那一列\"></a>1.找出θi里最大的所对应那一列</h4><p>​\t\t如图，应该是3最大，对应的就是x2那一列，x2就是换入变量，再求b&#x2F;aij,就是b那一列除x2对应的那一列，那个最小就是，那个元素的行向量对应的向量换出变量（b&gt;0才可以除，若都小于等于0，则无解）12&#x2F;3&#x3D;4,9&#x2F;1&#x3D;9,4小，x3就是换出变量</p>\n<h4 id=\"2-把x2那一列化成010，保证只有x2与x3相交的为1，其他的都为0，在x2列\"><a href=\"#2-把x2那一列化成010，保证只有x2与x3相交的为1，其他的都为0，在x2列\" class=\"headerlink\" title=\"2.把x2那一列化成010，保证只有x2与x3相交的为1，其他的都为0，在x2列\"></a>2.把x2那一列化成010，保证只有x2与x3相交的为1，其他的都为0，在x2列<!--应该是001，这里的是θi在第一行，我们的是在最后一行--></h4><p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107214818862-1198445671.png\" alt=\"图片\"></p>\n<h4 id=\"3-重复1-2两步，直到z的系数都小于等于0\"><a href=\"#3-重复1-2两步，直到z的系数都小于等于0\" class=\"headerlink\" title=\"3.重复1,2两步，直到z的系数都小于等于0\"></a>3.重复1,2两步，直到z的系数都小于等于0</h4><p>此时x1是换入，x4是换出，变成001</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107215054862-1636502575.png\"></p>\n<h3 id=\"4-结束\"><a href=\"#4-结束\" class=\"headerlink\" title=\"4.结束\"></a>4.结束</h3><p>当θi都小于等于0是结束，x*&#x3D;（3,3,0,0）T，z&#x3D;15</p>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h3><h4 id=\"解的分类\"><a href=\"#解的分类\" class=\"headerlink\" title=\"解的分类\"></a>解的分类</h4><h6 id=\"1-唯一最优解\"><a href=\"#1-唯一最优解\" class=\"headerlink\" title=\"1.唯一最优解\"></a>1.唯一最优解</h6><p>当所有非基变量的检验数都小于零，则原问题有唯一最优解</p>\n<h6 id=\"2-无穷多个最优解\"><a href=\"#2-无穷多个最优解\" class=\"headerlink\" title=\"2.无穷多个最优解\"></a>2.无穷多个最优解</h6><p>当所有非基变量的检验数<strong>都小于等于零，注意有等于零的检验数</strong>，则有无穷多个最优解，有0</p>\n<p>非基向量就可以随便加也无影响，所以是无穷个</p>\n<h6 id=\"3-无界解\"><a href=\"#3-无界解\" class=\"headerlink\" title=\"3.无界解\"></a>3.<a href=\"https://www.baidu.com/s?wd=%E6%97%A0%E7%95%8C&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\">无界</a>解</h6><p>当任意一个大于零的非基变量的检验数，其对应的ajk（求最小比值的分母）都小于等于零时，则原问题有<a href=\"https://www.baidu.com/s?wd=%E6%97%A0%E7%95%8C&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\">无界</a>解</p>\n<p>就是b&#x2F;aij&lt;&#x3D;0,无法找到换出的变量</p>\n<h6 id=\"4-无可行解\"><a href=\"#4-无可行解\" class=\"headerlink\" title=\"4.无可行解\"></a>4.无可行解</h6><p>添加人工变量后的问题，当所有非基变量的检验数都小于等于零，而基变量中有人工变量时，则原问题无可行解</p>\n","tags":[{"name":"线性代数","slug":"线性代数","permalink":"http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"运筹学","slug":"运筹学","permalink":"http://yoursite.com/tags/%E8%BF%90%E7%AD%B9%E5%AD%A6/"}]},{"title":"Boot","date":"2019-09-04T15:08:42.000Z","path":"2019/09/04/Boot/","content":"","tags":[]},{"title":"动态规划","date":"2019-07-26T06:41:10.000Z","path":"2019/07/26/动态规划/","content":"<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><blockquote>\n<p><strong>动态规划算法介绍</strong></p>\n<p>1)动态规划(<strong>Dynamic</strong> <strong>Programming</strong>)算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法</p>\n<p>●</p>\n<p>2)动态规划算法与分治算法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p>\n<p>●</p>\n<p>3)与分治法不同的是，<strong>适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的****。</strong> ( 即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解 )</p>\n<p>●</p>\n<p>4)动态规划可以通过<strong>填****表的方式</strong>来逐步推进，得到最优解.</p>\n</blockquote>\n<h2 id=\"2-背包问题\"><a href=\"#2-背包问题\" class=\"headerlink\" title=\"2.背包问题\"></a>2.背包问题</h2><p><a href=\"https://imgchr.com/i/entZOU\"><img src=\"https://s2.ax1x.com/2019/07/26/entZOU.md.png\" alt=\"entZOU.md.png\"></a></p>\n<h2 id=\"3-解决思路\"><a href=\"#3-解决思路\" class=\"headerlink\" title=\"3.解决思路\"></a>3.解决思路</h2><p><a href=\"https://imgchr.com/i/enttmD\"><img src=\"https://s2.ax1x.com/2019/07/26/enttmD.md.png\" alt=\"enttmD.md.png\"></a></p>\n<h2 id=\"4-个人理解\"><a href=\"#4-个人理解\" class=\"headerlink\" title=\"4.个人理解\"></a>4.个人理解</h2><p>构建数组，行是在前一行新加的物品，猎是增加的重量，最大不过背包能加的重量。当新加一个物品时看这个是否超重，如果超重，那就把上一行的价值赋值到下面来；如果没有超重，那就选取最大值（在上一行的这个，和这个物品的价值+v【i-1】【j-w【i】】）来选取最大值，直到填完所有表，最后一个就是最好的。</p>\n<h2 id=\"5-代码讲解\"><a href=\"#5-代码讲解\" class=\"headerlink\" title=\"5.代码讲解\"></a>5.代码讲解</h2><p><strong>注意一个坑，物品的下标是从0开始的，但是在表里是第一行开始的，所以在找重量是需要i-1</strong></p>\n<p>如果需要记录是拿几个弄出最有解，设置一个数组path，当用心加的物品时最大就把path【i】【j】设置为1，就从最后面找，当path为1时，j&#x3D;j-w【i-1】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] weight=&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] val=&#123;<span class=\"number\">1500</span>,<span class=\"number\">3000</span>,<span class=\"number\">2000</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> m=<span class=\"number\">4</span>;<span class=\"comment\">//定义背包重量为4kg</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] v=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[weight.length+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] path=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[weight.length+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];<span class=\"comment\">//定义路径</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; v.length; i++) &#123;<span class=\"comment\">//从第一个物品出发</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; v[<span class=\"number\">0</span>].length; j++) &#123;<span class=\"comment\">//从第1kg出发</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (weight[i-<span class=\"number\">1</span>]&gt;j)&#123;<span class=\"comment\">//新加的物品的重量大于背包重量(从1开始，但是wuti还是从0开始要减去1</span></span><br><span class=\"line\">                    v[i][j]=v[i-<span class=\"number\">1</span>][j];<span class=\"comment\">//没加物品时背包的价值</span></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v[i-<span class=\"number\">1</span>][j]&gt;val[i-<span class=\"number\">1</span>]+v[i-<span class=\"number\">1</span>][j-weight[i-<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        v[i][j]=v[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        path[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                        v[i][j]=val[i-<span class=\"number\">1</span>]+v[i-<span class=\"number\">1</span>][j-weight[i-<span class=\"number\">1</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> i=v.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=v[<span class=\"number\">0</span>].length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&gt;=<span class=\"number\">0</span>&amp;&amp;j&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (path[i][j]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                System.out.println(i+<span class=\"string\">&quot;放进去了&quot;</span>);</span><br><span class=\"line\">                j=j-weight[i-<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"汉诺塔","date":"2019-07-26T06:30:56.000Z","path":"2019/07/26/汉诺塔/","content":"<h1 id=\"汉诺塔\"><a href=\"#汉诺塔\" class=\"headerlink\" title=\"汉诺塔\"></a>汉诺塔</h1><h2 id=\"1-分治定义\"><a href=\"#1-分治定义\" class=\"headerlink\" title=\"1.分治定义\"></a>1.分治定义</h2><p>分治法在每一层递归上都有三个步骤：</p>\n<p>1)分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题</p>\n<p>2)解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</p>\n<p>3)合并：将各个子问题的解合并为原问题的解。</p>\n<blockquote>\n<p>if |P|≤n0</p>\n<p>   then return(ADHOC(P))</p>\n<p>&#x2F;&#x2F;将P分解为较小的子问题 P1 ,P2 ,…,Pk</p>\n<p>for i←1 to k</p>\n<p>do yi ← Divide-and-Conquer(Pi)   递归解决Pi</p>\n<p>T ← MERGE(y1,y2,…,yk)   合并子问题</p>\n<p>return(T)</p>\n</blockquote>\n<blockquote>\n<p>其中|P|表示问题P的规模；n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC(P)是该分治法中的基本子算法，用于直接解小规模的问题P。因此，当P的规模不超过n0时直接用算法ADHOC(P)求解。算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1<br>,P2 ,…,Pk的相应的解y1,y2,…,yk合并为P的解。</p>\n</blockquote>\n<h2 id=\"2-汉诺塔定义\"><a href=\"#2-汉诺塔定义\" class=\"headerlink\" title=\"2.汉诺塔定义\"></a>2.汉诺塔定义</h2><blockquote>\n<p>Ø汉诺塔的传说</p>\n<p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根<a href=\"https://baike.baidu.com/item/%E9%87%91%E5%88%9A%E7%9F%B3/80698\">金刚石</a>柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>\n<p>假如每秒钟一次，共需多长时间呢？移完这些金片需要5845.54亿年以上，太阳系的预期寿命据说也就是数百亿年。真的过了5845.54亿年，地球上的一切生命，连同梵塔、庙宇等，都早已经灰飞烟灭。</p>\n</blockquote>\n<h2 id=\"3-解决思路\"><a href=\"#3-解决思路\" class=\"headerlink\" title=\"3.解决思路\"></a>3.解决思路</h2><p>Ø汉诺塔游戏的<strong>演示</strong>和<strong>思路分析</strong>:    </p>\n<p>1)如果是有一个盘， A-&gt;C</p>\n<p>如果我们有 n &gt;&#x3D; 2 情况，我们总是可以看做是两个盘 1.最下边的盘 2. 上面的盘</p>\n<p>1)先把 最上面的盘 A-&gt;B</p>\n<p>2)把最下边的盘 A-&gt;C</p>\n<p>3)把B塔的所有盘 从 B-&gt;C   </p>\n<h2 id=\"4-个人理解\"><a href=\"#4-个人理解\" class=\"headerlink\" title=\"4.个人理解\"></a>4.个人理解</h2><p>把牌分为两部分，最下面一个，和上面的所有，先把最上面所有的（n-1）移动到b盘（借助c盘的帮助），再把最下面的一个移动到c盘，最后再把b盘上的所有移动到c盘（借助a盘的帮助），把规模为n的问题分为n-1,1，n-1的三个问题，递归基就是只有一个元素，那就把元素从a到c</p>\n<h2 id=\"5-代码讲解\"><a href=\"#5-代码讲解\" class=\"headerlink\" title=\"5.代码讲解\"></a>5.代码讲解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        solve(<span class=\"number\">4</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//n个塔借组b使他从a到c</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">char</span> a,<span class=\"type\">char</span> b,<span class=\"type\">char</span> c)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第1个盘从&quot;</span>+a+<span class=\"string\">&quot;到&quot;</span>+c);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            solve(n-<span class=\"number\">1</span>,a,c,b);<span class=\"comment\">//吧最上面的pan全部移到b上</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第&quot;</span>+n+<span class=\"string\">&quot;个盘从&quot;</span>+a+<span class=\"string\">&quot;到&quot;</span>+c);<span class=\"comment\">//这个ac是指起点到终点，不是a点和c点</span></span><br><span class=\"line\">            solve(n-<span class=\"number\">1</span>,b,a,c);<span class=\"comment\">//再把b上的pan全部移到c上</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"分治","slug":"分治","permalink":"http://yoursite.com/tags/%E5%88%86%E6%B2%BB/"}]},{"title":"广度优先","date":"2019-07-26T05:51:11.000Z","path":"2019/07/26/广度优先/","content":"<h1 id=\"广度优先\"><a href=\"#广度优先\" class=\"headerlink\" title=\"广度优先\"></a>广度优先</h1><h1 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h1><p>1)访问初始结点v并标记结点v为已访问。</p>\n<p>2)结点v入队列</p>\n<p>3)当队列非空时，继续执行，否则算法结束。</p>\n<p>4)出队列，取得队头结点u。</p>\n<p>5)查找结点u的第一个邻接结点w。</p>\n<p>6)若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：</p>\n<p>6.1 若结点w尚未被访问，则访问结点w并标记为已访问。 </p>\n<p>6.2 结点w入队列 </p>\n<p>6.3 查找结点u的继w邻接结点后的下一个邻接结点w，转到步骤6。</p>\n<h2 id=\"2-个人理解\"><a href=\"#2-个人理解\" class=\"headerlink\" title=\"2.个人理解\"></a>2.个人理解</h2><p>广度优先就是遍历他的所有的子节点再遍历他的子节点的子节点，直到为空才停止（遍历市也是要威访问过的），同样万一有断点，所以需要for循环一遍</p>\n<h1 id=\"3-代码讲解\"><a href=\"#3-代码讲解\" class=\"headerlink\" title=\"3.代码讲解\"></a>3.代码讲解</h1><p>需要一个队列来进行排序，先压入所有节点标为已经访问过的，再排出一个节点，并把这个节点的子节点全部压入标记已经访问，当队列为空才停止</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bfs</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span>[][] arr,<span class=\"type\">boolean</span>[] visited)</span>&#123;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue=<span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        System.out.print(i+<span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">        queue.add(i);</span><br><span class=\"line\">        visited[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v=queue.remove();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[v][j]==<span class=\"number\">1</span>&amp;&amp;!visited[j])&#123;</span><br><span class=\"line\">                    System.out.print(j+<span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">                    visited[j]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    queue.add(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样也有断点需要全部for一遍</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!visited[i])&#123;</span><br><span class=\"line\">               <span class=\"comment\">//depthfs(i,arr,visited);</span></span><br><span class=\"line\">               dfs(i,arr,visited);</span><br><span class=\"line\">               <span class=\"comment\">//brofs(i,arr,visited);</span></span><br><span class=\"line\">               <span class=\"comment\">//bfs(i,arr,visited);</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"图","slug":"图","permalink":"http://yoursite.com/tags/%E5%9B%BE/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"深度优先","date":"2019-07-24T19:53:22.000Z","path":"2019/07/25/深度优先/","content":"<h1 id=\"深度优先\"><a href=\"#深度优先\" class=\"headerlink\" title=\"深度优先\"></a>深度优先</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p><strong>深度优先遍历算法步骤</strong></p>\n<p>1)访问初始结点v，并标记结点v为已访问。</p>\n<p>2)查找结点v的第一个邻接结点w。</p>\n<p>3)若w存在，则继续执行4，如果w不存在，则回到第1步，将从v的下一个结点继续。</p>\n<p>4)若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后进行步骤123）。</p>\n<p>5)查找结点v的w邻接结点的下一个邻接结点，转到步骤3。</p>\n<h2 id=\"2-个人理解\"><a href=\"#2-个人理解\" class=\"headerlink\" title=\"2.个人理解\"></a>2.个人理解</h2><p>先设置第一个点为已经访问过的再看这个点与其他拿几个点连接过，并且那些点没有访问过，那么久把这个点递归dfs（递归基停止是都访问过就直接跳回上一个</p>\n<h2 id=\"3-代码讲解\"><a href=\"#3-代码讲解\" class=\"headerlink\" title=\"3.代码讲解\"></a>3.代码讲解</h2><p>首先设置为已经访问过的，在用for循环看邻接矩阵是否这两个相连并没有访问过，那么久把这个点用dfs在递归</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> i,<span class=\"type\">int</span>[][] arr,<span class=\"type\">boolean</span>[] visited)</span>&#123;</span><br><span class=\"line\">       visited[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">       System.out.print(i+<span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (arr[i][j]==<span class=\"number\">1</span>&amp;&amp;!visited[j])&#123;</span><br><span class=\"line\">               dfs(j,arr,visited);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面只是访问的所有相连的节点，万一还有断点，所以需要for循环所有节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!visited[i])&#123;</span><br><span class=\"line\">               <span class=\"comment\">//depthfs(i,arr,visited);</span></span><br><span class=\"line\">               dfs(i,arr,visited);</span><br><span class=\"line\">               <span class=\"comment\">//brofs(i,arr,visited);</span></span><br><span class=\"line\">               <span class=\"comment\">//bfs(i,arr,visited);</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"图","slug":"图","permalink":"http://yoursite.com/tags/%E5%9B%BE/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"基数排序","date":"2019-07-24T07:20:22.000Z","path":"2019/07/24/基数排序/","content":"<h1 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>1)将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p>\n<h2 id=\"2-个人理解\"><a href=\"#2-个人理解\" class=\"headerlink\" title=\"2.个人理解\"></a>2.个人理解</h2><p>首先获取最大值，看他有几位数就循环几次，首先构建10个队列，从0到9，首先看数组里元素的个位数，按个位数是i依次加入到为i的队列里，然后再把数组重新赋值，从队列0移除所有元素，一直到队列9，再从个位数j获取放到队列j里，直到循环结束</p>\n<h2 id=\"3-图示讲解\"><a href=\"#3-图示讲解\" class=\"headerlink\" title=\"3.图示讲解\"></a>3.图示讲解</h2><p><a href=\"https://imgchr.com/i/eEIKfK\"><img src=\"https://s2.ax1x.com/2019/07/24/eEIKfK.md.png\" alt=\"eEIKfK.md.png\"></a></p>\n<p><a href=\"https://imgchr.com/i/eEI16e\"><img src=\"https://s2.ax1x.com/2019/07/24/eEI16e.md.png\" alt=\"eEI16e.md.png\"></a></p>\n<p><a href=\"https://imgchr.com/i/eEIJ0A\"><img src=\"https://s2.ax1x.com/2019/07/24/eEIJ0A.md.png\" alt=\"eEIJ0A.md.png\"></a></p>\n<h2 id=\"4-代码讲解\"><a href=\"#4-代码讲解\" class=\"headerlink\" title=\"4.代码讲解\"></a>4.代码讲解</h2><p>找出最大值，看是几位就循环几次，然后依次获取个位数加入对应的队列再给arr赋值把队列清空，在获取十位，直到结束</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr=&#123;<span class=\"number\">53</span>,<span class=\"number\">63</span>,<span class=\"number\">542</span>,<span class=\"number\">748</span>,<span class=\"number\">14</span>,<span class=\"number\">214</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> max=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i]&gt;max)&#123;</span><br><span class=\"line\">                max=arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> count=(max+<span class=\"string\">&quot;&quot;</span>).length();<span class=\"comment\">//要循环的次数</span></span><br><span class=\"line\">        Queue&lt;Integer&gt; [] queues=<span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; queues.length; i++) &#123;</span><br><span class=\"line\">            queues[i]=<span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,n=<span class=\"number\">1</span> ; i &lt; count; i++,n*=<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> tem=arr[j]/n%<span class=\"number\">10</span>;<span class=\"comment\">//获取数字</span></span><br><span class=\"line\">                queues[tem].add(arr[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; queues.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!queues[j].isEmpty())&#123;</span><br><span class=\"line\">                    arr[t]=queues[j].remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                    t++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"归并排序","date":"2019-07-24T07:00:02.000Z","path":"2019/07/24/归并排序/","content":"<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p><strong>归<strong><strong>并排序（</strong></strong>MERGE-SORT<strong><strong>）是利用</strong></strong>归并<strong><strong>的思想实现的排序方法，该算法采用经典的</strong></strong>分治<strong><strong>（</strong></strong>divide-and-conquer<strong><strong>）策略（分治法将问题</strong></strong>分**</strong>(divide)<strong><strong>成一些小的问题然后递归求解，而</strong></strong>治****(conquer)<strong><strong>的阶段则将分的阶段得到的各答案</strong></strong>“<strong><strong>修补</strong></strong>“<strong><strong>在一起，即分而治之</strong></strong>)**<strong>。</strong></p>\n<h2 id=\"2-0个人理解\"><a href=\"#2-0个人理解\" class=\"headerlink\" title=\"2.0个人理解\"></a>2.0个人理解</h2><p>先把数组一直分 分成n组直到每组只有一个元素，然后在对每两组元素进行合并（因为他就是两组两组的分的就是用middle来分），合并时就先狗一个空数组，同时设置l1，l2为每一组元素的开头，再比较arr【l1】yuarr【l2】的大小，晓得就假如新数组，并++，最后再把这个数组的元素拷贝到原数组里。</p>\n<h2 id=\"3-图示讲解\"><a href=\"#3-图示讲解\" class=\"headerlink\" title=\"3.图示讲解\"></a>3.图示讲解</h2><p><a href=\"https://imgchr.com/i/eEfgzQ\"><img src=\"https://s2.ax1x.com/2019/07/24/eEfgzQ.md.png\" alt=\"eEfgzQ.md.png\"></a></p>\n<h2 id=\"4-0代码讲解\"><a href=\"#4-0代码讲解\" class=\"headerlink\" title=\"4.0代码讲解\"></a>4.0代码讲解</h2><h3 id=\"4-1不断分组的代码\"><a href=\"#4-1不断分组的代码\" class=\"headerlink\" title=\"4.1不断分组的代码\"></a>4.1不断分组的代码</h3><p>终止条件同样也是l》&#x3D;r，否则就是取中间值middle，再划分两组，最后进行合并</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span> left,<span class=\"type\">int</span> right,<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left&gt;=right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid=(left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        mergeSort(left,mid,arr);</span><br><span class=\"line\">        mergeSort(mid+<span class=\"number\">1</span>,right,arr);</span><br><span class=\"line\">        merge(left,right,mid,arr);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2合并代码\"><a href=\"#4-2合并代码\" class=\"headerlink\" title=\"4.2合并代码\"></a>4.2合并代码</h3><p>找到两个数组收元素，i一个是left，j另一个是mid+1，新开一个数组copy，长度是right-left+1进行循环，当i&lt;&#x3D;mid,j&lt;&#x3D;right,比较arr【i】与arr【j】的大小，那个小，copy【k】就是那个，并且k++，小的那个下标j++，当有一个超过mid，那就一直是copy【k++】&#x3D;arr【j+&#x3D;】，若是超过right，那就是copy【k++】&#x3D;arr【i++】，最后再把copy里的元素放回arr里</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span> left,<span class=\"type\">int</span> right,<span class=\"type\">int</span> mid,<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i=left;</span><br><span class=\"line\">        <span class=\"type\">int</span> j=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> [] aux=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[right-left+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid&amp;&amp;j&lt;=right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i]&lt;arr[j])&#123;</span><br><span class=\"line\">                aux[t]=arr[i];</span><br><span class=\"line\">                t++;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                aux[t]=arr[j];</span><br><span class=\"line\">                t++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid)&#123;</span><br><span class=\"line\">            aux[t]=arr[i];</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=right)&#123;</span><br><span class=\"line\">            aux[t]=arr[j];</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> p=left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; aux.length; k++) &#123;</span><br><span class=\"line\">            arr[p+k]=aux[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"sss","date":"2019-07-23T06:45:41.000Z","path":"2019/07/23/快排/","content":"<h1 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h1><h2 id=\"1-0定义\"><a href=\"#1-0定义\" class=\"headerlink\" title=\"1.0定义\"></a>1.0定义</h2><blockquote>\n<p><strong>快<strong><strong>速排序（</strong></strong>Quicksort<strong><strong>）是对冒泡排序的一种改进</strong></strong>。<strong><strong>基</strong></strong>本思想****是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</strong></p>\n</blockquote>\n<h2 id=\"2-个人理解\"><a href=\"#2-个人理解\" class=\"headerlink\" title=\"2.个人理解\"></a>2.个人理解</h2><p>快排运用了分而治之的思想，先把数组分成两个区域，一个是小于value的区域，一个是大于value的区域，在对这两个区域里的进行分解，直到只有一个元素才停止，先用sort算法分成两个区域，并把value的下标取出，然后再分成左区域和右区域，再这里面进行找下标再区分，直到l&gt;&#x3D;r</p>\n<h2 id=\"3-图片讲解\"><a href=\"#3-图片讲解\" class=\"headerlink\" title=\"3.图片讲解\"></a>3.图片讲解</h2><p><a href=\"https://imgchr.com/i/eEcqte\"><img src=\"https://s2.ax1x.com/2019/07/24/eEcqte.md.png\" alt=\"eEcqte.md.png\"></a></p>\n<h2 id=\"4-0代码讲解\"><a href=\"#4-0代码讲解\" class=\"headerlink\" title=\"4.0代码讲解\"></a>4.0代码讲解</h2><p>首先要两个代码，一个是不断进行分左区域和区域，另一个就是分大于value和小于value，最后的出下标返回来进行左右划分</p>\n<h3 id=\"4-1不断划分左右区域\"><a href=\"#4-1不断划分左右区域\" class=\"headerlink\" title=\"4.1不断划分左右区域\"></a>4.1不断划分左右区域</h3><p>条件终止是l》&#x3D;r</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort2</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left&gt;=right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> v=qucik(arr,left,right);</span><br><span class=\"line\">        quickSort2(arr,left,v-<span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSort2(arr,v+<span class=\"number\">1</span>,right);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2获取下标，并同时对数组进行分区域\"><a href=\"#4-2获取下标，并同时对数组进行分区域\" class=\"headerlink\" title=\"4.2获取下标，并同时对数组进行分区域\"></a>4.2获取下标，并同时对数组进行分区域</h3><p>首先设置l&#x3D;left+1，r&#x3D;right，l往右移动，r往左移动，value先设置为arr【left】，当arr【l】&gt;value时停止否则l++，r就是arr【r】&lt;value时，停止，否则就是r–，当l与r都停止时候就把arr【l】yuarr【r】进行交换，如何l++，r–停止条件也是l&gt;r。跳出循环时，把arr【r】与arr【left】进行交换，最后把r返回就行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">qucik</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l=left+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> r=right;</span><br><span class=\"line\">        <span class=\"type\">int</span> val=arr[left];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l&lt;=r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l&lt;=right&amp;&amp;arr[l]&lt;val)&#123;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (r&gt;=left+<span class=\"number\">1</span>&amp;&amp;arr[r]&gt;val)&#123;</span><br><span class=\"line\">                r--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l&gt;r)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明已经排好了</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> tem=arr[l];</span><br><span class=\"line\">            arr[l]=arr[r];</span><br><span class=\"line\">            arr[r]=tem;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//跳出循环把，r与left交换，因为是以left威大小来分的</span></span><br><span class=\"line\">        <span class=\"type\">int</span> tem=arr[left];</span><br><span class=\"line\">        arr[left]=arr[r];</span><br><span class=\"line\">        arr[r]=tem;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"希尔排序","date":"2019-07-16T13:28:24.000Z","path":"2019/07/16/希尔排序/","content":"<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><h2 id=\"1-思路\"><a href=\"#1-思路\" class=\"headerlink\" title=\"1.思路\"></a>1.思路</h2><p>把整个数组先找出中间数mid&#x3D;（length&#x2F;2),用mid的个数分成5组，用插入排序，排每一组，再把mid&#x3D;mid&#x2F;2,再分成mid组，知道mid&#x3D;&#x3D;0才停止。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> arr.length/<span class=\"number\">2</span>; i &gt;<span class=\"number\">0</span>; i/=<span class=\"number\">2</span>) &#123;<span class=\"comment\">//分组</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/eE6XLV\"><img src=\"https://s2.ax1x.com/2019/07/24/eE6XLV.md.png\" alt=\"eE6XLV.md.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt;arr.length ; j++) &#123;<span class=\"comment\">//选择排序，从mid开始数，找j-i来比较，</span></span><br><span class=\"line\">                <span class=\"type\">int</span> k=j-i;</span><br><span class=\"line\">                <span class=\"type\">int</span> tem=arr[j];<span class=\"comment\">//要插入的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (k&gt;=<span class=\"number\">0</span>&amp;&amp;tem&lt;arr[k])&#123;</span><br><span class=\"line\">                    arr[k+i]=arr[k];</span><br><span class=\"line\">                    k-=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                arr[k+i]=tem;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2完整代码\"><a href=\"#2完整代码\" class=\"headerlink\" title=\"2完整代码\"></a>2完整代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 希尔排序 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr=&#123;<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//        for (int i = arr.length/2; i &gt;0 ; i/=2) &#123;//要分的组数</span></span><br><span class=\"line\"><span class=\"comment\">//            for (int j = i; j &lt;arr.length ; j++) &#123;//从哪里形成组数</span></span><br><span class=\"line\"><span class=\"comment\">//                for (int k = j-i; k&gt;=0 ; k-=i) &#123;//形成组，夸区域</span></span><br><span class=\"line\"><span class=\"comment\">//                    if (arr[k+i]&lt;arr[k])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                        int tem=arr[k+i];</span></span><br><span class=\"line\"><span class=\"comment\">//                        arr[k+i]=arr[k];</span></span><br><span class=\"line\"><span class=\"comment\">//                        arr[k]=tem;</span></span><br><span class=\"line\"><span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//优化希尔排序，用移位法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> arr.length/<span class=\"number\">2</span>; i &gt;<span class=\"number\">0</span>; i/=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt;arr.length ; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> k=j-i;</span><br><span class=\"line\">                <span class=\"type\">int</span> tem=arr[j];<span class=\"comment\">//要插入的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (k&gt;=<span class=\"number\">0</span>&amp;&amp;tem&lt;arr[k])&#123;</span><br><span class=\"line\">                    arr[k+i]=arr[k];</span><br><span class=\"line\">                    k-=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                arr[k+i]=tem;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr[i]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"八皇后","date":"2019-07-12T15:31:31.000Z","path":"2019/07/12/八皇后/","content":"<h1 id=\"八皇后问题\"><a href=\"#八皇后问题\" class=\"headerlink\" title=\"八皇后问题\"></a>八皇后问题</h1><h2 id=\"1来源\"><a href=\"#1来源\" class=\"headerlink\" title=\"1来源\"></a>1来源</h2><blockquote>\n<p>八皇后问题，是一个古老而著名的问题，是<strong>回溯算法的典型案例</strong>。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：<strong>任****意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法</strong>。</p>\n</blockquote>\n<h2 id=\"2思路\"><a href=\"#2思路\" class=\"headerlink\" title=\"2思路\"></a>2思路</h2><h3 id=\"2-1构建思路\"><a href=\"#2-1构建思路\" class=\"headerlink\" title=\"2.1构建思路\"></a>2.1构建思路</h3><p>构建一个int【8】的数组，i是x，arr【i】是y，这样就形成了坐标</p>\n<h3 id=\"2-2检测冲突\"><a href=\"#2-2检测冲突\" class=\"headerlink\" title=\"2.2检测冲突\"></a>2.2检测冲突</h3><p>直线就是arr【i】与arr【i-1】.。。arr【0】这些值是否相等，斜线就是x的变化值与y的变化值是否相等即i-j&#x3D;&#x3D;arr【i】-arr【j】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">check</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//检测是否冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[n]==arr[i]||Math.abs(n-i)==Math.abs(arr[n]-arr[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3放旗子思路\"><a href=\"#2-3放旗子思路\" class=\"headerlink\" title=\"2.3放旗子思路\"></a>2.3放旗子思路</h3><p>从第0个位置开始放就是arr【i】&#x3D;&#x3D;0开始，用for写到8，如果不冲突就放下一个，也是for从0到8，当i&#x3D;&#x3D;8就是放完了就返回到上一个，看把arr【i】往后移动会不会也成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> max,<span class=\"type\">int</span> n,<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n==max)&#123;</span><br><span class=\"line\">            print(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(count);</span></span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">            arr[n]=i;<span class=\"comment\">//先放在第一位在后裔</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check(arr,n))&#123;</span><br><span class=\"line\">                put(max,n+<span class=\"number\">1</span>,arr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3完整代码\"><a href=\"#3完整代码\" class=\"headerlink\" title=\"3完整代码\"></a>3完整代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 八皇后 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> max=<span class=\"number\">8</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max];</span><br><span class=\"line\">        put(max,<span class=\"number\">0</span>,arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">check</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//检测是否冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[n]==arr[i]||Math.abs(n-i)==Math.abs(arr[n]-arr[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"type\">int</span> max,<span class=\"type\">int</span> n,<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n==max)&#123;</span><br><span class=\"line\">            print(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(count);</span></span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">            arr[n]=i;<span class=\"comment\">//先放在第一位在后裔</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check(arr,n))&#123;</span><br><span class=\"line\">                put(max,n+<span class=\"number\">1</span>,arr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr[i]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"递归","slug":"递归","permalink":"http://yoursite.com/tags/%E9%80%92%E5%BD%92/"}]},{"title":"迷宫回溯","date":"2019-07-12T15:18:17.000Z","path":"2019/07/12/迷宫回溯/","content":"<h1 id=\"迷宫问题\"><a href=\"#迷宫问题\" class=\"headerlink\" title=\"迷宫问题\"></a>迷宫问题</h1><h2 id=\"1定义\"><a href=\"#1定义\" class=\"headerlink\" title=\"1定义\"></a>1定义</h2><p>定义走过通路为2，墙壁为1，未经过的是0，已经走过了的不是通路3，当终点为2时就是成功</p>\n<h2 id=\"2方法\"><a href=\"#2方法\" class=\"headerlink\" title=\"2方法\"></a>2方法</h2><p>当终点是2直接返回成功，当为0时，我们先定义他是2，再走访他周围四个点，当周围有路可走就是通路返回true，如果周围都不是（1,3,2）已近走过了的和是墙，那就返回false</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">setWay</span><span class=\"params\">(<span class=\"type\">int</span>[][] map,<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[<span class=\"number\">6</span>][<span class=\"number\">5</span>]==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(map[i][j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            map[i][j]=<span class=\"number\">2</span>;<span class=\"comment\">//先假设为通路</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (setWay(map,i+<span class=\"number\">1</span>,j))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map,i,j+<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (setWay(map,i-<span class=\"number\">1</span>,j))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map,i,j-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//当四周都是false走不通</span></span><br><span class=\"line\">                map[i][j]=<span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//1,2，3都是false，已近走过货不能用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"递归","slug":"递归","permalink":"http://yoursite.com/tags/%E9%80%92%E5%BD%92/"}]},{"title":"逆波兰","date":"2019-07-12T14:52:17.000Z","path":"2019/07/12/逆波兰/","content":"<h1 id=\"逆波兰算法\"><a href=\"#逆波兰算法\" class=\"headerlink\" title=\"逆波兰算法\"></a>逆波兰算法</h1><h2 id=\"1后缀表达式\"><a href=\"#1后缀表达式\" class=\"headerlink\" title=\"1后缀表达式\"></a>1后缀表达式</h2><blockquote>\n<p>从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素<br>和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p>\n</blockquote>\n<blockquote>\n<p>例如: (3+4)×5-6 对应的后缀表达式就是 <strong>3 4 + 5 × 6 -</strong> <strong>,</strong> <strong>针对<strong><strong>后</strong></strong>缀表达式求值步骤<strong><strong>如</strong></strong>下**</strong>:**</p>\n<p>1)从左至右扫描，将3和4压入堆栈；</p>\n<p>2)遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</p>\n<p>3)将5入栈；</p>\n<p>4)接下来是×运算符，因此弹出5和7，计算出7×5&#x3D;35，将35入栈；</p>\n<p>5)将6入栈；</p>\n<p>6)最后是-运算符，计算出35-6的值，即29，由此得出最终结果  </p>\n</blockquote>\n<p>按照操作顺序来计算（所读取的是数字就加入，是符号就弹出，并进行求和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String string=<span class=\"string\">&quot;30 4 + 5 * 6 -&quot;</span>;</span><br><span class=\"line\">      String[] strings=s2.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      Stack&lt;Integer&gt; stack=<span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> strings[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>))&#123;</span><br><span class=\"line\">              stack.push(Integer.parseInt(s));</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"type\">int</span> num1=stack.pop();</span><br><span class=\"line\">              <span class=\"type\">int</span> num2=stack.pop();</span><br><span class=\"line\">              <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;+&quot;</span>))&#123;</span><br><span class=\"line\">                  res=num1+num2;</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.equals(<span class=\"string\">&quot;-&quot;</span>))&#123;</span><br><span class=\"line\">                  res=num2-num1;</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.equals(<span class=\"string\">&quot;*&quot;</span>))&#123;</span><br><span class=\"line\">                  res=num1*num2;</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  res=num2/num1;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              stack.push(res);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2中缀转后缀的原理\"><a href=\"#2中缀转后缀的原理\" class=\"headerlink\" title=\"2中缀转后缀的原理\"></a>2中缀转后缀的原理</h2><blockquote>\n<p>1)初始化两个栈：运算符栈s1和储存中间结果的栈s2；</p>\n<p>2)从左至右扫描中缀表达式；</p>\n<p>3)遇到操作数时，将其压s2；</p>\n<p>4)遇到运算符时，比较其与s1栈顶运算符的优先级：</p>\n<p>(1)如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</p>\n<p>(2)否则，若优先级比栈顶运算符的高，也将运算符压入s1；</p>\n<p>(3)否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；</p>\n<p>5)遇到括号时：<br> (1) 如果是左括号“(”，则直接压入s1<br> (2) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</p>\n<p>6)重复步骤2至5，直到表达式的最右边</p>\n<p>7)将s1中剩余的运算符依次弹出并压入s2</p>\n<p>8)依次弹出s2中的元素并输出，<strong>结果的逆序即为中缀表达式对应的后缀表达****式</strong>  </p>\n</blockquote>\n<p>一个栈，一个list，栈收集符号，list收集数字最初，档位空或者“（”直接加入栈，优先级高也是直接加入，直到是优先级比较低的，那就直接把栈顶弹出去给加到list里，再用操作符与弹出后的比优先级，如果是“）”，也是弹到list，直到操作符为“（”，弹出这个操作符“（”，然后进行下一趟，操作代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">produce</span><span class=\"params\">(List&lt;String&gt; list)</span>&#123;</span><br><span class=\"line\">        Stack&lt;String&gt; stack1=<span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        List&lt;String&gt; list1=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            String s1=list.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>))&#123;</span><br><span class=\"line\">                list1.add(s1);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stack1.isEmpty())&#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1.equals(<span class=\"string\">&quot;(&quot;</span>))&#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1.equals(<span class=\"string\">&quot;)&quot;</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack1.peek().equals(<span class=\"string\">&quot;(&quot;</span>))&#123;</span><br><span class=\"line\">                        list1.add(stack1.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack1.pop();<span class=\"comment\">//弹出左括号</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (priority(s1)&lt;=priority(stack1.peek()))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack1.isEmpty()&amp;&amp;priority(s1)&lt;=priority(stack1.peek()))&#123;</span><br><span class=\"line\">                        list1.add(stack1.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack1.isEmpty())&#123;</span><br><span class=\"line\">            list1.add(stack1.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3完整的代码\"><a href=\"#3完整的代码\" class=\"headerlink\" title=\"3完整的代码\"></a>3完整的代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> class 逆波兰 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//String string=&quot;4 5 * 8 - 60 + 8 2 / +&quot;;</span></span><br><span class=\"line\">        String s1=<span class=\"string\">&quot;1+((2+3)*4)-5&quot;</span>;</span><br><span class=\"line\">        List&lt;String&gt; list=list(s1);</span><br><span class=\"line\">        List&lt;String&gt; list1=produce(list);</span><br><span class=\"line\">        String s2=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list1.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i!=list1.size()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                s2+=list1.get(i)+<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                s2+=list1.get(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(s2);</span><br><span class=\"line\">        String string=<span class=\"string\">&quot;30 4 + 5 * 6 -&quot;</span>;</span><br><span class=\"line\">        String[] strings=s2.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack=<span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> strings[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>))&#123;</span><br><span class=\"line\">                stack.push(Integer.parseInt(s));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> num1=stack.pop();</span><br><span class=\"line\">                <span class=\"type\">int</span> num2=stack.pop();</span><br><span class=\"line\">                <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;+&quot;</span>))&#123;</span><br><span class=\"line\">                    res=num1+num2;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.equals(<span class=\"string\">&quot;-&quot;</span>))&#123;</span><br><span class=\"line\">                    res=num2-num1;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.equals(<span class=\"string\">&quot;*&quot;</span>))&#123;</span><br><span class=\"line\">                    res=num1*num2;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res=num2/num1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stack.push(res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(stack.peek());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">priority</span><span class=\"params\">(String val)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val.equals(<span class=\"string\">&quot;+&quot;</span>)||val.equals(<span class=\"string\">&quot;-&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val.equals(<span class=\"string\">&quot;*&quot;</span>)||val.equals(<span class=\"string\">&quot;/&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">list</span><span class=\"params\">(String string)</span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; string.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> ch=string.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;</span><br><span class=\"line\">                String addn=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                addn+=ch;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i+<span class=\"number\">1</span>; j &lt; string.length(); j++) &#123;</span><br><span class=\"line\">                    <span class=\"type\">char</span> ch2=string.charAt(j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch2&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch2&lt;=<span class=\"string\">&#x27;9&#x27;</span>)&#123;</span><br><span class=\"line\">                        addn+=ch2;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        i=j-<span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                list.add(addn);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                list.add(<span class=\"string\">&quot;&quot;</span>+ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//生产逆波兰</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">produce</span><span class=\"params\">(List&lt;String&gt; list)</span>&#123;</span><br><span class=\"line\">        Stack&lt;String&gt; stack1=<span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        List&lt;String&gt; list1=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            String s1=list.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>))&#123;</span><br><span class=\"line\">                list1.add(s1);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stack1.isEmpty())&#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1.equals(<span class=\"string\">&quot;(&quot;</span>))&#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1.equals(<span class=\"string\">&quot;)&quot;</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack1.peek().equals(<span class=\"string\">&quot;(&quot;</span>))&#123;</span><br><span class=\"line\">                        list1.add(stack1.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack1.pop();<span class=\"comment\">//弹出左括号</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (priority(s1)&lt;=priority(stack1.peek()))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack1.isEmpty()&amp;&amp;priority(s1)&lt;=priority(stack1.peek()))&#123;</span><br><span class=\"line\">                        list1.add(stack1.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack1.isEmpty())&#123;</span><br><span class=\"line\">            list1.add(stack1.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"栈","slug":"栈","permalink":"http://yoursite.com/tags/%E6%A0%88/"}]},{"title":"栈计算器","date":"2019-07-11T15:23:41.000Z","path":"2019/07/11/栈计算器/","content":"<h1 id=\"构建栈计算器\"><a href=\"#构建栈计算器\" class=\"headerlink\" title=\"构建栈计算器\"></a>构建栈计算器</h1><h2 id=\"1-思路\"><a href=\"#1-思路\" class=\"headerlink\" title=\"1.思路\"></a>1.思路</h2><p>一个个扫描每个字节看尸数字还是符号，分别加入不同的栈构建两个栈，一个数字栈，一个符号栈，符号栈威空直接压入或者要压的元素比栈顶的元素优先级高，就压入，否则就弹出两个数字和一个符号，计算结果，然后压入数字栈，再用那个符号与栈顶的符号比较，直到结束。</p>\n<h2 id=\"2-bug如果是多位数，会变成多个个位数不是百位数等\"><a href=\"#2-bug如果是多位数，会变成多个个位数不是百位数等\" class=\"headerlink\" title=\"2.bug如果是多位数，会变成多个个位数不是百位数等\"></a>2.bug如果是多位数，会变成多个个位数不是百位数等</h2><p>解决方法，扫描是数字接着扫直到不是数字才停止</p>\n<h2 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3.代码\"></a>3.代码</h2><h3 id=\"3-1分辨是符号还是数字\"><a href=\"#3-1分辨是符号还是数字\" class=\"headerlink\" title=\"3.1分辨是符号还是数字\"></a>3.1分辨是符号还是数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isoper</span><span class=\"params\">(<span class=\"type\">char</span> ch)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ch==<span class=\"string\">&#x27;-&#x27;</span>||ch==<span class=\"string\">&#x27;+&#x27;</span>||ch==<span class=\"string\">&#x27;/&#x27;</span>||ch==<span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2符号优先级\"><a href=\"#3-2符号优先级\" class=\"headerlink\" title=\"3.2符号优先级\"></a>3.2符号优先级</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">priority</span><span class=\"params\">(<span class=\"type\">int</span> val)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val==<span class=\"string\">&#x27;+&#x27;</span>||val==<span class=\"string\">&#x27;-&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val==<span class=\"string\">&#x27;/&#x27;</span>||val==<span class=\"string\">&#x27;*&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3计算两个弹出的结果\"><a href=\"#3-3计算两个弹出的结果\" class=\"headerlink\" title=\"3.3计算两个弹出的结果\"></a>3.3计算两个弹出的结果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">result</span><span class=\"params\">(<span class=\"type\">int</span> num1,<span class=\"type\">int</span> num2,<span class=\"type\">int</span> oper)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (oper)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">                res= num1+num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                res= num2-num1;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">                res=num1*num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                res=num2/num1;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4主要代码\"><a href=\"#3-4主要代码\" class=\"headerlink\" title=\"3.4主要代码\"></a>3.4主要代码</h3><blockquote>\n<h2 id=\"1-思路-1\"><a href=\"#1-思路-1\" class=\"headerlink\" title=\"1.思路\"></a>1.思路</h2><p>一个个扫描每个字节看尸数字还是符号，分别加入不同的栈构建两个栈，一个数字栈，一个符号栈，符号栈威空直接压入或者要压的元素比栈顶的元素优先级高，就压入，否则就弹出两个数字和一个符号，计算结果，然后压入数字栈，再用那个符号与栈顶的符号比较，直到结束。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      Stack&lt;Integer&gt; num=<span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">      Stack&lt;Character&gt; oper=<span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        String express=<span class=\"string\">&quot;322+3*6-2&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; express.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> ch=express.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isoper(ch))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!oper.isEmpty())&#123;</span><br><span class=\"line\">                    <span class=\"type\">char</span> ch1=oper.peek();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (priority(ch)&lt;=priority(ch1))&#123;</span><br><span class=\"line\">                        <span class=\"type\">int</span> num1=num.pop();</span><br><span class=\"line\">                        <span class=\"type\">int</span> num2=num.pop();</span><br><span class=\"line\">                        <span class=\"type\">char</span> ch3=oper.pop();</span><br><span class=\"line\">                        <span class=\"type\">int</span> result=result(num1,num2,ch3);</span><br><span class=\"line\">                        num.push(result);</span><br><span class=\"line\">                        oper.push(ch);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        oper.push(ch);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    oper.push(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//num.push(ch-48);</span></span><br><span class=\"line\">                <span class=\"comment\">//如果出现多位数，不是分开加入</span></span><br><span class=\"line\">                String addn=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                addn+=ch;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i+<span class=\"number\">1</span>; j &lt;express.length() ; j++) &#123;</span><br><span class=\"line\">                    <span class=\"type\">char</span> ch2=express.charAt(j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isoper(ch2))&#123;</span><br><span class=\"line\">                        i=j-<span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//跳出去就是i+1，这个j会被跳过</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        addn+=ch2;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                num.push(Integer.parseInt(addn));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!oper.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> num1=num.pop();</span><br><span class=\"line\">            <span class=\"type\">int</span> num2=num.pop();</span><br><span class=\"line\">            <span class=\"type\">char</span> ch=oper.pop();</span><br><span class=\"line\">            <span class=\"type\">int</span> result=result(num1,num2,ch);</span><br><span class=\"line\">            num.push(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(num.peek());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"栈的应用","slug":"栈的应用","permalink":"http://yoursite.com/tags/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/"}]},{"title":"反转链表","date":"2019-07-11T14:10:25.000Z","path":"2019/07/11/反转链表/","content":"<h1 id=\"反转链表解决\"><a href=\"#反转链表解决\" class=\"headerlink\" title=\"反转链表解决\"></a>反转链表解决</h1><blockquote>\n<p>反转一个单链表。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL</span><br><span class=\"line\">输出: <span class=\"number\">5</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>解决思路：先构建一个虚拟头节点dummyhead，通过遍历获取每一个节点cur，插入在虚拟头节点那个树上了，具体是cur.next&#x3D;dummyhead.next,dummyhead.next&#x3D;cur，这句话是把cur指向dummyhead的下一个节点（前一个节点），然后dummyhead再指向cur，cur再遍历最后返回dummyhead。next就行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">re</span><span class=\"params\">(ListNode head)</span>&#123;</span><br><span class=\"line\">        ListNode reverse=<span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        ListNode cur=head.next;</span><br><span class=\"line\">        ListNode next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            next=cur.next;</span><br><span class=\"line\">            cur.next=reverse.next;<span class=\"comment\">//把获取的这个节点指向rever节点的下一个</span></span><br><span class=\"line\">            <span class=\"comment\">//1  2  3原来的</span></span><br><span class=\"line\">            <span class=\"comment\">//0reverse</span></span><br><span class=\"line\">            <span class=\"comment\">//先是1.next=null，再0指向1   0  1  null</span></span><br><span class=\"line\">            reverse.next=cur;<span class=\"comment\">//重新链接，使revers节点下一个变成获取的</span></span><br><span class=\"line\">            cur=next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head.next=reverse.next;<span class=\"comment\">//reverse已经被取代了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"循环链表","date":"2019-07-11T13:50:31.000Z","path":"2019/07/11/循环链表/","content":"<h1 id=\"解决约瑟夫环\"><a href=\"#解决约瑟夫环\" class=\"headerlink\" title=\"解决约瑟夫环\"></a>解决约瑟夫环</h1><blockquote>\n<p>约瑟夫环（<a href=\"https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/3857719\">约瑟夫问题</a>）是一个数学的应用问题：已知n个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依<a href=\"https://baike.baidu.com/item/%E6%AD%A4\">此</a>规律重复下去，直到圆桌周围的人全部出列。通常解决这类问题时我们把编号从0~n-1，最后 [1]  结果+1即为原问题的解。</p>\n</blockquote>\n<p>首先定义一个环形链表，先初始化n个人，用for语句，形成环形链表，定义一个head，cur，boy（待插入的），从1开始，游戏就是1开始。如果j&#x3D;1，就新建boy把boy当head，然后cur.next&#x3D;cur自身形成环形。不是，就把cur.next&#x3D;boy,boy.next&#x3D;head,cur&#x3D;boy,形成环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode first=<span class=\"literal\">null</span>;</span><br><span class=\"line\">     ListNode help=<span class=\"literal\">null</span>;<span class=\"comment\">//解决约瑟夫问题的节点</span></span><br><span class=\"line\">     ListNode cur=<span class=\"literal\">null</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;=n; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (i==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">             ListNode boy=<span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(i);</span><br><span class=\"line\">             first=boy;</span><br><span class=\"line\">             cur=boy;</span><br><span class=\"line\">             cur.next=first;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             ListNode boy=<span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(i);</span><br><span class=\"line\">             cur.next=boy;</span><br><span class=\"line\">             boy.next=first;</span><br><span class=\"line\">             cur=boy;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决思路，通过便利，使help在head的前一个，就是help.next&#x3D;head,如果要改变开始顺序，就把head，help移动k-1次，从k开始</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">help=first;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (help.next!=first)&#123;</span><br><span class=\"line\">          help=help.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//初始化，在最初规定的位置</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; start- <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">          first=first.next;</span><br><span class=\"line\">          help=help.next;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决方法，当head！&#x3D;help（不都为空)才成立，和初始化差不多，移动m-1，head&#x3D;head.next，help。next&#x3D;head，最终跳出循环，方法结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (first!=help) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                first=first.next;</span><br><span class=\"line\">                help=help.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(first.val);</span><br><span class=\"line\">            first=first.next;</span><br><span class=\"line\">            help.next=first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(first.val+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">josephu</span><span class=\"params\">(<span class=\"type\">int</span> start,<span class=\"type\">int</span> m,<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        ListNode first=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        ListNode help=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        ListNode cur=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;=n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                ListNode boy=<span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(i);</span><br><span class=\"line\">                first=boy;</span><br><span class=\"line\">                cur=boy;</span><br><span class=\"line\">                cur.next=first;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                ListNode boy=<span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(i);</span><br><span class=\"line\">                cur.next=boy;</span><br><span class=\"line\">                boy.next=first;</span><br><span class=\"line\">                cur=boy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        help=first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (help.next!=first)&#123;</span><br><span class=\"line\">            help=help.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//初始化，在最初规定的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; start- <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            first=first.next;</span><br><span class=\"line\">            help=help.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (first!=help) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                first=first.next;</span><br><span class=\"line\">                help=help.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(first.val);</span><br><span class=\"line\">            first=first.next;</span><br><span class=\"line\">            help.next=first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(first.val+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"First Blog","date":"2019-05-29T15:04:14.000Z","path":"2019/05/29/First-Blog/","content":"<h1 id=\"First-Blog\"><a href=\"#First-Blog\" class=\"headerlink\" title=\"First Blog\"></a>First Blog</h1><p><u><em>第一篇blog，大家好</em></u></p>\n","tags":[{"name":"日常","slug":"日常","permalink":"http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"},{"name":"闲谈","slug":"闲谈","permalink":"http://yoursite.com/tags/%E9%97%B2%E8%B0%88/"}]}]