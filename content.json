[{"title":"kmp数组求法","date":"2020-07-05T08:15:01.000Z","path":"2020/07/05/kmp数组求法/","content":"<h2 id=\"1-next求法\"><a href=\"#1-next求法\" class=\"headerlink\" title=\"1.next求法\"></a>1.next求法</h2><p>例如s=‘abcac’，首先从第一位a开始，设置a为0（如果是-1，后面的都不需要+1），第二个是b，b的前面子串是a，没有匹配的设置成0+1，接下来是c，前面子串是ab，同理设置为0+1，下一个a也是0+1，最后是c，前面子串是abca，他的前缀子串a和后缀a相等，设置成1+1，所以next={0,1,1,1,2}</p>\n<h2 id=\"2-nextval求法\"><a href=\"#2-nextval求法\" class=\"headerlink\" title=\"2.nextval求法\"></a>2.nextval求法</h2><p>例如，s=‘aaaab’，next={0，1,2,3,4,}，第一个是a，i=0，设置naxtval=0，i++.第二个是a与第一位相同，设置nextval【2】=nextval【1】=0，i++，第三个是a与第i个相同就是nextval【3】=nextval【2】，第四个与第3个也相同，也是nv【4】=nv【3】，第5位是b与第4位是a不同，i不加，nextval【5】=next【5】=4，所以nextval={0,0,0,0,4}</p>\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"}]},{"title":"王道2_2_24","date":"2020-07-01T13:44:57.000Z","path":"2020/07/01/王道2-2-24/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\" target=\"_blank\" rel=\"noopener\">题目大意</a></h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>\n<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>\n<p>说明：不允许修改给定的链表。</p>\n<p>。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>快慢两个指针，fast走两步，slow走一步，如果相遇就是有环</li>\n<li>假设head与入幻点相差a，入环与slow差b，fast比slow多走a+b（2倍关系），若slow再走a会到入幻点（因为入幻与slow差b），而且head走a也是入幻点，所以如果a=slow，那么就是入幻点</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//快慢指针，若相遇择优换</span></span><br><span class=\"line\">        ListNode *fast=head,*slow=head;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(slow&amp;&amp;fast-&gt;next)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//fast走两次，所以需要检查fast的下一个</span></span><br><span class=\"line\">            slow=slow-&gt;next;</span><br><span class=\"line\">            fast=fast-&gt;next-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fast==slow)&#123;</span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            ListNode *p=head;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p!=slow)&#123;</span><br><span class=\"line\">                p=p-&gt;next;</span><br><span class=\"line\">                slow=slow-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/链表/"},{"name":"王道数据结构","slug":"王道数据结构","permalink":"http://yoursite.com/tags/王道数据结构/"}]},{"title":"王道2_2_25","date":"2020-07-01T08:23:13.000Z","path":"2020/07/01/王道2-2-25/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><blockquote>\n<p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ， 将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p>\n</blockquote>\n<blockquote>\n<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>\n</blockquote>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>先找到中间节点，q用两次next，p用一次next，等q为空，那么p就是中间节点</li>\n<li>对p后面的节点进行头插法，形成逆序，如123456，变成123465，<strong><em>注意是465\\</em></strong></li>\n<li>然后进行断链，形成1234和65两条链</li>\n<li>最后进行和链162534</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reorderList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* p=head,*q=head,*r,*s=head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!head)            <span class=\"comment\">//head为空，则直接退出</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;         </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q-&gt;next)&#123;      <span class=\"comment\">//寻找中间结点</span></span><br><span class=\"line\">            q=q-&gt;next;       <span class=\"comment\">//p走一步</span></span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q-&gt;next)</span><br><span class=\"line\">              q=q-&gt;next;     <span class=\"comment\">//q走两步</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q=p-&gt;next;           <span class=\"comment\">//p所指结点为中间结点，q为后半段链表的首结点</span></span><br><span class=\"line\">        p-&gt;next=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q)&#123;            <span class=\"comment\">//将链表后半段逆置</span></span><br><span class=\"line\">            r=q-&gt;next;</span><br><span class=\"line\">            q-&gt;next=p-&gt;next;</span><br><span class=\"line\">            p-&gt;next=q;</span><br><span class=\"line\">            q=r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q=p-&gt;next;            <span class=\"comment\">//q指向后半段的第一个数据结点</span></span><br><span class=\"line\">        p-&gt;next=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q)&#123;             <span class=\"comment\">//将链表后半段的结点插入到指定位置</span></span><br><span class=\"line\">            r=q-&gt;next;        <span class=\"comment\">//r指向后半段的下一个结点</span></span><br><span class=\"line\">            q-&gt;next=s-&gt;next;  <span class=\"comment\">//将q所指结点插入到s所指结点（head结点）之后</span></span><br><span class=\"line\">            s-&gt;next=q;        </span><br><span class=\"line\">            s=q-&gt;next;        <span class=\"comment\">//s指向前半段的下一个插入点</span></span><br><span class=\"line\">            q=r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/链表/"},{"name":"王道数据结构","slug":"王道数据结构","permalink":"http://yoursite.com/tags/王道数据结构/"}]},{"title":"王道2_2_21","date":"2020-07-01T08:23:08.000Z","path":"2020/07/01/王道2-2-21/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>双指针，第一个p先走k部，然后q从head开始，pq同时走，直到p为空，q就是索要的节点</p>\n<p>设p与结尾查x次，总长k+x次，p走了x次，也就是倒数k</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kthToLast</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    ListNode* c=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(k)&#123;</span><br><span class=\"line\">            head=head.next;</span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">            c=c.next;</span><br><span class=\"line\">            head=head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/链表/"},{"name":"王道数据结构","slug":"王道数据结构","permalink":"http://yoursite.com/tags/王道数据结构/"}]},{"title":"王道2_2_6","date":"2020-07-01T08:22:49.000Z","path":"2020/07/01/王道2-2-6/","content":"<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给定一个头结点链表，按照从小到大排序</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据插入排序的思路和逆置链表的思路，首先先把头结点和他的next摘出p，让p为读取元链表的节点，pre为摘出来新链表的头结点，然后pre遍历，小于p.val的就继续，不然就是正常的插入。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> &#123;</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">      ListNode *next;</span><br><span class=\"line\">      ListNode(<span class=\"keyword\">int</span> x) : val(x), next(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//本题思路插入排序，头插法类似，吧l取出，做个新链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode* node)</span> </span>&#123;</span><br><span class=\"line\">       ListNode *p=node.next,*q=p.next;</span><br><span class=\"line\">       <span class=\"comment\">//pre是断链后端头插法节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">       ListNode *pre;</span><br><span class=\"line\">       <span class=\"comment\">//进行断链</span></span><br><span class=\"line\">       p.next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">       <span class=\"comment\">//进行替换</span></span><br><span class=\"line\">       p=r;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        r=p.next;</span><br><span class=\"line\">        pre=node;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(pre.next!=null&amp;&amp;pre.next.val&lt;p.val)&#123;</span><br><span class=\"line\">            pre=pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next=pre.next;</span><br><span class=\"line\">        pre.next=p;</span><br><span class=\"line\">        p=r;</span><br><span class=\"line\">        <span class=\"comment\">//进行下一轮</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/链表/"},{"name":"王道数据结构","slug":"王道数据结构","permalink":"http://yoursite.com/tags/王道数据结构/"}]},{"title":"a1010","date":"2020-06-25T13:18:56.000Z","path":"2020/06/25/a1010/","content":"","tags":[]},{"title":"a1009","date":"2020-06-25T13:18:51.000Z","path":"2020/06/25/a1009/","content":"<h1 id=\"a1009\"><a href=\"#a1009\" class=\"headerlink\" title=\"a1009\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805509540921344\" target=\"_blank\" rel=\"noopener\">a1009</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>多项式乘法。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>与前面的多项式加法基本类似。不过要构建两个双精度数组。第一个保存第一列的数字系数和指数。然后再还有一个哈希表。这个是保存第一列由哪几个数字是要进行指数相加的。第二列就首先是遍历这个哈希表。然后进行赋值。如果bi不是零，那么次数就加一。经过加法后，如果bi的值为0，那么次数就减一。，然后再次利用sort函数进行倒序输出就可以了。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>  a[maxn],b[maxn];</span><br><span class=\"line\">    fill(a,a+maxn,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    fill(b,b+maxn,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//    统计一共有多少个</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a_index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> total=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n,zhishu;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> xishu;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;zhishu&gt;&gt;xishu;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                a[zhishu]=xishu;</span><br><span class=\"line\">                temp[a_index++]=zhishu;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; a_index; ++k) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> weizhi=zhishu+temp[k];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (b[weizhi]==<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\">                        hash[count]=weizhi;</span><br><span class=\"line\">                        count++;</span><br><span class=\"line\"><span class=\"comment\">//                        系数增加</span></span><br><span class=\"line\">                        total++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    b[weizhi]+=xishu*a[temp[k]];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (b[weizhi]==<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\">                        total--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;total;</span><br><span class=\"line\">    sort(hash,hash+count);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = count<span class=\"number\">-1</span>; l &gt;=<span class=\"number\">0</span> ; --l) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[hash[l]]!=<span class=\"number\">0.0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %0.1lf\"</span>,hash[l],b[hash[l]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/水题/"}]},{"title":"a1008","date":"2020-06-25T13:18:47.000Z","path":"2020/06/25/a1008/","content":"<h1 id=\"a1008\"><a href=\"#a1008\" class=\"headerlink\" title=\"a1008\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805511923286016\" target=\"_blank\" rel=\"noopener\">a1008</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>求错电梯所需要花费的所有时间。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;cost[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> total=cost[<span class=\"number\">0</span>]*<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cost[j]&lt;cost[j<span class=\"number\">-1</span>])&#123;</span><br><span class=\"line\">            total+=(cost[j<span class=\"number\">-1</span>]-cost[j])*<span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            total+=(cost[j]-cost[j<span class=\"number\">-1</span>])*<span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    total+=n*<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;total;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/水题/"}]},{"title":"a1007","date":"2020-06-25T13:18:43.000Z","path":"2020/06/25/a1007/","content":"<h1 id=\"a1007\"><a href=\"#a1007\" class=\"headerlink\" title=\"a1007\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168\" target=\"_blank\" rel=\"noopener\">a1007</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给出序列片段最大的和。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>使用动态规划,</p>\n<h3 id=\"第一步构建d-p-初始值\"><a href=\"#第一步构建d-p-初始值\" class=\"headerlink\" title=\"第一步构建d[p]初始值\"></a>第一步构建d[p]初始值</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d[<span class=\"number\">0</span>]=cost[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二步检查是不是所有的都是负数\"><a href=\"#第二步检查是不是所有的都是负数\" class=\"headerlink\" title=\"第二步检查是不是所有的都是负数\"></a>第二步检查是不是所有的都是负数</h3><p>如果是,那么直接返回0</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cost[j]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"0 %d %d\"</span>,cost[<span class=\"number\">0</span>],cost[n<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写出转移态方程\"><a href=\"#写出转移态方程\" class=\"headerlink\" title=\"写出转移态方程\"></a>写出转移态方程</h3><p>如果d[j-1]+a[j]&gt;a[j],d[j]=d[j-1]+a[j],否则d[j]=a[j]</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt; n; ++k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d[k<span class=\"number\">-1</span>]+cost[k]&gt;cost[k])&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">            d[k]=d[k<span class=\"number\">-1</span>]+cost[k];</span><br><span class=\"line\">            s[k]=s[k<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            d[k]=cost[k];</span><br><span class=\"line\"><span class=\"comment\">//            更新起点</span></span><br><span class=\"line\">            s[k]=k;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总体代码\"><a href=\"#总体代码\" class=\"headerlink\" title=\"总体代码\"></a>总体代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;cost[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    首先检查睡吧睡吧全是负数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cost[j]&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"0 %d %d\"</span>,cost[<span class=\"number\">0</span>],cost[n<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构建转移方程</span></span><br><span class=\"line\"><span class=\"comment\">//    首先是初始化d【0】=a【0】</span></span><br><span class=\"line\"><span class=\"comment\">//    然后是d【i】=a【i】或者是d【i】=d【i-1】+a【i】</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[n];</span><br><span class=\"line\">    d[<span class=\"number\">0</span>]=cost[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s[n];</span><br><span class=\"line\"><span class=\"comment\">//    这是起点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt; n; ++k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d[k<span class=\"number\">-1</span>]+cost[k]&gt;cost[k])&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">            d[k]=d[k<span class=\"number\">-1</span>]+cost[k];</span><br><span class=\"line\">            s[k]=s[k<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            d[k]=cost[k];</span><br><span class=\"line\"><span class=\"comment\">//            更新起点</span></span><br><span class=\"line\">            s[k]=k;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt;n ; ++l) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d[l]&gt;d[p])&#123;</span><br><span class=\"line\">            p=l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;d[p]&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;cost[s[p]]&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;cost[p];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/动态规划/"}]},{"title":"a1006","date":"2020-06-25T13:18:40.000Z","path":"2020/06/25/a1006/","content":"<h1 id=\"a1006\"><a href=\"#a1006\" class=\"headerlink\" title=\"a1006\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805516654460928\" target=\"_blank\" rel=\"noopener\">a1006</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给出最早走了和最迟走的人。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>通过把时间转化为秒，然后再利用sought函数进行排序。就可以给出答案。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span>  name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">&#125;stu[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp11</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.start&lt;b.start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp12</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.end&gt;b.end;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h1,h2,m1,m2,s1,s2;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;name;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d:%d:%d %d:%d:%d\"</span>,&amp;h1,&amp;m1,&amp;s1,&amp;h2,&amp;m2,&amp;s2);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start=h1*<span class=\"number\">3600</span>+m1*<span class=\"number\">60</span>+s1;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> end=h2*<span class=\"number\">3600</span>+m2*<span class=\"number\">60</span>+s2;</span><br><span class=\"line\">        stu[i].name=name;</span><br><span class=\"line\">        stu[i].start=start;</span><br><span class=\"line\">        stu[i].end=end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(stu,stu+n,cmp11);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;stu[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">    sort(stu,stu+n,cmp12);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;stu[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"}]},{"title":"a1005","date":"2020-06-25T13:18:36.000Z","path":"2020/06/25/a1005/","content":"<h1 id=\"a1005\"><a href=\"#a1005\" class=\"headerlink\" title=\"a1005\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805519074574336\" target=\"_blank\" rel=\"noopener\">a1005</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>给出一个数，把它的和加起来。然后再用英语来表达出他的和。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>通过字符串来进行加减，然后再利用哈希表来进行查值输出。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> string1;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;string1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; string1.length(); ++i) &#123;</span><br><span class=\"line\">        ans+=string1[i]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> string2=to_string(ans);</span><br><span class=\"line\">    <span class=\"built_in\">string</span> out[<span class=\"number\">10</span>]=&#123;<span class=\"string\">\"zero\"</span>,<span class=\"string\">\"one\"</span>,<span class=\"string\">\"two\"</span>,<span class=\"string\">\"three\"</span>,<span class=\"string\">\"four\"</span>,<span class=\"string\">\"five\"</span>,<span class=\"string\">\"six\"</span>,<span class=\"string\">\"seven\"</span>,<span class=\"string\">\"eight\"</span>,<span class=\"string\">\"nine\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; string2.length(); ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;out[string2[j]-<span class=\"string\">'0'</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;out[string2[j]-<span class=\"string\">'0'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/水题/"}]},{"title":"a1004","date":"2020-06-25T13:18:31.000Z","path":"2020/06/25/a1004/","content":"","tags":[]},{"title":"a1003","date":"2020-06-25T13:18:27.000Z","path":"2020/06/25/a1003/","content":"<h1 id=\"a1003\"><a href=\"#a1003\" class=\"headerlink\" title=\"a1003\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376\" target=\"_blank\" rel=\"noopener\">a1003</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>根据距离人数构成最短路径，如果距离相等，选择人数多的，最后输出有几条最短路径和最多几个人</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>最短路径的代码正常写法</p>\n<h3 id=\"0-首先初始化\"><a href=\"#0-首先初始化\" class=\"headerlink\" title=\"0.首先初始化\"></a>0.首先初始化</h3><p>G的所有值设置为maxn，距离d也设置maxn，visited设置false</p>\n<h3 id=\"1-首先是选出距离的点\"><a href=\"#1-首先是选出距离的点\" class=\"headerlink\" title=\"1.首先是选出距离的点\"></a>1.首先是选出距离的点</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> less=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min=maxn;</span><br><span class=\"line\"><span class=\"comment\">//        首先找到最小编</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[i]&lt;min&amp;&amp;!visited[i])&#123;</span><br><span class=\"line\">                less=i;</span><br><span class=\"line\">                min=d[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-异常检查\"><a href=\"#2-异常检查\" class=\"headerlink\" title=\"2.异常检查\"></a>2.异常检查</h2><p>就是如果没找到最短的边那就结束</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (less==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-设置为访问过，并且通过这个点的周围所有点更新d\"><a href=\"#3-设置为访问过，并且通过这个点的周围所有点更新d\" class=\"headerlink\" title=\"3.设置为访问过，并且通过这个点的周围所有点更新d\"></a>3.设置为访问过，并且通过这个点的周围所有点更新d</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">visited[less]= <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//        通过这个最短点找与他相连的其他点，通过这个桥梁更新距离</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[j]&amp;&amp;G[less][j]!=maxn)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d[less]+G[less][j]&lt;d[j])&#123;</span><br><span class=\"line\">                    d[j]=d[less]+G[less][j];</span><br><span class=\"line\">                    ren[j]=cost[j]+ren[less];</span><br><span class=\"line\">                    times[j]=times[less];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (d[less]+G[less][j]==d[j])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cost[j]+ren[less]&gt;ren[j])&#123;</span><br><span class=\"line\">                        ren[j]=cost[j]+ren[less];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    times[j]+=times[less];</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-完整的代码\"><a href=\"#4-完整的代码\" class=\"headerlink\" title=\"4.完整的代码\"></a>4.完整的代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,c1,c2;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost[n];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[n];</span><br><span class=\"line\">    fill(d,d+n,maxn);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> visited[n];</span><br><span class=\"line\">    fill(visited,visited+n, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> G[n][n];</span><br><span class=\"line\">    fill(G[<span class=\"number\">0</span>],G[<span class=\"number\">0</span>]+n*n,maxn);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ren[n];</span><br><span class=\"line\">    fill(ren,ren+n,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;cost[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p,q,t;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;p&gt;&gt;q&gt;&gt;t;</span><br><span class=\"line\">        G[p][q]=G[q][p]=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[c1]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> times[n];</span><br><span class=\"line\">    fill(times,times+n,<span class=\"number\">0</span>);</span><br><span class=\"line\">    times[c1]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    ren[c1]=cost[c1];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k) &#123;</span><br><span class=\"line\"><span class=\"comment\">//        寻找最短的点</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> less=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min=maxn;</span><br><span class=\"line\"><span class=\"comment\">//        首先找到最小编</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[i]&lt;min&amp;&amp;!visited[i])&#123;</span><br><span class=\"line\">                less=i;</span><br><span class=\"line\">                min=d[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        没找到直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (less==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        visited[less]= <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//        通过这个最短点找与他相连的其他点，通过这个桥梁更新距离</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[j]&amp;&amp;G[less][j]!=maxn)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (d[less]+G[less][j]&lt;d[j])&#123;</span><br><span class=\"line\">                    d[j]=d[less]+G[less][j];</span><br><span class=\"line\">                    ren[j]=cost[j]+ren[less];</span><br><span class=\"line\">                    times[j]=times[less];</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (d[less]+G[less][j]==d[j])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cost[j]+ren[less]&gt;ren[j])&#123;</span><br><span class=\"line\">                        ren[j]=cost[j]+ren[less];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    times[j]+=times[less];</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;times[c2]&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;ren[c2];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"图","slug":"图","permalink":"http://yoursite.com/tags/图/"},{"name":"最短路径","slug":"最短路径","permalink":"http://yoursite.com/tags/最短路径/"}]},{"title":"a1002","date":"2020-06-25T13:18:07.000Z","path":"2020/06/25/a1002/","content":"<h1 id=\"a1002\"><a href=\"#a1002\" class=\"headerlink\" title=\"a1002\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000\" target=\"_blank\" rel=\"noopener\">a1002</a></h1><h2 id=\"题目大意。\"><a href=\"#题目大意。\" class=\"headerlink\" title=\"题目大意。\"></a>题目大意。</h2><p>两个多项式相加。</p>\n<h2 id=\"解决方法。\"><a href=\"#解决方法。\" class=\"headerlink\" title=\"解决方法。\"></a>解决方法。</h2><p>构建一个双精度的数组。同时在构建一个索引表。这个索引表来看一共有哪几个是要加入的指数，如果系数为零，那么就把它给加入到索引表里面。然后进行加法运算，如果最后的系数还是为零，那么就减少一个要输出的数值。最后再使用short来进行排序，按倒叙的方法来输入所有的值。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,zhishu;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> xishu;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    fill(ans,ans+<span class=\"number\">1000</span>,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> time=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;  n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;zhishu&gt;&gt;xishu;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans[zhishu]==<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\">                temp[time]=zhishu;</span><br><span class=\"line\">                time++;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ans[zhishu]+=xishu;</span><br><span class=\"line\"><span class=\"comment\">//            如多相加为0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ans[zhishu]==<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                count--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;count;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sort(temp,temp+time);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = time<span class=\"number\">-1</span>; k &gt;=<span class=\"number\">0</span> ; --k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans[temp[k]]!=<span class=\"number\">0.0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt;temp[k]&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.1lf\"</span>,ans[temp[k]]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/水题/"}]},{"title":"a1001","date":"2020-06-25T13:16:15.000Z","path":"2020/06/25/a1001/","content":"<h1 id=\"a1001\"><a href=\"#a1001\" class=\"headerlink\" title=\"a1001\"></a><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400\" target=\"_blank\" rel=\"noopener\">a1001</a></h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>计算结果并且用英式符号来表达。 就是每三位用一个逗号来表达。</p>\n<h2 id=\"解决方法。\"><a href=\"#解决方法。\" class=\"headerlink\" title=\"解决方法。\"></a>解决方法。</h2><p>通过把他们的和变成字符串。然后从后往前便利了每三位取模等于零，那就是要添加逗号的地方。但是了最后一个和第一个不能要呀逗号。同时还要考虑到这个字符串的正负性。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cin用多了超市</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c=a+b;</span><br><span class=\"line\">    <span class=\"built_in\">string</span>  d=to_string(c);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span>  temp=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = d.length()<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">1</span>; --i) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            temp=d[i]+temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count%<span class=\"number\">3</span>==<span class=\"number\">0</span>&amp;&amp;i!=d.length()<span class=\"number\">-1</span>&amp;&amp;i!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//                cout&lt;&lt;',';</span></span><br><span class=\"line\">                temp=<span class=\"string\">','</span>+temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = d.length()<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            temp=d[i]+temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count%<span class=\"number\">3</span>==<span class=\"number\">0</span>&amp;&amp;i!=d.length()<span class=\"number\">-1</span>&amp;&amp;i!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                temp=<span class=\"string\">','</span>+temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"水题","slug":"水题","permalink":"http://yoursite.com/tags/水题/"}]},{"title":"pat输入","date":"2020-06-25T09:59:08.000Z","path":"2020/06/25/pat输入/","content":"<h1 id=\"输入方法\"><a href=\"#输入方法\" class=\"headerlink\" title=\"输入方法\"></a>输入方法</h1><h2 id=\"1-eof\"><a href=\"#1-eof\" class=\"headerlink\" title=\"1.eof\"></a>1.eof</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)!=EOF)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-条件读入\"><a href=\"#2-条件读入\" class=\"headerlink\" title=\"2.条件读入\"></a>2.条件读入</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n)!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-for\"><a href=\"#3-for\" class=\"headerlink\" title=\"3.for\"></a>3.for</h2>","tags":[{"name":"pat","slug":"pat","permalink":"http://yoursite.com/tags/pat/"},{"name":"输入","slug":"输入","permalink":"http://yoursite.com/tags/输入/"}]},{"title":"单纯形方法","date":"2019-09-07T07:00:21.000Z","path":"2019/09/07/单纯形方法/","content":"<h1 id=\"单纯形方法\"><a href=\"#单纯形方法\" class=\"headerlink\" title=\"单纯形方法\"></a>单纯形方法</h1><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"1-第一步：化标准形\"><a href=\"#1-第一步：化标准形\" class=\"headerlink\" title=\"1.第一步：化标准形\"></a>1.第一步：化标准形</h3><p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107213728799-361504213.png\" alt=\"示例图片\"></p>\n<h4 id=\"标准型的规定\"><a href=\"#标准型的规定\" class=\"headerlink\" title=\"标准型的规定\"></a>标准型的规定</h4><h5 id=\"1-目标函数要求max\"><a href=\"#1-目标函数要求max\" class=\"headerlink\" title=\"1.目标函数要求max\"></a>1.目标函数要求max</h5><h5 id=\"2-约束条件均为等式\"><a href=\"#2-约束条件均为等式\" class=\"headerlink\" title=\"2.约束条件均为等式\"></a>2.约束条件均为等式</h5><h5 id=\"3-决策变量为非负约束\"><a href=\"#3-决策变量为非负约束\" class=\"headerlink\" title=\"3.决策变量为非负约束\"></a>3.决策变量为非负约束</h5><h4 id=\"最终结果\"><a href=\"#最终结果\" class=\"headerlink\" title=\"最终结果\"></a>最终结果</h4><p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107213813096-1714683258.png\" alt=\"图片\"></p>\n<h3 id=\"2-第二步：构建单纯形表\"><a href=\"#2-第二步：构建单纯形表\" class=\"headerlink\" title=\"2.第二步：构建单纯形表\"></a>2.第二步：构建单纯形表</h3><h4 id=\"1-找出基向量，就是他们系数组成的矩阵是单位向量\"><a href=\"#1-找出基向量，就是他们系数组成的矩阵是单位向量\" class=\"headerlink\" title=\"1.找出基向量，就是他们系数组成的矩阵是单位向量\"></a>1.找出基向量，就是他们系数组成的矩阵是单位向量</h4><h4 id=\"2-把z函数的系数也加入这个矩阵，除了自己的系数是1，其余都为0，用行变换变成只有1个1，其余列上都为0\"><a href=\"#2-把z函数的系数也加入这个矩阵，除了自己的系数是1，其余都为0，用行变换变成只有1个1，其余列上都为0\" class=\"headerlink\" title=\"2.把z函数的系数也加入这个矩阵，除了自己的系数是1，其余都为0，用行变换变成只有1个1，其余列上都为0\"></a><strong><em>2.把z函数的系数也加入这个矩阵，除了自己的系数是1，其余都为0，用行变换变成只有1个1，其余列上都为0</em></strong></h4><p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107213844346-2035122277.png\" alt=\"图片\"></p>\n<h3 id=\"3-第三步：求解\"><a href=\"#3-第三步：求解\" class=\"headerlink\" title=\"3.第三步：求解\"></a>3.第三步：求解</h3><h4 id=\"1-找出θi里最大的所对应那一列\"><a href=\"#1-找出θi里最大的所对应那一列\" class=\"headerlink\" title=\"1.找出θi里最大的所对应那一列\"></a>1.找出θi里最大的所对应那一列</h4><p>​        如图，应该是3最大，对应的就是x2那一列，x2就是换入变量，再求b/aij,就是b那一列除x2对应的那一列，那个最小就是，那个元素的行向量对应的向量换出变量（b&gt;0才可以除，若都小于等于0，则无解）12/3=4,9/1=9,4小，x3就是换出变量</p>\n<h4 id=\"2-把x2那一列化成010，保证只有x2与x3相交的为1，其他的都为0，在x2列\"><a href=\"#2-把x2那一列化成010，保证只有x2与x3相交的为1，其他的都为0，在x2列\" class=\"headerlink\" title=\"2.把x2那一列化成010，保证只有x2与x3相交的为1，其他的都为0，在x2列\"></a>2.把x2那一列化成010，保证只有x2与x3相交的为1，其他的都为0，在x2列<!--应该是001，这里的是θi在第一行，我们的是在最后一行--></h4><p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107214818862-1198445671.png\" alt=\"图片\"></p>\n<h4 id=\"3-重复1-2两步，直到z的系数都小于等于0\"><a href=\"#3-重复1-2两步，直到z的系数都小于等于0\" class=\"headerlink\" title=\"3.重复1,2两步，直到z的系数都小于等于0\"></a>3.重复1,2两步，直到z的系数都小于等于0</h4><p>此时x1是换入，x4是换出，变成001</p>\n<p><img src=\"https://images2017.cnblogs.com/blog/1092891/201801/1092891-20180107215054862-1636502575.png\" alt></p>\n<h3 id=\"4-结束\"><a href=\"#4-结束\" class=\"headerlink\" title=\"4.结束\"></a>4.结束</h3><p>当θi都小于等于0是结束，x*=（3,3,0,0）T，z=15</p>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h3><h4 id=\"解的分类\"><a href=\"#解的分类\" class=\"headerlink\" title=\"解的分类\"></a>解的分类</h4><h6 id=\"1-唯一最优解\"><a href=\"#1-唯一最优解\" class=\"headerlink\" title=\"1.唯一最优解\"></a>1.唯一最优解</h6><p>当所有非基变量的检验数都小于零，则原问题有唯一最优解</p>\n<h6 id=\"2-无穷多个最优解\"><a href=\"#2-无穷多个最优解\" class=\"headerlink\" title=\"2.无穷多个最优解\"></a>2.无穷多个最优解</h6><p>当所有非基变量的检验数<strong>都小于等于零，注意有等于零的检验数</strong>，则有无穷多个最优解，有0</p>\n<p>非基向量就可以随便加也无影响，所以是无穷个</p>\n<h6 id=\"3-无界解\"><a href=\"#3-无界解\" class=\"headerlink\" title=\"3.无界解\"></a>3.<a href=\"https://www.baidu.com/s?wd=无界&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener\">无界</a>解</h6><p>当任意一个大于零的非基变量的检验数，其对应的ajk（求最小比值的分母）都小于等于零时，则原问题有<a href=\"https://www.baidu.com/s?wd=无界&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener\">无界</a>解</p>\n<p>就是b/aij&lt;=0,无法找到换出的变量</p>\n<h6 id=\"4-无可行解\"><a href=\"#4-无可行解\" class=\"headerlink\" title=\"4.无可行解\"></a>4.无可行解</h6><p>添加人工变量后的问题，当所有非基变量的检验数都小于等于零，而基变量中有人工变量时，则原问题无可行解</p>\n","tags":[{"name":"线性代数","slug":"线性代数","permalink":"http://yoursite.com/tags/线性代数/"},{"name":"运筹学","slug":"运筹学","permalink":"http://yoursite.com/tags/运筹学/"}]},{"title":"Boot","date":"2019-09-04T15:08:42.000Z","path":"2019/09/04/Boot/","content":"","tags":[]},{"title":"动态规划","date":"2019-07-26T06:41:10.000Z","path":"2019/07/26/动态规划/","content":"<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><blockquote>\n<p><strong>动态规划算法介绍</strong></p>\n<p>1)动态规划(<strong>Dynamic</strong> <strong>Programming</strong>)算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法</p>\n<p>●</p>\n<p>2)动态规划算法与分治算法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p>\n<p>●</p>\n<p>3)与分治法不同的是，<strong>适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的**</strong>。** ( 即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解 )</p>\n<p>●</p>\n<p>4)动态规划可以通过<strong>填**</strong>表的方式**来逐步推进，得到最优解.</p>\n</blockquote>\n<h2 id=\"2-背包问题\"><a href=\"#2-背包问题\" class=\"headerlink\" title=\"2.背包问题\"></a>2.背包问题</h2><p><a href=\"https://imgchr.com/i/entZOU\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/07/26/entZOU.md.png\" alt=\"entZOU.md.png\"></a></p>\n<h2 id=\"3-解决思路\"><a href=\"#3-解决思路\" class=\"headerlink\" title=\"3.解决思路\"></a>3.解决思路</h2><p><a href=\"https://imgchr.com/i/enttmD\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/07/26/enttmD.md.png\" alt=\"enttmD.md.png\"></a></p>\n<h2 id=\"4-个人理解\"><a href=\"#4-个人理解\" class=\"headerlink\" title=\"4.个人理解\"></a>4.个人理解</h2><p>构建数组，行是在前一行新加的物品，猎是增加的重量，最大不过背包能加的重量。当新加一个物品时看这个是否超重，如果超重，那就把上一行的价值赋值到下面来；如果没有超重，那就选取最大值（在上一行的这个，和这个物品的价值+v【i-1】【j-w【i】】）来选取最大值，直到填完所有表，最后一个就是最好的。</p>\n<h2 id=\"5-代码讲解\"><a href=\"#5-代码讲解\" class=\"headerlink\" title=\"5.代码讲解\"></a>5.代码讲解</h2><p><strong>注意一个坑，物品的下标是从0开始的，但是在表里是第一行开始的，所以在找重量是需要i-1</strong></p>\n<p>如果需要记录是拿几个弄出最有解，设置一个数组path，当用心加的物品时最大就把path【i】【j】设置为1，就从最后面找，当path为1时，j=j-w【i-1】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] weight=&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] val=&#123;<span class=\"number\">1500</span>,<span class=\"number\">3000</span>,<span class=\"number\">2000</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=<span class=\"number\">4</span>;<span class=\"comment\">//定义背包重量为4kg</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] v=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[weight.length+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] path=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[weight.length+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];<span class=\"comment\">//定义路径</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; v.length; i++) &#123;<span class=\"comment\">//从第一个物品出发</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; v[<span class=\"number\">0</span>].length; j++) &#123;<span class=\"comment\">//从第1kg出发</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (weight[i-<span class=\"number\">1</span>]&gt;j)&#123;<span class=\"comment\">//新加的物品的重量大于背包重量(从1开始，但是wuti还是从0开始要减去1</span></span><br><span class=\"line\">                    v[i][j]=v[i-<span class=\"number\">1</span>][j];<span class=\"comment\">//没加物品时背包的价值</span></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v[i-<span class=\"number\">1</span>][j]&gt;val[i-<span class=\"number\">1</span>]+v[i-<span class=\"number\">1</span>][j-weight[i-<span class=\"number\">1</span>]])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        v[i][j]=v[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        path[i][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                        v[i][j]=val[i-<span class=\"number\">1</span>]+v[i-<span class=\"number\">1</span>][j-weight[i-<span class=\"number\">1</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=v.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=v[<span class=\"number\">0</span>].length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&gt;=<span class=\"number\">0</span>&amp;&amp;j&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (path[i][j]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                System.out.println(i+<span class=\"string\">\"放进去了\"</span>);</span><br><span class=\"line\">                j=j-weight[i-<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"动态规划","slug":"动态规划","permalink":"http://yoursite.com/tags/动态规划/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"汉诺塔","date":"2019-07-26T06:30:56.000Z","path":"2019/07/26/汉诺塔/","content":"<h1 id=\"汉诺塔\"><a href=\"#汉诺塔\" class=\"headerlink\" title=\"汉诺塔\"></a>汉诺塔</h1><h2 id=\"1-分治定义\"><a href=\"#1-分治定义\" class=\"headerlink\" title=\"1.分治定义\"></a>1.分治定义</h2><p>分治法在每一层递归上都有三个步骤：</p>\n<p>1)分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题</p>\n<p>2)解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</p>\n<p>3)合并：将各个子问题的解合并为原问题的解。</p>\n<blockquote>\n<p>if |P|≤n0</p>\n<p>   then return(ADHOC(P))</p>\n<p>//将P分解为较小的子问题 P1 ,P2 ,…,Pk</p>\n<p>for i←1 to k</p>\n<p>do yi ← Divide-and-Conquer(Pi)   递归解决Pi</p>\n<p>T ← MERGE(y1,y2,…,yk)   合并子问题</p>\n<p>return(T)</p>\n</blockquote>\n<blockquote>\n<p>其中|P|表示问题P的规模；n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC(P)是该分治法中的基本子算法，用于直接解小规模的问题P。因此，当P的规模不超过n0时直接用算法ADHOC(P)求解。算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1<br>,P2 ,…,Pk的相应的解y1,y2,…,yk合并为P的解。</p>\n</blockquote>\n<h2 id=\"2-汉诺塔定义\"><a href=\"#2-汉诺塔定义\" class=\"headerlink\" title=\"2.汉诺塔定义\"></a>2.汉诺塔定义</h2><blockquote>\n<p>Ø汉诺塔的传说</p>\n<p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根<a href=\"https://baike.baidu.com/item/金刚石/80698\" target=\"_blank\" rel=\"noopener\">金刚石</a>柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>\n<p>假如每秒钟一次，共需多长时间呢？移完这些金片需要5845.54亿年以上，太阳系的预期寿命据说也就是数百亿年。真的过了5845.54亿年，地球上的一切生命，连同梵塔、庙宇等，都早已经灰飞烟灭。</p>\n</blockquote>\n<h2 id=\"3-解决思路\"><a href=\"#3-解决思路\" class=\"headerlink\" title=\"3.解决思路\"></a>3.解决思路</h2><p>Ø汉诺塔游戏的<strong>演示</strong>和<strong>思路分析</strong>:    </p>\n<p>1)如果是有一个盘， A-&gt;C</p>\n<p>如果我们有 n &gt;= 2 情况，我们总是可以看做是两个盘 1.最下边的盘 2. 上面的盘</p>\n<p>1)先把 最上面的盘 A-&gt;B</p>\n<p>2)把最下边的盘 A-&gt;C</p>\n<p>3)把B塔的所有盘 从 B-&gt;C   </p>\n<h2 id=\"4-个人理解\"><a href=\"#4-个人理解\" class=\"headerlink\" title=\"4.个人理解\"></a>4.个人理解</h2><p>把牌分为两部分，最下面一个，和上面的所有，先把最上面所有的（n-1）移动到b盘（借助c盘的帮助），再把最下面的一个移动到c盘，最后再把b盘上的所有移动到c盘（借助a盘的帮助），把规模为n的问题分为n-1,1，n-1的三个问题，递归基就是只有一个元素，那就把元素从a到c</p>\n<h2 id=\"5-代码讲解\"><a href=\"#5-代码讲解\" class=\"headerlink\" title=\"5.代码讲解\"></a>5.代码讲解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        solve(<span class=\"number\">4</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//n个塔借组b使他从a到c</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">char</span> a,<span class=\"keyword\">char</span> b,<span class=\"keyword\">char</span> c)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"第1个盘从\"</span>+a+<span class=\"string\">\"到\"</span>+c);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            solve(n-<span class=\"number\">1</span>,a,c,b);<span class=\"comment\">//吧最上面的pan全部移到b上</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"第\"</span>+n+<span class=\"string\">\"个盘从\"</span>+a+<span class=\"string\">\"到\"</span>+c);<span class=\"comment\">//这个ac是指起点到终点，不是a点和c点</span></span><br><span class=\"line\">            solve(n-<span class=\"number\">1</span>,b,a,c);<span class=\"comment\">//再把b上的pan全部移到c上</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"},{"name":"分治","slug":"分治","permalink":"http://yoursite.com/tags/分治/"}]},{"title":"广度优先","date":"2019-07-26T05:51:11.000Z","path":"2019/07/26/广度优先/","content":"<h1 id=\"广度优先\"><a href=\"#广度优先\" class=\"headerlink\" title=\"广度优先\"></a>广度优先</h1><h1 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h1><p>1)访问初始结点v并标记结点v为已访问。</p>\n<p>2)结点v入队列</p>\n<p>3)当队列非空时，继续执行，否则算法结束。</p>\n<p>4)出队列，取得队头结点u。</p>\n<p>5)查找结点u的第一个邻接结点w。</p>\n<p>6)若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：</p>\n<p>6.1 若结点w尚未被访问，则访问结点w并标记为已访问。 </p>\n<p>6.2 结点w入队列 </p>\n<p>6.3 查找结点u的继w邻接结点后的下一个邻接结点w，转到步骤6。</p>\n<h2 id=\"2-个人理解\"><a href=\"#2-个人理解\" class=\"headerlink\" title=\"2.个人理解\"></a>2.个人理解</h2><p>广度优先就是遍历他的所有的子节点再遍历他的子节点的子节点，直到为空才停止（遍历市也是要威访问过的），同样万一有断点，所以需要for循环一遍</p>\n<h1 id=\"3-代码讲解\"><a href=\"#3-代码讲解\" class=\"headerlink\" title=\"3.代码讲解\"></a>3.代码讲解</h1><p>需要一个队列来进行排序，先压入所有节点标为已经访问过的，再排出一个节点，并把这个节点的子节点全部压入标记已经访问，当队列为空才停止</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span>[][] arr,<span class=\"keyword\">boolean</span>[] visited)</span></span>&#123;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue=<span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        System.out.print(i+<span class=\"string\">\"-&gt;\"</span>);</span><br><span class=\"line\">        queue.add(i);</span><br><span class=\"line\">        visited[i]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=queue.remove();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[v][j]==<span class=\"number\">1</span>&amp;&amp;!visited[j])&#123;</span><br><span class=\"line\">                    System.out.print(j+<span class=\"string\">\"-&gt;\"</span>);</span><br><span class=\"line\">                    visited[j]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    queue.add(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样也有断点需要全部for一遍</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!visited[i])&#123;</span><br><span class=\"line\">               <span class=\"comment\">//depthfs(i,arr,visited);</span></span><br><span class=\"line\">               dfs(i,arr,visited);</span><br><span class=\"line\">               <span class=\"comment\">//brofs(i,arr,visited);</span></span><br><span class=\"line\">               <span class=\"comment\">//bfs(i,arr,visited);</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"图","slug":"图","permalink":"http://yoursite.com/tags/图/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"深度优先","date":"2019-07-24T19:53:22.000Z","path":"2019/07/25/深度优先/","content":"<h1 id=\"深度优先\"><a href=\"#深度优先\" class=\"headerlink\" title=\"深度优先\"></a>深度优先</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p><strong>深度优先遍历算法步骤</strong></p>\n<p>1)访问初始结点v，并标记结点v为已访问。</p>\n<p>2)查找结点v的第一个邻接结点w。</p>\n<p>3)若w存在，则继续执行4，如果w不存在，则回到第1步，将从v的下一个结点继续。</p>\n<p>4)若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后进行步骤123）。</p>\n<p>5)查找结点v的w邻接结点的下一个邻接结点，转到步骤3。</p>\n<h2 id=\"2-个人理解\"><a href=\"#2-个人理解\" class=\"headerlink\" title=\"2.个人理解\"></a>2.个人理解</h2><p>先设置第一个点为已经访问过的再看这个点与其他拿几个点连接过，并且那些点没有访问过，那么久把这个点递归dfs（递归基停止是都访问过就直接跳回上一个</p>\n<h2 id=\"3-代码讲解\"><a href=\"#3-代码讲解\" class=\"headerlink\" title=\"3.代码讲解\"></a>3.代码讲解</h2><p>首先设置为已经访问过的，在用for循环看邻接矩阵是否这两个相连并没有访问过，那么久把这个点用dfs在递归</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span>[][] arr,<span class=\"keyword\">boolean</span>[] visited)</span></span>&#123;</span><br><span class=\"line\">       visited[i]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">       System.out.print(i+<span class=\"string\">\"-&gt;\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (arr[i][j]==<span class=\"number\">1</span>&amp;&amp;!visited[j])&#123;</span><br><span class=\"line\">               dfs(j,arr,visited);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面只是访问的所有相连的节点，万一还有断点，所以需要for循环所有节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!visited[i])&#123;</span><br><span class=\"line\">               <span class=\"comment\">//depthfs(i,arr,visited);</span></span><br><span class=\"line\">               dfs(i,arr,visited);</span><br><span class=\"line\">               <span class=\"comment\">//brofs(i,arr,visited);</span></span><br><span class=\"line\">               <span class=\"comment\">//bfs(i,arr,visited);</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"图","slug":"图","permalink":"http://yoursite.com/tags/图/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"基数排序","date":"2019-07-24T07:20:22.000Z","path":"2019/07/24/基数排序/","content":"<h1 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>1)将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p>\n<h2 id=\"2-个人理解\"><a href=\"#2-个人理解\" class=\"headerlink\" title=\"2.个人理解\"></a>2.个人理解</h2><p>首先获取最大值，看他有几位数就循环几次，首先构建10个队列，从0到9，首先看数组里元素的个位数，按个位数是i依次加入到为i的队列里，然后再把数组重新赋值，从队列0移除所有元素，一直到队列9，再从个位数j获取放到队列j里，直到循环结束</p>\n<h2 id=\"3-图示讲解\"><a href=\"#3-图示讲解\" class=\"headerlink\" title=\"3.图示讲解\"></a>3.图示讲解</h2><p><a href=\"https://imgchr.com/i/eEIKfK\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/07/24/eEIKfK.md.png\" alt=\"eEIKfK.md.png\"></a></p>\n<p><a href=\"https://imgchr.com/i/eEI16e\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/07/24/eEI16e.md.png\" alt=\"eEI16e.md.png\"></a></p>\n<p><a href=\"https://imgchr.com/i/eEIJ0A\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/07/24/eEIJ0A.md.png\" alt=\"eEIJ0A.md.png\"></a></p>\n<h2 id=\"4-代码讲解\"><a href=\"#4-代码讲解\" class=\"headerlink\" title=\"4.代码讲解\"></a>4.代码讲解</h2><p>找出最大值，看是几位就循环几次，然后依次获取个位数加入对应的队列再给arr赋值把队列清空，在获取十位，直到结束</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=&#123;<span class=\"number\">53</span>,<span class=\"number\">63</span>,<span class=\"number\">542</span>,<span class=\"number\">748</span>,<span class=\"number\">14</span>,<span class=\"number\">214</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i]&gt;max)&#123;</span><br><span class=\"line\">                max=arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count=(max+<span class=\"string\">\"\"</span>).length();<span class=\"comment\">//要循环的次数</span></span><br><span class=\"line\">        Queue&lt;Integer&gt; [] queues=<span class=\"keyword\">new</span> Queue[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; queues.length; i++) &#123;</span><br><span class=\"line\">            queues[i]=<span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>,n=<span class=\"number\">1</span> ; i &lt; count; i++,n*=<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tem=arr[j]/n%<span class=\"number\">10</span>;<span class=\"comment\">//获取数字</span></span><br><span class=\"line\">                queues[tem].add(arr[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; queues.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!queues[j].isEmpty())&#123;</span><br><span class=\"line\">                    arr[t]=queues[j].remove();</span><br><span class=\"line\"></span><br><span class=\"line\">                    t++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"归并排序","date":"2019-07-24T07:00:02.000Z","path":"2019/07/24/归并排序/","content":"<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p><strong>归**</strong>并排序（<strong><strong>MERGE-SORT</strong></strong>）是利用<strong><strong>归并</strong></strong>的思想实现的排序方法，该算法采用经典的<strong><strong>分治</strong></strong>（<strong><strong>divide-and-conquer</strong></strong>）策略（分治法将问题<strong><strong>分</strong></strong>(divide)<strong><strong>成一些小的问题然后递归求解，而</strong></strong>治<strong><strong>(conquer)</strong></strong>的阶段则将分的阶段得到的各答案<strong><strong>“</strong></strong>修补<strong><strong>“</strong></strong>在一起，即分而治之<strong><strong>)</strong></strong>。**</p>\n<h2 id=\"2-0个人理解\"><a href=\"#2-0个人理解\" class=\"headerlink\" title=\"2.0个人理解\"></a>2.0个人理解</h2><p>先把数组一直分 分成n组直到每组只有一个元素，然后在对每两组元素进行合并（因为他就是两组两组的分的就是用middle来分），合并时就先狗一个空数组，同时设置l1，l2为每一组元素的开头，再比较arr【l1】yuarr【l2】的大小，晓得就假如新数组，并++，最后再把这个数组的元素拷贝到原数组里。</p>\n<h2 id=\"3-图示讲解\"><a href=\"#3-图示讲解\" class=\"headerlink\" title=\"3.图示讲解\"></a>3.图示讲解</h2><p><a href=\"https://imgchr.com/i/eEfgzQ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/07/24/eEfgzQ.md.png\" alt=\"eEfgzQ.md.png\"></a></p>\n<h2 id=\"4-0代码讲解\"><a href=\"#4-0代码讲解\" class=\"headerlink\" title=\"4.0代码讲解\"></a>4.0代码讲解</h2><h3 id=\"4-1不断分组的代码\"><a href=\"#4-1不断分组的代码\" class=\"headerlink\" title=\"4.1不断分组的代码\"></a>4.1不断分组的代码</h3><p>终止条件同样也是l》=r，否则就是取中间值middle，再划分两组，最后进行合并</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span>  <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right,<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left&gt;=right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        mergeSort(left,mid,arr);</span><br><span class=\"line\">        mergeSort(mid+<span class=\"number\">1</span>,right,arr);</span><br><span class=\"line\">        merge(left,right,mid,arr);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2合并代码\"><a href=\"#4-2合并代码\" class=\"headerlink\" title=\"4.2合并代码\"></a>4.2合并代码</h3><p>找到两个数组收元素，i一个是left，j另一个是mid+1，新开一个数组copy，长度是right-left+1进行循环，当i&lt;=mid,j&lt;=right,比较arr【i】与arr【j】的大小，那个小，copy【k】就是那个，并且k++，小的那个下标j++，当有一个超过mid，那就一直是copy【k++】=arr【j+=】，若是超过right，那就是copy【k++】=arr【i++】，最后再把copy里的元素放回arr里</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=left;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> [] aux=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[right-left+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid&amp;&amp;j&lt;=right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i]&lt;arr[j])&#123;</span><br><span class=\"line\">                aux[t]=arr[i];</span><br><span class=\"line\">                t++;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                aux[t]=arr[j];</span><br><span class=\"line\">                t++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid)&#123;</span><br><span class=\"line\">            aux[t]=arr[i];</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=right)&#123;</span><br><span class=\"line\">            aux[t]=arr[j];</span><br><span class=\"line\">            t++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; aux.length; k++) &#123;</span><br><span class=\"line\">            arr[p+k]=aux[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"sss","date":"2019-07-23T06:45:41.000Z","path":"2019/07/23/快排/","content":"<h1 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h1><h2 id=\"1-0定义\"><a href=\"#1-0定义\" class=\"headerlink\" title=\"1.0定义\"></a>1.0定义</h2><blockquote>\n<p><strong>快**</strong>速排序（<strong><strong>Quicksort</strong></strong>）是对冒泡排序的一种改进<strong><strong>。</strong></strong>基<strong><strong>本思想</strong></strong>是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列**</p>\n</blockquote>\n<h2 id=\"2-个人理解\"><a href=\"#2-个人理解\" class=\"headerlink\" title=\"2.个人理解\"></a>2.个人理解</h2><p>快排运用了分而治之的思想，先把数组分成两个区域，一个是小于value的区域，一个是大于value的区域，在对这两个区域里的进行分解，直到只有一个元素才停止，先用sort算法分成两个区域，并把value的下标取出，然后再分成左区域和右区域，再这里面进行找下标再区分，直到l&gt;=r</p>\n<h2 id=\"3-图片讲解\"><a href=\"#3-图片讲解\" class=\"headerlink\" title=\"3.图片讲解\"></a>3.图片讲解</h2><p><a href=\"https://imgchr.com/i/eEcqte\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/07/24/eEcqte.md.png\" alt=\"eEcqte.md.png\"></a></p>\n<h2 id=\"4-0代码讲解\"><a href=\"#4-0代码讲解\" class=\"headerlink\" title=\"4.0代码讲解\"></a>4.0代码讲解</h2><p>首先要两个代码，一个是不断进行分左区域和区域，另一个就是分大于value和小于value，最后的出下标返回来进行左右划分</p>\n<h3 id=\"4-1不断划分左右区域\"><a href=\"#4-1不断划分左右区域\" class=\"headerlink\" title=\"4.1不断划分左右区域\"></a>4.1不断划分左右区域</h3><p>条件终止是l》=r</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left&gt;=right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=qucik(arr,left,right);</span><br><span class=\"line\">        quickSort2(arr,left,v-<span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSort2(arr,v+<span class=\"number\">1</span>,right);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2获取下标，并同时对数组进行分区域\"><a href=\"#4-2获取下标，并同时对数组进行分区域\" class=\"headerlink\" title=\"4.2获取下标，并同时对数组进行分区域\"></a>4.2获取下标，并同时对数组进行分区域</h3><p>首先设置l=left+1，r=right，l往右移动，r往左移动，value先设置为arr【left】，当arr【l】&gt;value时停止否则l++，r就是arr【r】&lt;value时，停止，否则就是r–，当l与r都停止时候就把arr【l】yuarr【r】进行交换，如何l++，r–停止条件也是l&gt;r。跳出循环时，把arr【r】与arr【left】进行交换，最后把r返回就行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">qucik</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l=left+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r=right;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val=arr[left];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l&lt;=r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l&lt;=right&amp;&amp;arr[l]&lt;val)&#123;</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (r&gt;=left+<span class=\"number\">1</span>&amp;&amp;arr[r]&gt;val)&#123;</span><br><span class=\"line\">                r--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l&gt;r)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明已经排好了</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tem=arr[l];</span><br><span class=\"line\">            arr[l]=arr[r];</span><br><span class=\"line\">            arr[r]=tem;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//跳出循环把，r与left交换，因为是以left威大小来分的</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> tem=arr[left];</span><br><span class=\"line\">        arr[left]=arr[r];</span><br><span class=\"line\">        arr[r]=tem;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"希尔排序","date":"2019-07-16T13:28:24.000Z","path":"2019/07/16/希尔排序/","content":"<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><h2 id=\"1-思路\"><a href=\"#1-思路\" class=\"headerlink\" title=\"1.思路\"></a>1.思路</h2><p>把整个数组先找出中间数mid=（length/2),用mid的个数分成5组，用插入排序，排每一组，再把mid=mid/2,再分成mid组，知道mid==0才停止。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arr.length/<span class=\"number\">2</span>; i &gt;<span class=\"number\">0</span>; i/=<span class=\"number\">2</span>) &#123;<span class=\"comment\">//分组</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/eE6XLV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/07/24/eE6XLV.md.png\" alt=\"eE6XLV.md.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;arr.length ; j++) &#123;<span class=\"comment\">//选择排序，从mid开始数，找j-i来比较，</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> k=j-i;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tem=arr[j];<span class=\"comment\">//要插入的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (k&gt;=<span class=\"number\">0</span>&amp;&amp;tem&lt;arr[k])&#123;</span><br><span class=\"line\">                    arr[k+i]=arr[k];</span><br><span class=\"line\">                    k-=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                arr[k+i]=tem;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2完整代码\"><a href=\"#2完整代码\" class=\"headerlink\" title=\"2完整代码\"></a>2完整代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 希尔排序 </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=&#123;<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//        for (int i = arr.length/2; i &gt;0 ; i/=2) &#123;//要分的组数</span></span><br><span class=\"line\"><span class=\"comment\">//            for (int j = i; j &lt;arr.length ; j++) &#123;//从哪里形成组数</span></span><br><span class=\"line\"><span class=\"comment\">//                for (int k = j-i; k&gt;=0 ; k-=i) &#123;//形成组，夸区域</span></span><br><span class=\"line\"><span class=\"comment\">//                    if (arr[k+i]&lt;arr[k])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                        int tem=arr[k+i];</span></span><br><span class=\"line\"><span class=\"comment\">//                        arr[k+i]=arr[k];</span></span><br><span class=\"line\"><span class=\"comment\">//                        arr[k]=tem;</span></span><br><span class=\"line\"><span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//优化希尔排序，用移位法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arr.length/<span class=\"number\">2</span>; i &gt;<span class=\"number\">0</span>; i/=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt;arr.length ; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> k=j-i;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tem=arr[j];<span class=\"comment\">//要插入的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (k&gt;=<span class=\"number\">0</span>&amp;&amp;tem&lt;arr[k])&#123;</span><br><span class=\"line\">                    arr[k+i]=arr[k];</span><br><span class=\"line\">                    k-=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                arr[k+i]=tem;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr[i]+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"排序","slug":"排序","permalink":"http://yoursite.com/tags/排序/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"八皇后","date":"2019-07-12T15:31:31.000Z","path":"2019/07/12/八皇后/","content":"<h1 id=\"八皇后问题\"><a href=\"#八皇后问题\" class=\"headerlink\" title=\"八皇后问题\"></a>八皇后问题</h1><h2 id=\"1来源\"><a href=\"#1来源\" class=\"headerlink\" title=\"1来源\"></a>1来源</h2><blockquote>\n<p>八皇后问题，是一个古老而著名的问题，是<strong>回溯算法的典型案例</strong>。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：<strong>任**</strong>意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法**。</p>\n</blockquote>\n<h2 id=\"2思路\"><a href=\"#2思路\" class=\"headerlink\" title=\"2思路\"></a>2思路</h2><h3 id=\"2-1构建思路\"><a href=\"#2-1构建思路\" class=\"headerlink\" title=\"2.1构建思路\"></a>2.1构建思路</h3><p>构建一个int【8】的数组，i是x，arr【i】是y，这样就形成了坐标</p>\n<h3 id=\"2-2检测冲突\"><a href=\"#2-2检测冲突\" class=\"headerlink\" title=\"2.2检测冲突\"></a>2.2检测冲突</h3><p>直线就是arr【i】与arr【i-1】.。。arr【0】这些值是否相等，斜线就是x的变化值与y的变化值是否相等即i-j==arr【i】-arr【j】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//检测是否冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[n]==arr[i]||Math.abs(n-i)==Math.abs(arr[n]-arr[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3放旗子思路\"><a href=\"#2-3放旗子思路\" class=\"headerlink\" title=\"2.3放旗子思路\"></a>2.3放旗子思路</h3><p>从第0个位置开始放就是arr【i】==0开始，用for写到8，如果不冲突就放下一个，也是for从0到8，当i==8就是放完了就返回到上一个，看把arr【i】往后移动会不会也成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> max,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n==max)&#123;</span><br><span class=\"line\">            print(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(count);</span></span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">            arr[n]=i;<span class=\"comment\">//先放在第一位在后裔</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check(arr,n))&#123;</span><br><span class=\"line\">                put(max,n+<span class=\"number\">1</span>,arr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3完整代码\"><a href=\"#3完整代码\" class=\"headerlink\" title=\"3完整代码\"></a>3完整代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 八皇后 </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max=<span class=\"number\">8</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max];</span><br><span class=\"line\">        put(max,<span class=\"number\">0</span>,arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//检测是否冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[n]==arr[i]||Math.abs(n-i)==Math.abs(arr[n]-arr[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> max,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n==max)&#123;</span><br><span class=\"line\">            print(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(count);</span></span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">            arr[n]=i;<span class=\"comment\">//先放在第一位在后裔</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (check(arr,n))&#123;</span><br><span class=\"line\">                put(max,n+<span class=\"number\">1</span>,arr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr[i]+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"},{"name":"递归","slug":"递归","permalink":"http://yoursite.com/tags/递归/"}]},{"title":"迷宫回溯","date":"2019-07-12T15:18:17.000Z","path":"2019/07/12/迷宫回溯/","content":"<h1 id=\"迷宫问题\"><a href=\"#迷宫问题\" class=\"headerlink\" title=\"迷宫问题\"></a>迷宫问题</h1><h2 id=\"1定义\"><a href=\"#1定义\" class=\"headerlink\" title=\"1定义\"></a>1定义</h2><p>定义走过通路为2，墙壁为1，未经过的是0，已经走过了的不是通路3，当终点为2时就是成功</p>\n<h2 id=\"2方法\"><a href=\"#2方法\" class=\"headerlink\" title=\"2方法\"></a>2方法</h2><p>当终点是2直接返回成功，当为0时，我们先定义他是2，再走访他周围四个点，当周围有路可走就是通路返回true，如果周围都不是（1,3,2）已近走过了的和是墙，那就返回false</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setWay</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] map,<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[<span class=\"number\">6</span>][<span class=\"number\">5</span>]==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(map[i][j]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            map[i][j]=<span class=\"number\">2</span>;<span class=\"comment\">//先假设为通路</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (setWay(map,i+<span class=\"number\">1</span>,j))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map,i,j+<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (setWay(map,i-<span class=\"number\">1</span>,j))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map,i,j-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//当四周都是false走不通</span></span><br><span class=\"line\">                map[i][j]=<span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;<span class=\"comment\">//1,2，3都是false，已近走过货不能用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"},{"name":"递归","slug":"递归","permalink":"http://yoursite.com/tags/递归/"}]},{"title":"逆波兰","date":"2019-07-12T14:52:17.000Z","path":"2019/07/12/逆波兰/","content":"<h1 id=\"逆波兰算法\"><a href=\"#逆波兰算法\" class=\"headerlink\" title=\"逆波兰算法\"></a>逆波兰算法</h1><h2 id=\"1后缀表达式\"><a href=\"#1后缀表达式\" class=\"headerlink\" title=\"1后缀表达式\"></a>1后缀表达式</h2><blockquote>\n<p>从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素<br>和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p>\n</blockquote>\n<blockquote>\n<p>例如: (3+4)×5-6 对应的后缀表达式就是 <strong>3 4 + 5 × 6 -</strong> <strong>,</strong> <strong>针对**</strong>后<strong><strong>缀表达式求值步骤</strong></strong>如<strong><strong>下</strong></strong>:**</p>\n<p>1)从左至右扫描，将3和4压入堆栈；</p>\n<p>2)遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</p>\n<p>3)将5入栈；</p>\n<p>4)接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</p>\n<p>5)将6入栈；</p>\n<p>6)最后是-运算符，计算出35-6的值，即29，由此得出最终结果  </p>\n</blockquote>\n<p>按照操作顺序来计算（所读取的是数字就加入，是符号就弹出，并进行求和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String string=<span class=\"string\">\"30 4 + 5 * 6 -\"</span>;</span><br><span class=\"line\">      String[] strings=s2.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">      Stack&lt;Integer&gt; stack=<span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class=\"line\">          String s = strings[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s.matches(<span class=\"string\">\"\\\\d+\"</span>))&#123;</span><br><span class=\"line\">              stack.push(Integer.parseInt(s));</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> num1=stack.pop();</span><br><span class=\"line\">              <span class=\"keyword\">int</span> num2=stack.pop();</span><br><span class=\"line\">              <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">\"+\"</span>))&#123;</span><br><span class=\"line\">                  res=num1+num2;</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.equals(<span class=\"string\">\"-\"</span>))&#123;</span><br><span class=\"line\">                  res=num2-num1;</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.equals(<span class=\"string\">\"*\"</span>))&#123;</span><br><span class=\"line\">                  res=num1*num2;</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  res=num2/num1;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              stack.push(res);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2中缀转后缀的原理\"><a href=\"#2中缀转后缀的原理\" class=\"headerlink\" title=\"2中缀转后缀的原理\"></a>2中缀转后缀的原理</h2><blockquote>\n<p>1)初始化两个栈：运算符栈s1和储存中间结果的栈s2；</p>\n<p>2)从左至右扫描中缀表达式；</p>\n<p>3)遇到操作数时，将其压s2；</p>\n<p>4)遇到运算符时，比较其与s1栈顶运算符的优先级：</p>\n<p>(1)如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</p>\n<p>(2)否则，若优先级比栈顶运算符的高，也将运算符压入s1；</p>\n<p>(3)否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；</p>\n<p>5)遇到括号时：<br> (1) 如果是左括号“(”，则直接压入s1<br> (2) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</p>\n<p>6)重复步骤2至5，直到表达式的最右边</p>\n<p>7)将s1中剩余的运算符依次弹出并压入s2</p>\n<p>8)依次弹出s2中的元素并输出，<strong>结果的逆序即为中缀表达式对应的后缀表达**</strong>式**  </p>\n</blockquote>\n<p>一个栈，一个list，栈收集符号，list收集数字最初，档位空或者“（”直接加入栈，优先级高也是直接加入，直到是优先级比较低的，那就直接把栈顶弹出去给加到list里，再用操作符与弹出后的比优先级，如果是“）”，也是弹到list，直到操作符为“（”，弹出这个操作符“（”，然后进行下一趟，操作代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">produce</span><span class=\"params\">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class=\"line\">        Stack&lt;String&gt; stack1=<span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        List&lt;String&gt; list1=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            String s1=list.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1.matches(<span class=\"string\">\"\\\\d+\"</span>))&#123;</span><br><span class=\"line\">                list1.add(s1);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stack1.isEmpty())&#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1.equals(<span class=\"string\">\"(\"</span>))&#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1.equals(<span class=\"string\">\")\"</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack1.peek().equals(<span class=\"string\">\"(\"</span>))&#123;</span><br><span class=\"line\">                        list1.add(stack1.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack1.pop();<span class=\"comment\">//弹出左括号</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (priority(s1)&lt;=priority(stack1.peek()))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack1.isEmpty()&amp;&amp;priority(s1)&lt;=priority(stack1.peek()))&#123;</span><br><span class=\"line\">                        list1.add(stack1.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack1.isEmpty())&#123;</span><br><span class=\"line\">            list1.add(stack1.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3完整的代码\"><a href=\"#3完整的代码\" class=\"headerlink\" title=\"3完整的代码\"></a>3完整的代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 逆波兰 </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//String string=\"4 5 * 8 - 60 + 8 2 / +\";</span></span><br><span class=\"line\">        String s1=<span class=\"string\">\"1+((2+3)*4)-5\"</span>;</span><br><span class=\"line\">        List&lt;String&gt; list=list(s1);</span><br><span class=\"line\">        List&lt;String&gt; list1=produce(list);</span><br><span class=\"line\">        String s2=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list1.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i!=list1.size()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                s2+=list1.get(i)+<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                s2+=list1.get(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(s2);</span><br><span class=\"line\">        String string=<span class=\"string\">\"30 4 + 5 * 6 -\"</span>;</span><br><span class=\"line\">        String[] strings=s2.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack=<span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class=\"line\">            String s = strings[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.matches(<span class=\"string\">\"\\\\d+\"</span>))&#123;</span><br><span class=\"line\">                stack.push(Integer.parseInt(s));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> num1=stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> num2=stack.pop();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">\"+\"</span>))&#123;</span><br><span class=\"line\">                    res=num1+num2;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.equals(<span class=\"string\">\"-\"</span>))&#123;</span><br><span class=\"line\">                    res=num2-num1;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.equals(<span class=\"string\">\"*\"</span>))&#123;</span><br><span class=\"line\">                    res=num1*num2;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res=num2/num1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                stack.push(res);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(stack.peek());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">(String val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val.equals(<span class=\"string\">\"+\"</span>)||val.equals(<span class=\"string\">\"-\"</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val.equals(<span class=\"string\">\"*\"</span>)||val.equals(<span class=\"string\">\"/\"</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">list</span><span class=\"params\">(String string)</span></span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; string.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch=string.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">                String addn=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                addn+=ch;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; string.length(); j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> ch2=string.charAt(j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch2&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch2&lt;=<span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">                        addn+=ch2;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        i=j-<span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                list.add(addn);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                list.add(<span class=\"string\">\"\"</span>+ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//生产逆波兰</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">produce</span><span class=\"params\">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class=\"line\">        Stack&lt;String&gt; stack1=<span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        List&lt;String&gt; list1=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            String s1=list.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1.matches(<span class=\"string\">\"\\\\d+\"</span>))&#123;</span><br><span class=\"line\">                list1.add(s1);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (stack1.isEmpty())&#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1.equals(<span class=\"string\">\"(\"</span>))&#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s1.equals(<span class=\"string\">\")\"</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack1.peek().equals(<span class=\"string\">\"(\"</span>))&#123;</span><br><span class=\"line\">                        list1.add(stack1.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack1.pop();<span class=\"comment\">//弹出左括号</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (priority(s1)&lt;=priority(stack1.peek()))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack1.isEmpty()&amp;&amp;priority(s1)&lt;=priority(stack1.peek()))&#123;</span><br><span class=\"line\">                        list1.add(stack1.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    stack1.push(s1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack1.isEmpty())&#123;</span><br><span class=\"line\">            list1.add(stack1.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"},{"name":"栈","slug":"栈","permalink":"http://yoursite.com/tags/栈/"}]},{"title":"栈计算器","date":"2019-07-11T15:23:41.000Z","path":"2019/07/11/栈计算器/","content":"<h1 id=\"构建栈计算器\"><a href=\"#构建栈计算器\" class=\"headerlink\" title=\"构建栈计算器\"></a>构建栈计算器</h1><h2 id=\"1-思路\"><a href=\"#1-思路\" class=\"headerlink\" title=\"1.思路\"></a>1.思路</h2><p>一个个扫描每个字节看尸数字还是符号，分别加入不同的栈构建两个栈，一个数字栈，一个符号栈，符号栈威空直接压入或者要压的元素比栈顶的元素优先级高，就压入，否则就弹出两个数字和一个符号，计算结果，然后压入数字栈，再用那个符号与栈顶的符号比较，直到结束。</p>\n<h2 id=\"2-bug如果是多位数，会变成多个个位数不是百位数等\"><a href=\"#2-bug如果是多位数，会变成多个个位数不是百位数等\" class=\"headerlink\" title=\"2.bug如果是多位数，会变成多个个位数不是百位数等\"></a>2.bug如果是多位数，会变成多个个位数不是百位数等</h2><p>解决方法，扫描是数字接着扫直到不是数字才停止</p>\n<h2 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3.代码\"></a>3.代码</h2><h3 id=\"3-1分辨是符号还是数字\"><a href=\"#3-1分辨是符号还是数字\" class=\"headerlink\" title=\"3.1分辨是符号还是数字\"></a>3.1分辨是符号还是数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isoper</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ch==<span class=\"string\">'-'</span>||ch==<span class=\"string\">'+'</span>||ch==<span class=\"string\">'/'</span>||ch==<span class=\"string\">'*'</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2符号优先级\"><a href=\"#3-2符号优先级\" class=\"headerlink\" title=\"3.2符号优先级\"></a>3.2符号优先级</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val==<span class=\"string\">'+'</span>||val==<span class=\"string\">'-'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val==<span class=\"string\">'/'</span>||val==<span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3计算两个弹出的结果\"><a href=\"#3-3计算两个弹出的结果\" class=\"headerlink\" title=\"3.3计算两个弹出的结果\"></a>3.3计算两个弹出的结果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">result</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2,<span class=\"keyword\">int</span> oper)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (oper)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</span><br><span class=\"line\">                res= num1+num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</span><br><span class=\"line\">                res= num2-num1;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>:</span><br><span class=\"line\">                res=num1*num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">                res=num2/num1;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4主要代码\"><a href=\"#3-4主要代码\" class=\"headerlink\" title=\"3.4主要代码\"></a>3.4主要代码</h3><blockquote>\n<h2 id=\"1-思路-1\"><a href=\"#1-思路-1\" class=\"headerlink\" title=\"1.思路\"></a>1.思路</h2><p>一个个扫描每个字节看尸数字还是符号，分别加入不同的栈构建两个栈，一个数字栈，一个符号栈，符号栈威空直接压入或者要压的元素比栈顶的元素优先级高，就压入，否则就弹出两个数字和一个符号，计算结果，然后压入数字栈，再用那个符号与栈顶的符号比较，直到结束。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Stack&lt;Integer&gt; num=<span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">      Stack&lt;Character&gt; oper=<span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        String express=<span class=\"string\">\"322+3*6-2\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; express.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch=express.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isoper(ch))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!oper.isEmpty())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> ch1=oper.peek();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (priority(ch)&lt;=priority(ch1))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> num1=num.pop();</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> num2=num.pop();</span><br><span class=\"line\">                        <span class=\"keyword\">char</span> ch3=oper.pop();</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> result=result(num1,num2,ch3);</span><br><span class=\"line\">                        num.push(result);</span><br><span class=\"line\">                        oper.push(ch);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        oper.push(ch);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    oper.push(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//num.push(ch-48);</span></span><br><span class=\"line\">                <span class=\"comment\">//如果出现多位数，不是分开加入</span></span><br><span class=\"line\">                String addn=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                addn+=ch;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt;express.length() ; j++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> ch2=express.charAt(j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isoper(ch2))&#123;</span><br><span class=\"line\">                        i=j-<span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//跳出去就是i+1，这个j会被跳过</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        addn+=ch2;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                num.push(Integer.parseInt(addn));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!oper.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num1=num.pop();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num2=num.pop();</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch=oper.pop();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> result=result(num1,num2,ch);</span><br><span class=\"line\">            num.push(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(num.peek());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"},{"name":"栈的应用","slug":"栈的应用","permalink":"http://yoursite.com/tags/栈的应用/"}]},{"title":"反转链表","date":"2019-07-11T14:10:25.000Z","path":"2019/07/11/反转链表/","content":"<h1 id=\"反转链表解决\"><a href=\"#反转链表解决\" class=\"headerlink\" title=\"反转链表解决\"></a>反转链表解决</h1><blockquote>\n<p>反转一个单链表。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL</span><br><span class=\"line\">&gt; 输出: <span class=\"number\">5</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>解决思路：先构建一个虚拟头节点dummyhead，通过遍历获取每一个节点cur，插入在虚拟头节点那个树上了，具体是cur.next=dummyhead.next,dummyhead.next=cur，这句话是把cur指向dummyhead的下一个节点（前一个节点），然后dummyhead再指向cur，cur再遍历最后返回dummyhead。next就行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">re</span><span class=\"params\">(ListNode head)</span></span>&#123;</span><br><span class=\"line\">        ListNode reverse=<span class=\"keyword\">new</span> ListNode(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        ListNode cur=head.next;</span><br><span class=\"line\">        ListNode next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            next=cur.next;</span><br><span class=\"line\">            cur.next=reverse.next;<span class=\"comment\">//把获取的这个节点指向rever节点的下一个</span></span><br><span class=\"line\">            <span class=\"comment\">//1  2  3原来的</span></span><br><span class=\"line\">            <span class=\"comment\">//0reverse</span></span><br><span class=\"line\">            <span class=\"comment\">//先是1.next=null，再0指向1   0  1  null</span></span><br><span class=\"line\">            reverse.next=cur;<span class=\"comment\">//重新链接，使revers节点下一个变成获取的</span></span><br><span class=\"line\">            cur=next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head.next=reverse.next;<span class=\"comment\">//reverse已经被取代了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"},{"name":"链表","slug":"链表","permalink":"http://yoursite.com/tags/链表/"}]},{"title":"循环链表","date":"2019-07-11T13:50:31.000Z","path":"2019/07/11/循环链表/","content":"<h1 id=\"解决约瑟夫环\"><a href=\"#解决约瑟夫环\" class=\"headerlink\" title=\"解决约瑟夫环\"></a>解决约瑟夫环</h1><blockquote>\n<p>约瑟夫环（<a href=\"https://baike.baidu.com/item/约瑟夫问题/3857719\" target=\"_blank\" rel=\"noopener\">约瑟夫问题</a>）是一个数学的应用问题：已知n个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依<a href=\"https://baike.baidu.com/item/此\" target=\"_blank\" rel=\"noopener\">此</a>规律重复下去，直到圆桌周围的人全部出列。通常解决这类问题时我们把编号从0~n-1，最后 [1]  结果+1即为原问题的解。</p>\n</blockquote>\n<p>首先定义一个环形链表，先初始化n个人，用for语句，形成环形链表，定义一个head，cur，boy（待插入的），从1开始，游戏就是1开始。如果j=1，就新建boy把boy当head，然后cur.next=cur自身形成环形。不是，就把cur.next=boy,boy.next=head,cur=boy,形成环。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode first=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">     ListNode help=<span class=\"keyword\">null</span>;<span class=\"comment\">//解决约瑟夫问题的节点</span></span><br><span class=\"line\">     ListNode cur=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;=n; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (i==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">             ListNode boy=<span class=\"keyword\">new</span> ListNode(i);</span><br><span class=\"line\">             first=boy;</span><br><span class=\"line\">             cur=boy;</span><br><span class=\"line\">             cur.next=first;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             ListNode boy=<span class=\"keyword\">new</span> ListNode(i);</span><br><span class=\"line\">             cur.next=boy;</span><br><span class=\"line\">             boy.next=first;</span><br><span class=\"line\">             cur=boy;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决思路，通过便利，使help在head的前一个，就是help.next=head,如果要改变开始顺序，就把head，help移动k-1次，从k开始</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">help=first;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (help.next!=first)&#123;</span><br><span class=\"line\">          help=help.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//初始化，在最初规定的位置</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; start- <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">          first=first.next;</span><br><span class=\"line\">          help=help.next;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决方法，当head！=help（不都为空)才成立，和初始化差不多，移动m-1，head=head.next，help。next=head，最终跳出循环，方法结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (first!=help) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                first=first.next;</span><br><span class=\"line\">                help=help.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(first.val);</span><br><span class=\"line\">            first=first.next;</span><br><span class=\"line\">            help.next=first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(first.val+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">josephu</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        ListNode first=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ListNode help=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ListNode cur=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;=n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                ListNode boy=<span class=\"keyword\">new</span> ListNode(i);</span><br><span class=\"line\">                first=boy;</span><br><span class=\"line\">                cur=boy;</span><br><span class=\"line\">                cur.next=first;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                ListNode boy=<span class=\"keyword\">new</span> ListNode(i);</span><br><span class=\"line\">                cur.next=boy;</span><br><span class=\"line\">                boy.next=first;</span><br><span class=\"line\">                cur=boy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        help=first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (help.next!=first)&#123;</span><br><span class=\"line\">            help=help.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//初始化，在最初规定的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; start- <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            first=first.next;</span><br><span class=\"line\">            help=help.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (first!=help) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">                first=first.next;</span><br><span class=\"line\">                help=help.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(first.val);</span><br><span class=\"line\">            first=first.next;</span><br><span class=\"line\">            help.next=first;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(first.val+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"First Blog","date":"2019-05-29T15:04:14.000Z","path":"2019/05/29/First-Blog/","content":"<h1 id=\"First-Blog\"><a href=\"#First-Blog\" class=\"headerlink\" title=\"First Blog\"></a>First Blog</h1><p><u><em>第一篇blog，大家好</em></u></p>\n","tags":[{"name":"日常","slug":"日常","permalink":"http://yoursite.com/tags/日常/"},{"name":"闲谈","slug":"闲谈","permalink":"http://yoursite.com/tags/闲谈/"}]},{"title":"Hello World","date":"2019-05-28T12:21:29.079Z","path":"2019/05/28/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","tags":[]}]