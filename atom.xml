<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-10-18T10:02:26.024Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>weijia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>换电脑更新hexo</title>
    <link href="http://yoursite.com/2022/10/18/%E6%8D%A2%E7%94%B5%E8%84%91%E6%9B%B4%E6%96%B0hexo/"/>
    <id>http://yoursite.com/2022/10/18/%E6%8D%A2%E7%94%B5%E8%84%91%E6%9B%B4%E6%96%B0hexo/</id>
    <published>2022-10-18T10:02:26.000Z</published>
    <updated>2022-10-18T10:02:26.024Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2022/10/18/test/"/>
    <id>http://yoursite.com/2022/10/18/test/</id>
    <published>2022-10-18T09:00:50.000Z</published>
    <updated>2022-10-18T09:00:50.972Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2022/10/18/hello-world/"/>
    <id>http://yoursite.com/2022/10/18/hello-world/</id>
    <published>2022-10-18T08:54:26.073Z</published>
    <updated>2022-10-18T08:54:26.073Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>5.3.11删除以x为根的子树</title>
    <link href="http://yoursite.com/2020/07/09/5-3-11%E5%88%A0%E9%99%A4%E4%BB%A5x%E4%B8%BA%E6%A0%B9%E7%9A%84%E5%AD%90%E6%A0%91/"/>
    <id>http://yoursite.com/2020/07/09/5-3-11%E5%88%A0%E9%99%A4%E4%BB%A5x%E4%B8%BA%E6%A0%B9%E7%9A%84%E5%AD%90%E6%A0%91/</id>
    <published>2020-07-09T07:30:12.000Z</published>
    <updated>2022-10-18T08:54:26.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>删除以x为根节点的所有子树，注意可能有多个为x值</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先递归删除所有节点</li><li>可能有多个值是x，所以用层序找出他们的父节点，然后删除x，同时设置父节点的子节点为空</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除每个以x为值的子树（可能有多个，父节点智能用层序找到）</span></span><br><span class="line"><span class="comment"> * 1.递归删除节点</span></span><br><span class="line"><span class="comment"> * 2.层序找到后调用1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">del</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">del</span>(root-&gt;right);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">    <span class="comment">//释放节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">searchDel</span><span class="params">(TreeNode *root,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val==x)&#123;</span><br><span class="line"><span class="comment">//        根节点就是，全删</span></span><br><span class="line">        <span class="built_in">del</span>(root);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    层序遍历找父亲</span></span><br><span class="line">    queue&lt;TreeNode*&gt; queue1;</span><br><span class="line">    queue1.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        TreeNode* cur=queue1.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//        如果是就删除</span></span><br><span class="line">        queue1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left-&gt;val==x)&#123;</span><br><span class="line">                <span class="built_in">del</span>(cur-&gt;left);</span><br><span class="line">                cur-&gt;left= <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                加入</span></span><br><span class="line">                queue1.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;right-&gt;val==x)&#123;</span><br><span class="line">                <span class="built_in">del</span>(cur-&gt;right);</span><br><span class="line">                cur-&gt;right= <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                加入</span></span><br><span class="line">                queue1.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;删除以x为根节点的所有子树，注意可能有多个为x值&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>王道5.3.7完全二叉树的判定</title>
    <link href="http://yoursite.com/2020/07/09/%E7%8E%8B%E9%81%935-3-7%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
    <id>http://yoursite.com/2020/07/09/%E7%8E%8B%E9%81%935-3-7%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%A4%E5%AE%9A/</id>
    <published>2020-07-09T01:29:25.000Z</published>
    <updated>2022-10-18T08:54:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个二叉树，确定它是否是一个完全二叉树。</p><p>百度百科中对完全二叉树的定义如下：</p><p>若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~ 2h 个节点。）</p><p>示例 1：</p><p>输入：[1,2,3,4,5,6] 输出：true 解释：最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后一层中的所有结点（{4,5,6}）都尽可能地向左。</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree">https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据层序遍历，设置flag标志是否出现过null，如果出现null，设置flag为1.如果存在当前节点，判断当前flag如果是1，就直接返回false，不是就把他的左右节点加入（无论他的左右节点是否存在），接着层序。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCompleteTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;TreeNode*&gt; queue1;</span><br><span class="line">    queue1.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//    是否出现null</span></span><br><span class="line">    <span class="keyword">while</span> (!queue1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        TreeNode* cur=queue1.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag==<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            queue1.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            queue1.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            queue1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            queue1.<span class="built_in">pop</span>();</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定一个二叉树，确定它是否是一个完全二叉树。&lt;/p&gt;
&lt;p&gt;百度百科中对完全二叉树的定义如下：&lt;/p&gt;
&lt;p&gt;若设二叉树的深</summary>
      
    
    
    
    
    <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>王道5.3.5</title>
    <link href="http://yoursite.com/2020/07/08/%E7%8E%8B%E9%81%935-3-5/"/>
    <id>http://yoursite.com/2020/07/08/%E7%8E%8B%E9%81%935-3-5/</id>
    <published>2020-07-08T04:33:26.000Z</published>
    <updated>2022-10-18T08:54:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例： 给定二叉树 [3,9,20,null,null,15,7]，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>&#x2F; \ 9 20 &#x2F; \ 15 7 返回它的最大深度 3 。</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>通过层序遍历来获取</li><li>queue记录当前层的所有元素，用for遍历这一层的元素加入他的左右节点，for结束就是一层结束</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    queue&lt;TreeNode*&gt; queue1;</span><br><span class="line">    queue1.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> n=queue1.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//        对这一层所有的元素进行加子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            TreeNode *cur=queue1.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left)&#123;</span><br><span class="line">                queue1.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;right)&#123;</span><br><span class="line">                queue1.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            queue1.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for结束后这一层就结束了</span></span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;说明</summary>
      
    
    
    
    
    <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>王道5.3_2_3非递归后续遍历</title>
    <link href="http://yoursite.com/2020/07/08/%E7%8E%8B%E9%81%935-3-2-3%E9%9D%9E%E9%80%92%E5%BD%92%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2020/07/08/%E7%8E%8B%E9%81%935-3-2-3%E9%9D%9E%E9%80%92%E5%BD%92%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/</id>
    <published>2020-07-08T03:39:50.000Z</published>
    <updated>2022-10-18T08:54:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个二叉树，返回它的 后序 遍历。</p><p>示例:</p><p>输入: [1,null,2,3] 1 \ 2 &#x2F; 3</p><p>输出: [3,2,1] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal">https://leetcode-cn.com/problems/binary-tree-postorder-traversal</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>构建模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( 栈非空 || p 非空)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( p 非空)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填写步骤</p><ol><li>p非空一直左压</li><li>然后，如果是空的，获取栈的顶端，如果右节点也是空的或者访问了的就是p.right&#x3D;pre，那么就直接访问当前的，并把p给pop出来，同时设置pre&#x3D;p，标志访问，*<strong>同时设置p&#x3D;null（否则下一次p会进入if判断，然后一直压）*</strong></li><li>如果不是空的，并且没有访问，那么把p&#x3D;p.right，他就会进入之前的if，一直左压</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    stack&lt;TreeNode*&gt; stack1;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vector;</span><br><span class="line"><span class="comment">//    两个一个判断，一个向前走</span></span><br><span class="line">    TreeNode *p=root;</span><br><span class="line">    TreeNode *pre= <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p||!stack1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span> (p)&#123;</span><br><span class="line"><span class="comment">//            如果p存在就一直左压</span></span><br><span class="line">            stack1.<span class="built_in">push</span>(p);</span><br><span class="line">            p=p-&gt;left;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            不存在先取top</span></span><br><span class="line">            p=stack1.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (!p-&gt;right||p-&gt;right==pre)&#123;</span><br><span class="line"><span class="comment">//                不存在，或者是之前访问的了</span></span><br><span class="line">                vector.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line"><span class="comment">//                并设置这个也是访问的</span></span><br><span class="line">                pre=p;</span><br><span class="line"><span class="comment">//                弹出当前的</span></span><br><span class="line">                stack1.<span class="built_in">pop</span>();</span><br><span class="line">                p= <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                设置为右边的，然后他访问右边的所有左树</span></span><br><span class="line">                p=p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vector;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定一个二叉树，返回它的 后序 遍历。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: [1,null,2,3] 1 \ 2 &amp;</summary>
      
    
    
    
    
    <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>kmp数组求法</title>
    <link href="http://yoursite.com/2020/07/05/kmp%E6%95%B0%E7%BB%84%E6%B1%82%E6%B3%95/"/>
    <id>http://yoursite.com/2020/07/05/kmp%E6%95%B0%E7%BB%84%E6%B1%82%E6%B3%95/</id>
    <published>2020-07-05T08:15:01.000Z</published>
    <updated>2022-10-18T08:54:26.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-next求法"><a href="#1-next求法" class="headerlink" title="1.next求法"></a>1.next求法</h2><p>例如s&#x3D;‘abcac’，首先从第一位a开始，设置a为0（如果是-1，后面的都不需要+1），第二个是b，b的前面子串是a，没有匹配的设置成0+1，接下来是c，前面子串是ab，同理设置为0+1，下一个a也是0+1，最后是c，前面子串是abca，他的前缀子串a和后缀a相等，设置成1+1，所以next&#x3D;{0,1,1,1,2}</p><h2 id="2-nextval求法"><a href="#2-nextval求法" class="headerlink" title="2.nextval求法"></a>2.nextval求法</h2><p>例如，s&#x3D;‘aaaab’，next&#x3D;{0，1,2,3,4,}，第一个是a，i&#x3D;0，设置naxtval&#x3D;0，i++.第二个是a与第一位相同，设置nextval【2】&#x3D;nextval【1】&#x3D;0，i++，第三个是a与第i个相同就是nextval【3】&#x3D;nextval【2】，第四个与第3个也相同，也是nv【4】&#x3D;nv【3】，第5位是b与第4位是a不同，i不加，nextval【5】&#x3D;next【5】&#x3D;4，所以nextval&#x3D;{0,0,0,0,4}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-next求法&quot;&gt;&lt;a href=&quot;#1-next求法&quot; class=&quot;headerlink&quot; title=&quot;1.next求法&quot;&gt;&lt;/a&gt;1.next求法&lt;/h2&gt;&lt;p&gt;例如s&amp;#x3D;‘abcac’，首先从第一位a开始，设置a为0（如果是-1，后面的都不需要</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>王道2_2_24</title>
    <link href="http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-24/"/>
    <id>http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-24/</id>
    <published>2020-07-01T13:44:57.000Z</published>
    <updated>2022-10-18T08:54:26.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">题目大意</a></h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p>说明：不允许修改给定的链表。</p><p>。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>快慢两个指针，fast走两步，slow走一步，如果相遇就是有环</li><li>假设head与入幻点相差a，入环与slow差b，fast比slow多走a+b（2倍关系），若slow再走a会到入幻点（因为入幻与slow差b），而且head走a也是入幻点，所以如果a&#x3D;slow，那么就是入幻点</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快慢指针，若相遇择优换</span></span><br><span class="line">        ListNode *fast=head,*slow=head;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(slow&amp;&amp;fast-&gt;next)&#123;</span><br><span class="line">            <span class="comment">//fast走两次，所以需要检查fast的下一个</span></span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            ListNode *p=head;</span><br><span class="line">            <span class="keyword">while</span>(p!=slow)&#123;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">                slow=slow-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle-ii/&quot;&gt;题目大意&lt;/a&gt;&lt;</summary>
      
    
    
    
    
    <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="王道数据结构" scheme="http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>王道2_2_25</title>
    <link href="http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-25/"/>
    <id>http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-25/</id>
    <published>2020-07-01T08:23:13.000Z</published>
    <updated>2022-10-18T08:54:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><blockquote><p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ， 将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p></blockquote><blockquote><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先找到中间节点，q用两次next，p用一次next，等q为空，那么p就是中间节点</li><li>对p后面的节点进行头插法，形成逆序，如123456，变成123465，*<strong>注意是465*</strong></li><li>然后进行断链，形成1234和65两条链</li><li>最后进行和链162534</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* p=head,*q=head,*r,*s=head;</span><br><span class="line">        <span class="keyword">if</span>(!head)            <span class="comment">//head为空，则直接退出</span></span><br><span class="line">            <span class="keyword">return</span> ;         </span><br><span class="line">        <span class="keyword">while</span>(q-&gt;next)&#123;      <span class="comment">//寻找中间结点</span></span><br><span class="line">            q=q-&gt;next;       <span class="comment">//p走一步</span></span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;next)</span><br><span class="line">              q=q-&gt;next;     <span class="comment">//q走两步</span></span><br><span class="line">        &#125;</span><br><span class="line">        q=p-&gt;next;           <span class="comment">//p所指结点为中间结点，q为后半段链表的首结点</span></span><br><span class="line">        p-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(q)&#123;            <span class="comment">//将链表后半段逆置</span></span><br><span class="line">            r=q-&gt;next;</span><br><span class="line">            q-&gt;next=p-&gt;next;</span><br><span class="line">            p-&gt;next=q;</span><br><span class="line">            q=r;</span><br><span class="line">        &#125;</span><br><span class="line">        q=p-&gt;next;            <span class="comment">//q指向后半段的第一个数据结点</span></span><br><span class="line">        p-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(q)&#123;             <span class="comment">//将链表后半段的结点插入到指定位置</span></span><br><span class="line">            r=q-&gt;next;        <span class="comment">//r指向后半段的下一个结点</span></span><br><span class="line">            q-&gt;next=s-&gt;next;  <span class="comment">//将q所指结点插入到s所指结点（head结点）之后</span></span><br><span class="line">            s-&gt;next=q;        </span><br><span class="line">            s=q-&gt;next;        <span class="comment">//s指向前半段的下一个插入点</span></span><br><span class="line">            q=r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个单链表 L：L0→L1→…→Ln-1→Ln ， 将其重新排列后变为： L0→Ln→L1→L</summary>
      
    
    
    
    
    <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="王道数据结构" scheme="http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>王道2_2_21</title>
    <link href="http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-21/"/>
    <id>http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-21/</id>
    <published>2020-07-01T08:23:08.000Z</published>
    <updated>2022-10-18T08:54:26.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>双指针，第一个p先走k部，然后q从head开始，pq同时走，直到p为空，q就是索要的节点</p><p>设p与结尾查x次，总长k+x次，p走了x次，也就是倒数k</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">kthToLast</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode* c=head;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            head=head.next;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            c=c.next;</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c.val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot;</summary>
      
    
    
    
    
    <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="王道数据结构" scheme="http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>王道2_2_6</title>
    <link href="http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-6/"/>
    <id>http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-6/</id>
    <published>2020-07-01T08:22:49.000Z</published>
    <updated>2022-10-18T08:54:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个头结点链表，按照从小到大排序</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据插入排序的思路和逆置链表的思路，首先先把头结点和他的next摘出p，让p为读取元链表的节点，pre为摘出来新链表的头结点，然后pre遍历，小于p.val的就继续，不然就是正常的插入。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">      <span class="type">int</span> val;</span><br><span class="line">      ListNode *next;</span><br><span class="line">      <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//本题思路插入排序，头插法类似，吧l取出，做个新链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">       ListNode *p=node.next,*q=p.next;</span><br><span class="line">       <span class="comment">//pre是断链后端头插法节点</span></span><br><span class="line"></span><br><span class="line">       ListNode *pre;</span><br><span class="line">       <span class="comment">//进行断链</span></span><br><span class="line">       p.next=<span class="literal">NULL</span>;</span><br><span class="line">       <span class="comment">//进行替换</span></span><br><span class="line">       p=r;</span><br><span class="line">       <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        r=p.next;</span><br><span class="line">        pre=node;</span><br><span class="line">        <span class="keyword">while</span>(pre.next!=null&amp;&amp;pre.next.val&lt;p.val)&#123;</span><br><span class="line">            pre=pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next=pre.next;</span><br><span class="line">        pre.next=p;</span><br><span class="line">        p=r;</span><br><span class="line">        <span class="comment">//进行下一轮</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定一个头结点链表，按照从小到大排序&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="王道数据结构" scheme="http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>a1010</title>
    <link href="http://yoursite.com/2020/06/25/a1010/"/>
    <id>http://yoursite.com/2020/06/25/a1010/</id>
    <published>2020-06-25T13:18:56.000Z</published>
    <updated>2022-10-18T08:54:26.073Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>a1009</title>
    <link href="http://yoursite.com/2020/06/25/a1009/"/>
    <id>http://yoursite.com/2020/06/25/a1009/</id>
    <published>2020-06-25T13:18:51.000Z</published>
    <updated>2022-10-18T08:54:26.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="a1009"><a href="#a1009" class="headerlink" title="a1009"></a><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805509540921344">a1009</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>多项式乘法。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>与前面的多项式加法基本类似。不过要构建两个双精度数组。第一个保存第一列的数字系数和指数。然后再还有一个哈希表。这个是保存第一列由哪几个数字是要进行指数相加的。第二列就首先是遍历这个哈希表。然后进行赋值。如果bi不是零，那么次数就加一。经过加法后，如果bi的值为0，那么次数就减一。，然后再次利用sort函数进行倒序输出就可以了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cin用多了超市</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span>  a[maxn],b[maxn];</span><br><span class="line">    <span class="built_in">fill</span>(a,a+maxn,<span class="number">0.0</span>);</span><br><span class="line">    <span class="built_in">fill</span>(b,b+maxn,<span class="number">0.0</span>);</span><br><span class="line">    <span class="type">int</span> temp[maxn];</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//    统计一共有多少个</span></span><br><span class="line">    <span class="type">int</span> a_index=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> hash[maxn];</span><br><span class="line">    <span class="type">int</span> total=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> n,zhishu;</span><br><span class="line">        <span class="type">double</span> xishu;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            cin&gt;&gt;zhishu&gt;&gt;xishu;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">                a[zhishu]=xishu;</span><br><span class="line">                temp[a_index++]=zhishu;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; a_index; ++k) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> weizhi=zhishu+temp[k];</span><br><span class="line">                    <span class="keyword">if</span> (b[weizhi]==<span class="number">0.0</span>)&#123;</span><br><span class="line">                        hash[count]=weizhi;</span><br><span class="line">                        count++;</span><br><span class="line"><span class="comment">//                        系数增加</span></span><br><span class="line">                        total++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    b[weizhi]+=xishu*a[temp[k]];</span><br><span class="line">                    <span class="keyword">if</span> (b[weizhi]==<span class="number">0.0</span>)&#123;</span><br><span class="line">                        total--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;total;</span><br><span class="line">    <span class="built_in">sort</span>(hash,hash+count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = count<span class="number">-1</span>; l &gt;=<span class="number">0</span> ; --l) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[hash[l]]!=<span class="number">0.0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d %0.1lf&quot;</span>,hash[l],b[hash[l]]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;a1009&quot;&gt;&lt;a href=&quot;#a1009&quot; class=&quot;headerlink&quot; title=&quot;a1009&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/problems/994</summary>
      
    
    
    
    
    <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
    <category term="水题" scheme="http://yoursite.com/tags/%E6%B0%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>a1008</title>
    <link href="http://yoursite.com/2020/06/25/a1008/"/>
    <id>http://yoursite.com/2020/06/25/a1008/</id>
    <published>2020-06-25T13:18:47.000Z</published>
    <updated>2022-10-18T08:54:26.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="a1008"><a href="#a1008" class="headerlink" title="a1008"></a><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805511923286016">a1008</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>求错电梯所需要花费的所有时间。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cin用多了超市</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">100100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n ;</span><br><span class="line">    <span class="type">int</span> cost[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;cost[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> total=cost[<span class="number">0</span>]*<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cost[j]&lt;cost[j<span class="number">-1</span>])&#123;</span><br><span class="line">            total+=(cost[j<span class="number">-1</span>]-cost[j])*<span class="number">4</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            total+=(cost[j]-cost[j<span class="number">-1</span>])*<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    total+=n*<span class="number">5</span>;</span><br><span class="line">    cout&lt;&lt;total;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;a1008&quot;&gt;&lt;a href=&quot;#a1008&quot; class=&quot;headerlink&quot; title=&quot;a1008&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/problems/994</summary>
      
    
    
    
    
    <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
    <category term="水题" scheme="http://yoursite.com/tags/%E6%B0%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>a1007</title>
    <link href="http://yoursite.com/2020/06/25/a1007/"/>
    <id>http://yoursite.com/2020/06/25/a1007/</id>
    <published>2020-06-25T13:18:43.000Z</published>
    <updated>2022-10-18T08:54:26.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="a1007"><a href="#a1007" class="headerlink" title="a1007"></a><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168">a1007</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出序列片段最大的和。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用动态规划,</p><h3 id="第一步构建d-p-初始值"><a href="#第一步构建d-p-初始值" class="headerlink" title="第一步构建d[p]初始值"></a>第一步构建d[p]初始值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="number">0</span>]=cost[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h3 id="第二步检查是不是所有的都是负数"><a href="#第二步检查是不是所有的都是负数" class="headerlink" title="第二步检查是不是所有的都是负数"></a>第二步检查是不是所有的都是负数</h3><p>如果是,那么直接返回0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cost[j]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 %d %d&quot;</span>,cost[<span class="number">0</span>],cost[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="写出转移态方程"><a href="#写出转移态方程" class="headerlink" title="写出转移态方程"></a>写出转移态方程</h3><p>如果d[j-1]+a[j]&gt;a[j],d[j]&#x3D;d[j-1]+a[j],否则d[j]&#x3D;a[j]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[k<span class="number">-1</span>]+cost[k]&gt;cost[k])&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">            d[k]=d[k<span class="number">-1</span>]+cost[k];</span><br><span class="line">            s[k]=s[k<span class="number">-1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            d[k]=cost[k];</span><br><span class="line"><span class="comment">//            更新起点</span></span><br><span class="line">            s[k]=k;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总体代码"><a href="#总体代码" class="headerlink" title="总体代码"></a>总体代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cin用多了超市</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">100100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> cost[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;cost[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    首先检查睡吧睡吧全是负数</span></span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cost[j]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 %d %d&quot;</span>,cost[<span class="number">0</span>],cost[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构建转移方程</span></span><br><span class="line"><span class="comment">//    首先是初始化d【0】=a【0】</span></span><br><span class="line"><span class="comment">//    然后是d【i】=a【i】或者是d【i】=d【i-1】+a【i】</span></span><br><span class="line">    <span class="type">int</span> d[n];</span><br><span class="line">    d[<span class="number">0</span>]=cost[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> s[n];</span><br><span class="line"><span class="comment">//    这是起点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[k<span class="number">-1</span>]+cost[k]&gt;cost[k])&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">            d[k]=d[k<span class="number">-1</span>]+cost[k];</span><br><span class="line">            s[k]=s[k<span class="number">-1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            d[k]=cost[k];</span><br><span class="line"><span class="comment">//            更新起点</span></span><br><span class="line">            s[k]=k;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt;n ; ++l) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[l]&gt;d[p])&#123;</span><br><span class="line">            p=l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;d[p]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;cost[s[p]]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;cost[p];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;a1007&quot;&gt;&lt;a href=&quot;#a1007&quot; class=&quot;headerlink&quot; title=&quot;a1007&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/problems/994</summary>
      
    
    
    
    
    <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
    <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>a1006</title>
    <link href="http://yoursite.com/2020/06/25/a1006/"/>
    <id>http://yoursite.com/2020/06/25/a1006/</id>
    <published>2020-06-25T13:18:40.000Z</published>
    <updated>2022-10-18T08:54:26.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="a1006"><a href="#a1006" class="headerlink" title="a1006"></a><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805516654460928">a1006</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出最早走了和最迟走的人。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>通过把时间转化为秒，然后再利用sought函数进行排序。就可以给出答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cin用多了超市</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">100100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    string  name;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">&#125;stu[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp11</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.start&lt;b.start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp12</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.end&gt;b.end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        string name;</span><br><span class="line">        <span class="type">int</span> h1,h2,m1,m2,s1,s2;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d %d:%d:%d&quot;</span>,&amp;h1,&amp;m1,&amp;s1,&amp;h2,&amp;m2,&amp;s2);</span><br><span class="line">        <span class="type">int</span> start=h1*<span class="number">3600</span>+m1*<span class="number">60</span>+s1;</span><br><span class="line">        <span class="type">int</span> end=h2*<span class="number">3600</span>+m2*<span class="number">60</span>+s2;</span><br><span class="line">        stu[i].name=name;</span><br><span class="line">        stu[i].start=start;</span><br><span class="line">        stu[i].end=end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(stu,stu+n,cmp11);</span><br><span class="line">    cout&lt;&lt;stu[<span class="number">0</span>].name;</span><br><span class="line">    <span class="built_in">sort</span>(stu,stu+n,cmp12);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;stu[<span class="number">0</span>].name;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;a1006&quot;&gt;&lt;a href=&quot;#a1006&quot; class=&quot;headerlink&quot; title=&quot;a1006&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/problems/994</summary>
      
    
    
    
    
    <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
    <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>a1005</title>
    <link href="http://yoursite.com/2020/06/25/a1005/"/>
    <id>http://yoursite.com/2020/06/25/a1005/</id>
    <published>2020-06-25T13:18:36.000Z</published>
    <updated>2022-10-18T08:54:26.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="a1005"><a href="#a1005" class="headerlink" title="a1005"></a><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805519074574336">a1005</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一个数，把它的和加起来。然后再用英语来表达出他的和。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>通过字符串来进行加减，然后再利用哈希表来进行查值输出。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cin用多了超市</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">100100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string string1;</span><br><span class="line">    cin&gt;&gt;string1;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; string1.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">        ans+=string1[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string string2=<span class="built_in">to_string</span>(ans);</span><br><span class="line">    string out[<span class="number">10</span>]=&#123;<span class="string">&quot;zero&quot;</span>,<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>,<span class="string">&quot;five&quot;</span>,<span class="string">&quot;six&quot;</span>,<span class="string">&quot;seven&quot;</span>,<span class="string">&quot;eight&quot;</span>,<span class="string">&quot;nine&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; string2.<span class="built_in">length</span>(); ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;out[string2[j]-<span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;out[string2[j]-<span class="string">&#x27;0&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;a1005&quot;&gt;&lt;a href=&quot;#a1005&quot; class=&quot;headerlink&quot; title=&quot;a1005&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/problems/994</summary>
      
    
    
    
    
    <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
    <category term="水题" scheme="http://yoursite.com/tags/%E6%B0%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>a1004</title>
    <link href="http://yoursite.com/2020/06/25/a1004/"/>
    <id>http://yoursite.com/2020/06/25/a1004/</id>
    <published>2020-06-25T13:18:31.000Z</published>
    <updated>2022-10-18T08:54:26.072Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>a1003</title>
    <link href="http://yoursite.com/2020/06/25/a1003/"/>
    <id>http://yoursite.com/2020/06/25/a1003/</id>
    <published>2020-06-25T13:18:27.000Z</published>
    <updated>2022-10-18T08:54:26.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="a1003"><a href="#a1003" class="headerlink" title="a1003"></a><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805523835109376">a1003</a></h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>根据距离人数构成最短路径，如果距离相等，选择人数多的，最后输出有几条最短路径和最多几个人</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>最短路径的代码正常写法</p><h3 id="0-首先初始化"><a href="#0-首先初始化" class="headerlink" title="0.首先初始化"></a>0.首先初始化</h3><p>G的所有值设置为maxn，距离d也设置maxn，visited设置false</p><h3 id="1-首先是选出距离的点"><a href="#1-首先是选出距离的点" class="headerlink" title="1.首先是选出距离的点"></a>1.首先是选出距离的点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> less=<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> min=maxn;</span><br><span class="line"><span class="comment">//        首先找到最小编</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i]&lt;min&amp;&amp;!visited[i])&#123;</span><br><span class="line">                less=i;</span><br><span class="line">                min=d[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="2-异常检查"><a href="#2-异常检查" class="headerlink" title="2.异常检查"></a>2.异常检查</h2><p>就是如果没找到最短的边那就结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (less==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="3-设置为访问过，并且通过这个点的周围所有点更新d"><a href="#3-设置为访问过，并且通过这个点的周围所有点更新d" class="headerlink" title="3.设置为访问过，并且通过这个点的周围所有点更新d"></a>3.设置为访问过，并且通过这个点的周围所有点更新d</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">visited[less]= <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//        通过这个最短点找与他相连的其他点，通过这个桥梁更新距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[j]&amp;&amp;G[less][j]!=maxn)&#123;</span><br><span class="line">                <span class="keyword">if</span> (d[less]+G[less][j]&lt;d[j])&#123;</span><br><span class="line">                    d[j]=d[less]+G[less][j];</span><br><span class="line">                    ren[j]=cost[j]+ren[less];</span><br><span class="line">                    times[j]=times[less];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (d[less]+G[less][j]==d[j])&#123;</span><br><span class="line">                    <span class="keyword">if</span> (cost[j]+ren[less]&gt;ren[j])&#123;</span><br><span class="line">                        ren[j]=cost[j]+ren[less];</span><br><span class="line">                    &#125;</span><br><span class="line">                    times[j]+=times[less];</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="4-完整的代码"><a href="#4-完整的代码" class="headerlink" title="4.完整的代码"></a>4.完整的代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cin用多了超市</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">100100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,c1,c2;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;c1&gt;&gt;c2;</span><br><span class="line">    <span class="type">int</span> cost[n];</span><br><span class="line">    <span class="type">int</span> d[n];</span><br><span class="line">    <span class="built_in">fill</span>(d,d+n,maxn);</span><br><span class="line">    <span class="type">bool</span> visited[n];</span><br><span class="line">    <span class="built_in">fill</span>(visited,visited+n, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> G[n][n];</span><br><span class="line">    <span class="built_in">fill</span>(G[<span class="number">0</span>],G[<span class="number">0</span>]+n*n,maxn);</span><br><span class="line">    <span class="type">int</span> ren[n];</span><br><span class="line">    <span class="built_in">fill</span>(ren,ren+n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;cost[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">        <span class="type">int</span> p,q,t;</span><br><span class="line">        cin&gt;&gt;p&gt;&gt;q&gt;&gt;t;</span><br><span class="line">        G[p][q]=G[q][p]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    d[c1]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> times[n];</span><br><span class="line">    <span class="built_in">fill</span>(times,times+n,<span class="number">0</span>);</span><br><span class="line">    times[c1]=<span class="number">1</span>;</span><br><span class="line">    ren[c1]=cost[c1];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line"><span class="comment">//        寻找最短的点</span></span><br><span class="line">        <span class="type">int</span> less=<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> min=maxn;</span><br><span class="line"><span class="comment">//        首先找到最小编</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i]&lt;min&amp;&amp;!visited[i])&#123;</span><br><span class="line">                less=i;</span><br><span class="line">                min=d[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        没找到直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (less==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[less]= <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//        通过这个最短点找与他相连的其他点，通过这个桥梁更新距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[j]&amp;&amp;G[less][j]!=maxn)&#123;</span><br><span class="line">                <span class="keyword">if</span> (d[less]+G[less][j]&lt;d[j])&#123;</span><br><span class="line">                    d[j]=d[less]+G[less][j];</span><br><span class="line">                    ren[j]=cost[j]+ren[less];</span><br><span class="line">                    times[j]=times[less];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (d[less]+G[less][j]==d[j])&#123;</span><br><span class="line">                    <span class="keyword">if</span> (cost[j]+ren[less]&gt;ren[j])&#123;</span><br><span class="line">                        ren[j]=cost[j]+ren[less];</span><br><span class="line">                    &#125;</span><br><span class="line">                    times[j]+=times[less];</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;times[c2]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ren[c2];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;a1003&quot;&gt;&lt;a href=&quot;#a1003&quot; class=&quot;headerlink&quot; title=&quot;a1003&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/problems/994</summary>
      
    
    
    
    
    <category term="pat" scheme="http://yoursite.com/tags/pat/"/>
    
    <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
    <category term="最短路径" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
</feed>
