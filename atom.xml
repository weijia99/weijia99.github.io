<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-11-11T03:16:41.473Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>weijia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>word技巧</title>
    <link href="http://yoursite.com/2022/11/11/word%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2022/11/11/word%E6%8A%80%E5%B7%A7/</id>
    <published>2022-11-11T02:18:29.000Z</published>
    <updated>2022-11-11T03:16:41.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="word操作技巧"><a href="#word操作技巧" class="headerlink" title="word操作技巧"></a>word操作技巧</h1><h2 id="3-1项目"><a href="#3-1项目" class="headerlink" title="3.1项目"></a>3.1项目</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681334072201668133406077.png"></p><ol><li>带圈字符在拼音那里</li><li>然后段落可以设置行间距</li><li>选择之后可以设置字体，字体又是可以分为大小，还有样式</li><li>项目符号就是指那个三角形，编号是123，直接右击都是可以使用</li><li>最后的是使用对齐方式，使用居中对齐</li><li>还有一件事，可以使用格式刷，对已经设置好样式的文本进行复制粘贴。不需要自己手动设置格式</li></ol><h2 id="3-2项目"><a href="#3-2项目" class="headerlink" title="3.2项目"></a>3.2项目</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681337809981668133780647.png"></p><p>这个主要是学习表格的使用</p><ol><li>前面的格式样式设置就不提了</li><li>然后是插入表格</li><li>插入之后</li><li>选择之后表单有对齐的功能，使用对齐</li><li>还有合并单元格</li><li>.进行设置行高还有列宽</li><li>之后就是wps的功能，使用公式进行求和还有求级，product（left），还有sum</li><li>之后设置格式，设置的格式有，人民币大写，还有一些其他</li><li>设置表格变宽，使用全选进行设置，设置表格样式，选择线性颜色，还有粗细度</li></ol><h2 id="3-3项目"><a href="#3-3项目" class="headerlink" title="3.3项目"></a>3.3项目</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681348640571668134864015.png"></p><p>目前，难度比较大的一个。</p><p>学习这个就是药了解到文本框的作用。使用普通的文本没有办法</p><ol><li>文本框进行插入，插入之后可以对他进行字体设置吗，还有字体效果，同事去除文本边框</li><li>接下来就是进行图片插入，插入之后药把文字进行浮动与上方，不然不好移动图片</li><li>之后就是手指下沉</li><li>还有设置文字的行间距这些，就可以skip</li><li>最后一个就是进行插入分栏，插入分栏，需要选择药进行芬兰的段落，还要进行选择分割线。注意不要选择到回车键</li><li>然后就是艺术字进行设置，艺术字插入之后就是对齐，还有一些其他效果。</li></ol><h2 id="3-4项目"><a href="#3-4项目" class="headerlink" title="3.4项目"></a>3.4项目</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681357919941668135791288.png"></p><p>本次项目还是实际作用比较大，这个对于文档排版还是很有帮助的</p><ol><li>首先就是设置标题，在进行设置标题之前，我们可以对标题格式进行自定义设置</li><li>然后就是对正文样式，还有标题2的样式进行设置</li><li>之后就是对每一本部分进行选择设置</li><li><strong>重点使用分节符，在第一页的最开头</strong>（这样可以分成，正文还有目录2节）‘</li><li>之后就是进行目录的插入，也要进行设置，在应用你进行插入目录</li><li>最后就是也没页脚之间的设置，使用页眉，可以定义最上面</li><li>使用页脚可以定义页码，在不同节的页码，我们就不连接上一节了。然后重新设置页码</li><li>最后就是插入封面，这个也是有点的</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些项目的操作，重点还是文本框的使用，行间距还有字体。对于我们使用的是最后一个项目，如何进行word排版，发出文章。还有那个字体和插入图片的意思。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;word操作技巧&quot;&gt;&lt;a href=&quot;#word操作技巧&quot; class=&quot;headerlink&quot; title=&quot;word操作技巧&quot;&gt;&lt;/a&gt;word操作技巧&lt;/h1&gt;&lt;h2 id=&quot;3-1项目&quot;&gt;&lt;a href=&quot;#3-1项目&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="word" scheme="http://yoursite.com/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>框架代码</title>
    <link href="http://yoursite.com/2022/11/08/%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2022/11/08/%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81/</id>
    <published>2022-11-08T02:30:13.000Z</published>
    <updated>2022-11-08T02:30:13.076Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>github的action</title>
    <link href="http://yoursite.com/2022/10/26/github%E7%9A%84action/"/>
    <id>http://yoursite.com/2022/10/26/github%E7%9A%84action/</id>
    <published>2022-10-26T09:58:55.000Z</published>
    <updated>2022-10-26T11:34:05.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="action-操作"><a href="#action-操作" class="headerlink" title="action 操作"></a>action 操作</h1><h2 id="1-workflow是什么"><a href="#1-workflow是什么" class="headerlink" title="1.workflow是什么"></a>1.workflow是什么</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667785330551666778532504.png"></p><p>假设你开发的java软件又bug,用户提交问题到issue,代码人员进行修复,修复完成,之后进行pull request,然后就进行合并,合并之后旧的进行测试才能发布,这就是一个流程</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667787870631666778786133.png"></p><h2 id="2-名称解释"><a href="#2-名称解释" class="headerlink" title="2.名称解释"></a>2.名称解释</h2><p><strong>event</strong></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667789010571666778900736.png"></p><p>就是我触发的条件(pull request)</p><p>workflow就是一系列自动化流程</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667789610561666778960997.png"></p><p>常用的cicd</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667791370571666779136700.png"></p><h2 id="3-为什么使用action"><a href="#3-为什么使用action" class="headerlink" title="3.为什么使用action"></a>3.为什么使用action</h2><p>因为你 不想配置环境变量   </p><h2 id="3-demo"><a href="#3-demo" class="headerlink" title="3.demo"></a>3.demo</h2><h3 id="3-1yaml教程"><a href="#3-1yaml教程" class="headerlink" title="3.1yaml教程"></a>3.1yaml教程</h3><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667809480571666780947313.png"></p><p>使用tab就是一个对象,使用kv来记录纸</p><p>使用过 list记录多个,那就需要-</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667810550641666781054310.png"></p><h3 id="3-2demo简介"><a href="#3-2demo简介" class="headerlink" title="3.2demo简介"></a>3.2demo简介</h3><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667812140551666781213509.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667812860561666781285494.png"></p><ol><li>name是可选</li><li>on就是event,单位需要出发的事件</li></ol><p>jobs,就是执行的事件</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667813680551666781367823.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667815090571666781508152.png"></p><p>到这一步就是进行代码检查,使用github编译好的checkout</p><p>每一个-,代表一个list,就代表一次操作</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667816150561666781614964.png"></p><blockquote><p>uses,时使用别人的action,run是自己执行linux命令</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667816900551666781689860.png"></p><h2 id="4-cicd在哪里执行"><a href="#4-cicd在哪里执行" class="headerlink" title="4.cicd在哪里执行"></a>4.cicd在哪里执行</h2><p>在github的服务器上 </p><p>jobs是并行的,如果publish需要build,那就要使用关键字,need</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>首先 on 是触发条件(push,pull)</p><p>接下来就是正常的jobs</p><p>首先第一步就是checkout,第二部就是设置值环境时候用java,然后就是读取使用run,之后就clone文件,并且进入,之后就是build,一般使用gradle,并且权限777</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667840363551666784036329.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;action-操作&quot;&gt;&lt;a href=&quot;#action-操作&quot; class=&quot;headerlink&quot; title=&quot;action 操作&quot;&gt;&lt;/a&gt;action 操作&lt;/h1&gt;&lt;h2 id=&quot;1-workflow是什么&quot;&gt;&lt;a href=&quot;#1-workflow是什</summary>
      
    
    
    
    
    <category term="action" scheme="http://yoursite.com/tags/action/"/>
    
  </entry>
  
  <entry>
    <title>元编程</title>
    <link href="http://yoursite.com/2022/10/25/%E5%85%83%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2022/10/25/%E5%85%83%E7%BC%96%E7%A8%8B/</id>
    <published>2022-10-25T11:23:57.000Z</published>
    <updated>2022-10-26T00:49:18.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h1><h2 id="1-概念解释"><a href="#1-概念解释" class="headerlink" title="1.概念解释"></a>1.概念解释</h2><p>就相当云java构建spring项目,进行build.使用规则来定义如何使用这些文件来的到,jar包</p><p>cmake 比make跟smart,cmake查找本地的哭,make只会自己寻找文件</p><p>使用make来进行build固件,make寻找makefile来进行make </p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666973194161666697319373.png"></p><p>上面是需按照那两个文件,然后接下来才是进行编译代码</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666974668991666697465989.png"></p><h2 id="2-ci持续集成"><a href="#2-ci持续集成" class="headerlink" title="2.ci持续集成"></a>2.ci持续集成</h2><p>自动进行构建,每一个event出发一个action,自动调用</p><p>例如本文的网站,当我写好一个markdwon文件,然后使用push操作,github就会进行ci,并且生成网页</p><h2 id="3-测速"><a href="#3-测速" class="headerlink" title="3.测速"></a>3.测速</h2><p>单元测试,值测试某一个功能</p><p>集成测试,测试代码交互之间是不是又问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;元编程&quot;&gt;&lt;a href=&quot;#元编程&quot; class=&quot;headerlink&quot; title=&quot;元编程&quot;&gt;&lt;/a&gt;元编程&lt;/h1&gt;&lt;h2 id=&quot;1-概念解释&quot;&gt;&lt;a href=&quot;#1-概念解释&quot; class=&quot;headerlink&quot; title=&quot;1.概念解释&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git控制</title>
    <link href="http://yoursite.com/2022/10/25/git%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2022/10/25/git%E6%8E%A7%E5%88%B6/</id>
    <published>2022-10-25T02:26:53.000Z</published>
    <updated>2022-10-25T07:57:17.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h1><h2 id="1-模型"><a href="#1-模型" class="headerlink" title="1.模型"></a>1.模型</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666653059061666665304945.png"></p><p>模型树。对于文件夹，叫做tree，对于文件叫做blob，根目录是root</p><p>git工作流</p><p>使用分支branch，还有merge合并</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666656019051666665601612.png"></p><p>元数据：作者，message</p><p><strong>数据模型</strong></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666657919001666665791145.png"></p><p>定义的文件为数组，tree是hash隐射，然后commit是要提交的stack</p><p>一个obejcect是一个版本，维护，使用hash进行映射</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666659669051666665966713.png"></p><h2 id="2git-demo"><a href="#2git-demo" class="headerlink" title="2git demo"></a>2git demo</h2><p>暂存区</p><blockquote><p>为什么add和commit分开</p></blockquote><p>因为add可能已经完成了一个新的feature，还有一些没有完成，只提交完成的就可以进行发布</p><p>也可能不想上传日志文件</p><p>git checkout 进行版本切换回退 </p><p>git diff进行代码比较</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666813658981666681365480.png"></p><p>可以比较不同时期某个文件的的区别</p><h2 id="3-分支"><a href="#3-分支" class="headerlink" title="3.分支"></a>3.分支</h2><p>git branch cat，新建一个cat分支</p><p> <img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666817818981666681781631.png"></p><p>可以之间checkout -b创新建新分支，然后进去</p><p>回到什么功能都没有的master分支，进行合并cat和dog分支</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666821539001666682152951.png"></p><p>首先git merge cat</p><p>然后出现合并不兼容的情况（conflic）</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666822748981666682274329.png"></p><p>因为那个if判断不对</p><p>最终结果</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666824468971666682446494.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git操作&quot;&gt;&lt;a href=&quot;#git操作&quot; class=&quot;headerlink&quot; title=&quot;git操作&quot;&gt;&lt;/a&gt;git操作&lt;/h1&gt;&lt;h2 id=&quot;1-模型&quot;&gt;&lt;a href=&quot;#1-模型&quot; class=&quot;headerlink&quot; title=&quot;1.模型&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>acw数论</title>
    <link href="http://yoursite.com/2022/10/24/acw%E6%95%B0%E8%AE%BA/"/>
    <id>http://yoursite.com/2022/10/24/acw%E6%95%B0%E8%AE%BA/</id>
    <published>2022-10-24T13:31:35.000Z</published>
    <updated>2022-10-25T02:27:12.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-数学知识"><a href="#4-数学知识" class="headerlink" title="4.数学知识"></a>4.数学知识</h1><h2 id="4-1质数"><a href="#4-1质数" class="headerlink" title="4.1质数"></a>4.1质数</h2><h3 id="4-1-1基本算法"><a href="#4-1-1基本算法" class="headerlink" title="4.1.1基本算法"></a>4.1.1基本算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n/;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2分解质因数"><a href="#4-1-2分解质因数" class="headerlink" title="4.1.2分解质因数"></a>4.1.2分解质因数</h3><p>从小到大尝试每一个因素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void divide(int n)&#123;</span><br><span class="line">for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">if(n%i==0)&#123;</span><br><span class="line">int s=0;</span><br><span class="line">#求出i的次数</span><br><span class="line">while(n%i==0)&#123;</span><br><span class="line">n/=s;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化版本</p><p>n中至多质保函一个最多大于根号n的因子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void divide(int n)&#123;</span><br><span class="line">for(int i=2;i&lt;=n/i;i++)&#123;</span><br><span class="line">if(n%i==0)&#123;</span><br><span class="line">int s=0;</span><br><span class="line">#求出i的次数</span><br><span class="line">while(n%i==0)&#123;</span><br><span class="line">n/=i;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">#这个循环是求出质数i的次数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(n&gt;1)print(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3筛质数"><a href="#4-1-3筛质数" class="headerlink" title="4.1.3筛质数"></a>4.1.3筛质数</h3><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666190608981666619060512.png"></p><p>筛选倍数，直到n，是质数的倍数的直接pass</p><p>核心思想，反思倍数的，坑定不是质数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void get_prime(int n)&#123;</span><br><span class="line">for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">if(!st[i])&#123;</span><br><span class="line">prime[cnt++]=i;</span><br><span class="line">&#125;</span><br><span class="line">for(int j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class="line">st[i]=true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>下面这个是线性筛法</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666205978511666620597830.png"></p><p>为什么是正确的，n只会倍最小质因子甩掉。从小到大枚举质数，每次筛掉i和质数</p><p><strong>当break发生意味着prime【j】是i的最小质因子，因此primes【j】</strong></p><p>第一次出现摸他为0 ，一定是质因子</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666209365431666620936520.png"></p><p>如果摸不是0，pj也一定是pj*i的最小质因子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-数学知识&quot;&gt;&lt;a href=&quot;#4-数学知识&quot; class=&quot;headerlink&quot; title=&quot;4.数学知识&quot;&gt;&lt;/a&gt;4.数学知识&lt;/h1&gt;&lt;h2 id=&quot;4-1质数&quot;&gt;&lt;a href=&quot;#4-1质数&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="算法基础" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>bilibili视频下载</title>
    <link href="http://yoursite.com/2022/10/24/bilibili%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2022/10/24/bilibili%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/</id>
    <published>2022-10-24T13:02:31.000Z</published>
    <updated>2022-10-24T13:03:54.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-哔哩哔哩下载"><a href="#1-哔哩哔哩下载" class="headerlink" title="1.哔哩哔哩下载"></a>1.哔哩哔哩下载</h1><p>发现一个好用的工具,直接输入连接,就可以批量下载哔哩哔哩视频</p><p>推荐大家star</p><p><a href="https://github.com/leiurayer/downkyi">leiurayer&#x2F;downkyi: 哔哩下载姬downkyi，B站视频下载工具，支持批量下载，支持8K、HDR、杜比视界，提供工具箱（音视频提取、去水印等）。 (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-哔哩哔哩下载&quot;&gt;&lt;a href=&quot;#1-哔哩哔哩下载&quot; class=&quot;headerlink&quot; title=&quot;1.哔哩哔哩下载&quot;&gt;&lt;/a&gt;1.哔哩哔哩下载&lt;/h1&gt;&lt;p&gt;发现一个好用的工具,直接输入连接,就可以批量下载哔哩哔哩视频&lt;/p&gt;
&lt;p&gt;推荐大家star</summary>
      
    
    
    
    
    <category term="使用工具" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="bilibili" scheme="http://yoursite.com/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>command教程</title>
    <link href="http://yoursite.com/2022/10/24/command%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2022/10/24/command%E6%95%99%E7%A8%8B/</id>
    <published>2022-10-24T09:39:20.000Z</published>
    <updated>2022-10-24T11:28:07.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令行教程"><a href="#命令行教程" class="headerlink" title="命令行教程"></a>命令行教程</h1><p>工作流，终端复用，dotfile配置，还有远程服务器</p><h2 id="2-工作流"><a href="#2-工作流" class="headerlink" title="2.工作流"></a>2.工作流</h2><p>ctrl+c是打断程序</p><p>ctrl+z是暂停</p><p>ctrl+\是结束程序 </p><p><strong>使用&amp;表示程序后台执行</strong></p><p>使用jobs可以查看当前执行的进程状态，</p><p>使用bg %1，回复倍暂停的jobs</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666049269001666604925973.png"></p><p>产生式挂起进程使用nohup</p><h2 id="2-tmux"><a href="#2-tmux" class="headerlink" title="2.tmux"></a>2.tmux</h2><p>一般使用screen，不过也学习一下</p><p>三大核心，session，windows，panel</p><ul><li><p>会话</p><p>- 每个会话都是一个独立的工作区，其中包含一个或多个窗口</p><ul><li><code>tmux</code> 开始一个新的会话</li><li><code>tmux new -s NAME</code> 以指定名称开始一个新的会话</li><li><code>tmux ls</code> 列出当前所有会话</li><li>在 <code>tmux</code> 中输入 <code>&lt;C-b&gt; d</code> ，将当前会话分离</li><li><code>tmux a</code> 重新连接最后一个会话。您也可以通过 <code>-t</code> 来指定具体的会话</li></ul></li></ul><p>windows&#x3D;&#x3D;tab（浏览器的窗口）</p><ul><li><p>会话</p><p>- 每个会话都是一个独立的工作区，其中包含一个或多个窗口</p><ul><li><code>tmux</code> 开始一个新的会话</li><li><code>tmux new -s NAME</code> 以指定名称开始一个新的会话</li><li><code>tmux ls</code> 列出当前所有会话</li><li>在 <code>tmux</code> 中输入 <code>&lt;C-b&gt; d</code> ，将当前会话分离</li><li><code>tmux a</code> 重新连接最后一个会话。您也可以通过 <code>-t</code> 来指定具体的会话</li></ul></li></ul><p>ctrl+a （n，是下一个，p是之前一个tmux窗口</p><h2 id="3-重命名"><a href="#3-重命名" class="headerlink" title="3.重命名"></a>3.重命名</h2><p>alias把长命令进行缩短</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666058858981666605885498.png"></p><p>alias gc&#x3D;“git clone”</p><p>如何写入重命名，关闭终端，重命名就结束了</p><p><strong>直接写入到dotfiles</strong></p><h2 id="4-符号链接"><a href="#4-符号链接" class="headerlink" title="4.符号链接"></a>4.符号链接</h2><p>就是和快捷方式一样</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666064699001666606468924.png"></p><h2 id="5-ssh"><a href="#5-ssh" class="headerlink" title="5.ssh"></a>5.ssh</h2><p>这个已经熟练了</p><p>、</p><p>还有设置别名，在ssh里面进行配置，就不用一个刚刚输入IP了</p><h2 id="6-homework"><a href="#6-homework" class="headerlink" title="6.homework"></a>6.homework</h2><h3 id="6-1任务控制"><a href="#6-1任务控制" class="headerlink" title="6.1任务控制"></a>6.1任务控制</h3><blockquote><ol><li>我们可以使用类似 <code>ps aux | grep</code> 这样的命令来获取任务的 pid ，然后您可以基于pid 来结束这些进程。但我们其实有更好的方法来做这件事。在终端中执行 <code>sleep 10000</code> 这个任务。然后用 <code>Ctrl-Z</code> 将其切换到后台并使用 <code>bg</code>来继续允许它。现在，使用 <a href="https://www.man7.org/linux/man-pages/man1/pgrep.1.html"><code>pgrep</code></a> 来查找 pid 并使用 <a href="https://www.man7.org/linux/man-pages/man1/pgrep.1.html"><code>pkill</code></a> 结束进程而不需要手动输入pid。(提示：: 使用 <code>-af</code> 标记)。</li></ol></blockquote><p>这一题使用的pger&#x3D;&#x3D;ps aux|grep python</p><p>pgrep python</p><p>使用prep sleep可以得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sleep 10000</span><br><span class="line">Ctrl-Z</span><br><span class="line">bg</span><br><span class="line"></span><br><span class="line">pgrep sleep </span><br><span class="line"></span><br><span class="line">pkill  -af sleep</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li><p>如果您希望某个进程结束后再开始另外一个进程， 应该如何实现呢？在这个练习中，我们使用 <code>sleep 60 &amp;</code> 作为先执行的程序。一种方法是使用 <a href="http://man7.org/linux/man-pages/man1/wait.1p.html"><code>wait</code></a> 命令。尝试启动这个休眠命令，然后待其结束后再执行 <code>ls</code> 命令。</p><p>但是，如果我们在不同的 bash 会话中进行操作，则上述方法就不起作用了。因为 <code>wait</code> 只能对子进程起作用。之前我们没有提过的一个特性是，<code>kill</code> 命令成功退出时其状态码为 0 ，其他状态则是非0。<code>kill -0</code> 则不会发送信号，但是会在进程不存在时返回一个不为0的状态码。请编写一个 bash 函数 <code>pidwait</code> ，它接受一个 pid 作为输入参数，然后一直等待直到该进程结束。您需要使用 <code>sleep</code> 来避免浪费 CPU 性能。</p></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令行教程&quot;&gt;&lt;a href=&quot;#命令行教程&quot; class=&quot;headerlink&quot; title=&quot;命令行教程&quot;&gt;&lt;/a&gt;命令行教程&lt;/h1&gt;&lt;p&gt;工作流，终端复用，dotfile配置，还有远程服务器&lt;/p&gt;
&lt;h2 id=&quot;2-工作流&quot;&gt;&lt;a href=&quot;#2-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vim教程</title>
    <link href="http://yoursite.com/2022/10/22/vim%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2022/10/22/vim%E6%95%99%E7%A8%8B/</id>
    <published>2022-10-22T07:08:51.000Z</published>
    <updated>2022-10-22T08:05:04.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h1><h2 id="1-模式区分"><a href="#1-模式区分" class="headerlink" title="1.模式区分"></a>1.模式区分</h2><p>分为normal还有iinsert</p><p>norm是倒过来,insert是输入</p><p>:这个是是command命令模式</p><h2 id="2-缓冲区和窗口"><a href="#2-缓冲区和窗口" class="headerlink" title="2.缓冲区和窗口"></a>2.缓冲区和窗口</h2><p>vim也开开启多个tab</p><p>使用:sp可以进行分区</p><p>使用:tabnew创建一个行窗口,一个窗口多个buffer</p><p>使用:qa进行全部关闭窗口</p><h2 id="3-文本编辑"><a href="#3-文本编辑" class="headerlink" title="3.文本编辑"></a>3.文本编辑</h2><p>使用w是向后,b是向前,e是单词结尾,使用s开头,$是结尾</p><p>浏览模式,使用u(向上),使用D(向下)</p><p>查找模式使用f,后面加要查找的单词</p><blockquote><p>以上都是normal模式</p></blockquote><hr><p>下面是insert模式</p><p>使用d进行删除,使用u进行undo,删除到结尾就是de(delete end)</p><p>dd删除一行,cc是删除后给一个空白的给你(d和c差不多)</p><p>u是undo, ctrl+r是重做</p><p>y是粘贴,p是赋值</p><h2 id="4-visual模式"><a href="#4-visual模式" class="headerlink" title="4.visual模式"></a>4.visual模式</h2><p>这个就是进行多选使用的,按住v进入</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16664246597541666424658817.png"></p><p>然后使用y进行赋值,p紧张粘贴</p><h2 id="5-计数模式"><a href="#5-计数模式" class="headerlink" title="5.计数模式"></a>5.计数模式</h2><p>就是使用4j,线下跳转4行,就是前面加上数字</p><h2 id="6-修饰词"><a href="#6-修饰词" class="headerlink" title="6.修饰词"></a>6.修饰词</h2><p>i是inside ,a是all</p><p>使用da(,会删除所有的值,在(,包括() </p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16664250417491666425041531.png"></p><p>使用&#x2F;进行查找,n进行查找下一个符合的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vim基础&quot;&gt;&lt;a href=&quot;#vim基础&quot; class=&quot;headerlink&quot; title=&quot;vim基础&quot;&gt;&lt;/a&gt;vim基础&lt;/h1&gt;&lt;h2 id=&quot;1-模式区分&quot;&gt;&lt;a href=&quot;#1-模式区分&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shell教程</title>
    <link href="http://yoursite.com/2022/10/19/shell%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2022/10/19/shell%E6%95%99%E7%A8%8B/</id>
    <published>2022-10-19T02:44:36.000Z</published>
    <updated>2022-10-20T07:58:32.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-shell脚本"><a href="#0-shell脚本" class="headerlink" title="0.shell脚本"></a>0.shell脚本</h1><h2 id="0-1shell赋值"><a href="#0-1shell赋值" class="headerlink" title="0.1shell赋值"></a>0.1shell赋值</h2><p>一般使用双一号,这样可以进行输出</p><p>使用方法和python的f差不多,直接使用$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo=bar</span><br><span class="line">echo &quot;$foo&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印 bar</span></span><br><span class="line">echo &#x27;$foo&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印 <span class="variable">$foo</span></span></span><br></pre></td></tr></table></figure><p><img src="/.com//code\site\weijia99.github.io\source_posts\shell教程\image-20221019203249378.png" alt="image-20221019203249378"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661831919761666183191589.png"></p><h2 id="0-2shell进行函数变换"><a href="#0-2shell进行函数变换" class="headerlink" title="0.2shell进行函数变换"></a>0.2shell进行函数变换</h2><p>如何使用sh脚本,直接加载到source,使用source保存,然后直接运行函数</p><p>&amp;1-9是保存的函数变量,</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661833769821666183376434.png"></p><blockquote><p>经常会遇到权限不够的问题,写入,或者读取,那么只要使用sudo!!,就可以执行上面一个权限不够的命令</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661835669731666183566863.png"></p><p>grep是查找函数 ,$?代表是不是有错误,正确就是0(没有错误,0个错误)</p><p>这里的||的意思是第一个不对,就执行第二个</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661838109721666183810355.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661839759721666183975015.png"></p><p>目前看来这里的||还有&amp;&amp; 都是相反的,一个是只有,一个是或者</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661840729731666184072240.png"></p><p><strong>使用()代表的是全局变量,局部自定义的变量不需要括号,linux命令</strong></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661843409731666184340326.png"></p><p>例题讲解</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661844299741666184429787.png"></p><p>0代表函数的名称, &amp;#代表参数的数量(#是number的意思) $$代表当前运行的pid </p><ul><li><code>$@</code> - 所有参数 读取参数</li></ul><p>-ne是不相等就代表错误</p><p>for循环所有的参数,然后进行grep查找,有就进行写入,没有就有错误,然后进行追加</p><ul><li><blockquote><p>花括号<code>&#123;&#125;</code> - 当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。</p></blockquote></li></ul><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661858169731666185816168.png"></p><p>直接进行扩展,可以建立多个文件,或者是少些几个命令</p><p>同时花括号还宽裕使用{a..b},遵循笛卡尔乘积,使用{a…h}表示a到h</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661859079801666185907753.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">convert image.&#123;png,jpg&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会展开为</span></span><br><span class="line">convert image.png image.jpg</span><br><span class="line"></span><br><span class="line">cp /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会展开为</span></span><br><span class="line">cp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以结合通配使用</span></span><br><span class="line">mv *&#123;.py,.sh&#125; folder</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会移动所有 *.py 和 *.sh 文件</span></span><br><span class="line"></span><br><span class="line">mkdir foo bar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面命令会创建foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h这些文件</span></span><br><span class="line">touch &#123;foo,bar&#125;/&#123;a..h&#125;</span><br><span class="line">touch foo/x bar/y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较文件夹 foo 和 bar 中包含文件的不同</span></span><br><span class="line">diff &lt;(ls foo) &lt;(ls bar)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt; x</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">---</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt; y</span></span><br></pre></td></tr></table></figure><p>shell最开始是指定运行的文件位置</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661863736751666186372698.png"></p><h1 id="1-shell工具"><a href="#1-shell工具" class="headerlink" title="1.shell工具"></a>1.shell工具</h1><h2 id="1-1查询使用帮助"><a href="#1-1查询使用帮助" class="headerlink" title="1.1查询使用帮助"></a>1.1查询使用帮助</h2><ol><li>使用-h</li><li>或者直接man rm（man是Manuel</li></ol><h2 id="1-2查找文件"><a href="#1-2查找文件" class="headerlink" title="1.2查找文件"></a>1.2查找文件</h2><p>顾名思义就是使用使用find</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -name src -type d </span><br><span class="line">#这是查找名称为src的文件夹，type可以分为d，f，f是文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -path */test/*.py -type f</span><br><span class="line">#这是查找路径</span><br></pre></td></tr></table></figure><p>还有其他的参数 -exec就是执行命令，找到后删除</p><p>fd还可以使用</p><p>ctrl+r 也是可以进行查找使用的快捷键</p><h1 id="2-课后练习"><a href="#2-课后练习" class="headerlink" title="2.课后练习"></a>2.课后练习</h1><h2 id="2-1ls命令"><a href="#2-1ls命令" class="headerlink" title="2.1ls命令"></a>2.1ls命令</h2><blockquote><ol><li><p>阅读 <a href="https://man7.org/linux/man-pages/man1/ls.1.html"><code>man ls</code></a> ，然后使用<code>ls</code> 命令进行如下操作：</p><ul><li>所有文件（包括隐藏文件）</li><li>文件打印以人类可以理解的格式输出 (例如，使用454M 而不是 454279954)</li><li>文件以最近访问顺序排序</li><li>以彩色文本显示输出结果</li></ul><p>典型输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--   1 user group 1.1M Jan 14 09:53 baz</span><br><span class="line">drwxr-xr-x   5 user group  160 Jan 14 09:53 .</span><br><span class="line">-rw-r--r--   1 user group  514 Jan 14 06:42 bar</span><br><span class="line">-rw-r--r--   1 user group 106M Jan 13 12:12 foo</span><br><span class="line">drwx------+ 47 user group 1.5K Jan 12 18:08 ..</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>1.直接使用ls -a</p><p>2.搜索打印就是-h</p><p><img src="https://files.catbox.moe/kuxnto.png"></p><p>3.直接搜索time</p><p><img src="https://files.catbox.moe/a0vaqn.png"></p><p>4.直接搜索color</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16662495226761666249521717.png"></p><h2 id="2-2shell函数"><a href="#2-2shell函数" class="headerlink" title="2.2shell函数"></a>2.2shell函数</h2><blockquote><ol><li>编写两个bash函数 <code>marco</code> 和 <code>polo</code> 执行下面的操作。 每当你执行 <code>marco</code> 时，当前的工作目录应当以某种形式保存，当执行 <code>polo</code> 时，无论现在处在什么目录下，都应当 <code>cd</code> 回到当时执行 <code>marco</code> 的目录。 为了方便debug，你可以把代码写在单独的文件 <code>marco.sh</code> 中，并通过 <code>source marco.sh</code>命令，（重新）加载函数。</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">这里忘了加开始解释的地址</span></span><br><span class="line"> marco()&#123;</span><br><span class="line">     echo &quot;$(pwd)&quot; &gt; $HOME/marco_history.log</span><br><span class="line">     echo &quot;save pwd $(pwd)&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> polo()&#123;</span><br><span class="line">     cd &quot;$(cat &quot;$HOME/marco_history.log&quot;)&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-3错误检验"><a href="#2-3错误检验" class="headerlink" title="2.3错误检验"></a>2.3错误检验</h2><blockquote><p>假设您有一个命令，它很少出错。因此为了在出错时能够对其进行调试，需要花费大量的时间重现错误并捕获输出。 编写一段bash脚本，运行如下的脚本直到它出错，将它的标准输出和标准错误流记录到文件，并在最后输出所有内容。 加分项：报告脚本在失败前共运行了多少次。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">n=$(( RANDOM % 100 ))</span><br><span class="line"></span><br><span class="line">if [[ n -eq 42 ]]; then</span><br><span class="line">    echo &quot;Something went wrong&quot;</span><br><span class="line">    &gt;&amp;2 echo &quot;The error was using magic numbers&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Everything went according to plan&quot;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">count=1</span><br><span class="line"></span><br><span class="line"> while true</span><br><span class="line"> do</span><br><span class="line">     ./buggy.sh 2&gt; out.log</span><br><span class="line">     if [[ $? -ne 0 ]]; then</span><br><span class="line">         echo &quot;failed after $count times&quot;</span><br><span class="line">         cat out.log</span><br><span class="line">         break</span><br><span class="line">     fi</span><br><span class="line">     ((count++))</span><br><span class="line"></span><br><span class="line"> done</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-shell脚本&quot;&gt;&lt;a href=&quot;#0-shell脚本&quot; class=&quot;headerlink&quot; title=&quot;0.shell脚本&quot;&gt;&lt;/a&gt;0.shell脚本&lt;/h1&gt;&lt;h2 id=&quot;0-1shell赋值&quot;&gt;&lt;a href=&quot;#0-1shell赋值&quot; cla</summary>
      
    
    
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
    <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
    <category term="计算机教程缺失的一课" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E7%A8%8B%E7%BC%BA%E5%A4%B1%E7%9A%84%E4%B8%80%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>dfg代码解读</title>
    <link href="http://yoursite.com/2022/10/18/dfg%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://yoursite.com/2022/10/18/dfg%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/</id>
    <published>2022-10-18T14:05:12.000Z</published>
    <updated>2022-10-18T14:05:12.498Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>换电脑更新hexo</title>
    <link href="http://yoursite.com/2022/10/18/%E6%8D%A2%E7%94%B5%E8%84%91%E6%9B%B4%E6%96%B0hexo/"/>
    <id>http://yoursite.com/2022/10/18/%E6%8D%A2%E7%94%B5%E8%84%91%E6%9B%B4%E6%96%B0hexo/</id>
    <published>2022-10-18T10:02:26.000Z</published>
    <updated>2022-10-18T13:51:57.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="换电脑更新hexo"><a href="#换电脑更新hexo" class="headerlink" title="换电脑更新hexo"></a>换电脑更新hexo</h2><blockquote><p>因为更换电脑之后，原始数据在之前的电脑，所以博客一直没有更新。最近为了，监督自己复盘，花费两天重新折腾 了一下博客。本来想着把博客迁移到hugo，结果hugo，更新的教程还没有hexo教程多。而且我这个github.io的域名已经使用了。如果更新hugo。就得把这个仓库的数据清空。（主要是折腾两天了，githubpage使用action自动更新还比较繁琐）。所以才换回hexo。下面我来复盘一下这两天的折腾过程。</p></blockquote><h2 id="1-更换hugo"><a href="#1-更换hugo" class="headerlink" title="1.更换hugo"></a>1.更换hugo</h2><p>主要参考的是这个up的教程。</p><p><a href="https://www.pseudoyu.com/zh/2022/05/29/deploy_your_blog_using_hugo_and_github_action/">Hugo + GitHub Action，搭建你的博客自动发布系统 · Pseudoyu</a></p><h3 id="1-1hugo本地搭建"><a href="#1-1hugo本地搭建" class="headerlink" title="1.1hugo本地搭建"></a>1.1hugo本地搭建</h3><p>本地搭建参照这个up没有任何问题，主要是要把下载的主题里面的example文件复制下来，然后更新<strong>config。toml</strong>文件，注意这里的坑点（需要解析自己baseurl为自己github的地址）不然搭建之后直接跳转到example的网站，让我以为是自己搭建问题，折腾了几个小时。然后就没有什么坑点了</p><h3 id="1-2域名购买"><a href="#1-2域名购买" class="headerlink" title="1.2域名购买"></a>1.2域名购买</h3><p>为了贯彻讲白嫖进行到底的思想，我本来想着是使用freenom进行搭建一个 域名。但是一直购买失败。然后我又突然想起来，我之前认证了github学生包了的，所以直接去github学生包找到了一个提供免费域名的公司。顶级域名是.tech.一年的白嫖时间。博主使用的cloudflare，这个也不错，之前有过部署服务器的经验。所以我吧购买的域名，直接把dns改到cloudflare里的域名了。（可能等了一个小时才有结果）</p><p>域名设置到cloudflare后，需要进行cname设置（cname的意思就是重新跳转，例如输入世界一流大学.com直接跳转到sdu.edu.cn）</p><p>上述过程还好，没有花费多少时间。主要下面的设置自定义域名</p><h3 id="1-3设置自定义域名"><a href="#1-3设置自定义域名" class="headerlink" title="1.3设置自定义域名"></a>1.3设置自定义域名</h3><p>因为我的原始github.io的域名已经设置成为hexo的网站了，不能再次使用。所以我就参考了别人的方法，不能够有多个github.io的网站，但是可以在其他仓库里面开启一个仓库，然后使用github .io&#x2F;projectname 来进行构成一个新的网站。所以哦去setting里面打开了一个新的page，然后此时还有一个坑点（<strong>仓库默认的是main分支，我之后按照这个up的都是master分支，所以会出现几次配置失败的情况）</strong>我删除重建了几个仓库才解决这个问题。</p><p>在setting进行悬着page，然后悬着page，在page里选择master分支，使用githubbot进行更新网页。</p><p>下面是设置自定义域名的坑，因为设置自定义域名，会<strong>新建一个cname文件</strong>，造成本地与远程版本内容不一样，所以我之前使用push操作都是push失败，后来强制push，造成cname丢失，无法通过自定义域名访问到网页。这个卡了一晚上。</p><h3 id="1-4自定义action的坑点"><a href="#1-4自定义action的坑点" class="headerlink" title="1.4自定义action的坑点"></a>1.4自定义action的坑点</h3><p>因为使用自定义action的话，是需要设置github workflows的，我直接新建一个仓库，进行设置了workflows，结果</p><p>就是push的时候本地雨远程还是有 差异。而且他这个是需要把本地hugo的文件夹全部上传。（原文没些清楚，我以为只需要一个workflows工作流），结果也是看了一上午，触发任务失败。然后痛定思痛还是换成hexo了c</p><h3 id="1-5总结错误"><a href="#1-5总结错误" class="headerlink" title="1.5总结错误"></a>1.5总结错误</h3><p>目前犯了下列几个错误</p><ol><li>git操作不熟悉（remote branch，checkout，push -f）不知道怎么查看分支，如何删除，还有切换分支，分支管理</li><li>自定义域名，这个大坑</li><li>主要是设置config.toml文件没有进行设置，一直跳转到example网页，心态崩了几次</li><li>之后就是主题设置问题，theme</li><li>还有就是两个仓库，一个仓库上传public内容，一个进行上传所有的文件</li><li>觉得没有时间然后换回来hexo了</li></ol><h2 id="2-hexo进行重装"><a href="#2-hexo进行重装" class="headerlink" title="2.hexo进行重装"></a>2.hexo进行重装</h2><p><a href="https://wungjyan.github.io/2018/08/17/move-hexo/">hexo博客迁移到另一台电脑 | wj’blog (wungjyan.github.io)</a></p><p>复制下面的文件，就相当于在hexo分支里面的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// mac环境</span><br><span class="line">sudo npm install -g hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说起来也是比较简单，就是直接git下来所有的文件，但是也有小坑</p><p>git版本问题，因为，我是最新的npm，但是hexo的版本还是3.6的，结果就造成版本不同。按照上述的直接进行重装，就会造成安装版本不兼容，直接造成无法推送到服务端。但是本地没有问题。</p><p>所以接下来就是进行更新npm的不兼容的hexo版本</p><p>主要参考的是下面的</p><p><a href="https://novnan.github.io/Hexo/update_hexo/">Hexo版本升级指南 | novnan’s notes</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//以下指令均在Hexo目录下操作，先定位到Hexo目录</span><br><span class="line">//查看当前版本，判断是否需要升级</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">hexo version</span></span><br><span class="line"></span><br><span class="line">//全局升级hexo-cli</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm i hexo-cli -g</span></span><br><span class="line"></span><br><span class="line">//再次查看版本，看hexo-cli是否升级成功</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">hexo version</span></span><br><span class="line"></span><br><span class="line">//安装npm-check，若已安装可以跳过</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install -g npm-check</span></span><br><span class="line"></span><br><span class="line">//检查系统插件是否需要升级</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm-check</span></span><br><span class="line"></span><br><span class="line">//安装npm-upgrade，若已安装可以跳过</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install -g npm-upgrade</span></span><br><span class="line"></span><br><span class="line">//更新package.json</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm-upgrade</span></span><br><span class="line"></span><br><span class="line">//更新全局插件</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm update -g</span></span><br><span class="line"></span><br><span class="line">//更新系统插件</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm update --save</span></span><br><span class="line"></span><br><span class="line">//再次查看版本，判断是否升级成功</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">hexo version</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要我们自己安装npm-check工具，然后就是网络原因，不提了（直接使用clash打开cmd）</p><p>然后更新也有可能会有问题，于是就进行重启了。</p><p>之后hexo就成功的到hexo</p><h2 id="3-更换hexo主题"><a href="#3-更换hexo主题" class="headerlink" title="3.更换hexo主题"></a>3.更换hexo主题</h2><p>由于之前一直是使用yiliya主题，这次换的是butterfly主题，然后新的主题也有坑的，需要在原始的config里面进行更换主题轻微butterfly。同事还得继续复制自带的config文件，到跟目录，进行重命名，修改文件的信息，才可以更换主题细节。具体还有其他细节还在摸索，是参考下面这个的。有时间再继续折腾一下。</p><p><a href="https://akilar.top/posts/f99b208/">Butterfly主题美化日记 | Akilarの糖果屋</a></p><h2 id="4-复盘"><a href="#4-复盘" class="headerlink" title="4.复盘"></a>4.复盘</h2><p>失败原因，还有一段时间尝试使用gitee，结果gitee使用网页，需要认证身份证。弄了半天，我就跑路了，耽误时间。</p><ol><li>不想丢失以前写的hexo数据</li><li>然后使用自定义域名不熟悉</li><li>不熟悉使用git操作</li><li>好久没使用相关前段工具</li><li>折腾太少了，应该及时止损</li><li>b站有非常详细的教程</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;换电脑更新hexo&quot;&gt;&lt;a href=&quot;#换电脑更新hexo&quot; class=&quot;headerlink&quot; title=&quot;换电脑更新hexo&quot;&gt;&lt;/a&gt;换电脑更新hexo&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;因为更换电脑之后，原始数据在之前的电脑，所以博客一直没有更</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
    <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2022/10/18/test/"/>
    <id>http://yoursite.com/2022/10/18/test/</id>
    <published>2022-10-18T09:00:50.000Z</published>
    <updated>2022-10-18T09:00:50.972Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2022/10/18/hello-world/"/>
    <id>http://yoursite.com/2022/10/18/hello-world/</id>
    <published>2022-10-18T08:54:26.073Z</published>
    <updated>2022-10-18T08:54:26.073Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>5.3.11删除以x为根的子树</title>
    <link href="http://yoursite.com/2020/07/09/5-3-11%E5%88%A0%E9%99%A4%E4%BB%A5x%E4%B8%BA%E6%A0%B9%E7%9A%84%E5%AD%90%E6%A0%91/"/>
    <id>http://yoursite.com/2020/07/09/5-3-11%E5%88%A0%E9%99%A4%E4%BB%A5x%E4%B8%BA%E6%A0%B9%E7%9A%84%E5%AD%90%E6%A0%91/</id>
    <published>2020-07-09T07:30:12.000Z</published>
    <updated>2022-10-18T08:54:26.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>删除以x为根节点的所有子树，注意可能有多个为x值</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先递归删除所有节点</li><li>可能有多个值是x，所以用层序找出他们的父节点，然后删除x，同时设置父节点的子节点为空</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除每个以x为值的子树（可能有多个，父节点智能用层序找到）</span></span><br><span class="line"><span class="comment"> * 1.递归删除节点</span></span><br><span class="line"><span class="comment"> * 2.层序找到后调用1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">del</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">del</span>(root-&gt;right);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">    <span class="comment">//释放节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">searchDel</span><span class="params">(TreeNode *root,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val==x)&#123;</span><br><span class="line"><span class="comment">//        根节点就是，全删</span></span><br><span class="line">        <span class="built_in">del</span>(root);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    层序遍历找父亲</span></span><br><span class="line">    queue&lt;TreeNode*&gt; queue1;</span><br><span class="line">    queue1.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        TreeNode* cur=queue1.<span class="built_in">front</span>();</span><br><span class="line"><span class="comment">//        如果是就删除</span></span><br><span class="line">        queue1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left-&gt;val==x)&#123;</span><br><span class="line">                <span class="built_in">del</span>(cur-&gt;left);</span><br><span class="line">                cur-&gt;left= <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                加入</span></span><br><span class="line">                queue1.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;right-&gt;val==x)&#123;</span><br><span class="line">                <span class="built_in">del</span>(cur-&gt;right);</span><br><span class="line">                cur-&gt;right= <span class="literal">nullptr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                加入</span></span><br><span class="line">                queue1.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;删除以x为根节点的所有子树，注意可能有多个为x值&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>王道5.3.7完全二叉树的判定</title>
    <link href="http://yoursite.com/2020/07/09/%E7%8E%8B%E9%81%935-3-7%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
    <id>http://yoursite.com/2020/07/09/%E7%8E%8B%E9%81%935-3-7%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%A4%E5%AE%9A/</id>
    <published>2020-07-09T01:29:25.000Z</published>
    <updated>2022-10-18T08:54:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个二叉树，确定它是否是一个完全二叉树。</p><p>百度百科中对完全二叉树的定义如下：</p><p>若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~ 2h 个节点。）</p><p>示例 1：</p><p>输入：[1,2,3,4,5,6] 输出：true 解释：最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后一层中的所有结点（{4,5,6}）都尽可能地向左。</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree">https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据层序遍历，设置flag标志是否出现过null，如果出现null，设置flag为1.如果存在当前节点，判断当前flag如果是1，就直接返回false，不是就把他的左右节点加入（无论他的左右节点是否存在），接着层序。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCompleteTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;TreeNode*&gt; queue1;</span><br><span class="line">    queue1.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//    是否出现null</span></span><br><span class="line">    <span class="keyword">while</span> (!queue1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        TreeNode* cur=queue1.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag==<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            queue1.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            queue1.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            queue1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            queue1.<span class="built_in">pop</span>();</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定一个二叉树，确定它是否是一个完全二叉树。&lt;/p&gt;
&lt;p&gt;百度百科中对完全二叉树的定义如下：&lt;/p&gt;
&lt;p&gt;若设二叉树的深</summary>
      
    
    
    
    
    <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>王道5.3.5</title>
    <link href="http://yoursite.com/2020/07/08/%E7%8E%8B%E9%81%935-3-5/"/>
    <id>http://yoursite.com/2020/07/08/%E7%8E%8B%E9%81%935-3-5/</id>
    <published>2020-07-08T04:33:26.000Z</published>
    <updated>2022-10-18T08:54:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例： 给定二叉树 [3,9,20,null,null,15,7]，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>&#x2F; \ 9 20 &#x2F; \ 15 7 返回它的最大深度 3 。</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>通过层序遍历来获取</li><li>queue记录当前层的所有元素，用for遍历这一层的元素加入他的左右节点，for结束就是一层结束</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    queue&lt;TreeNode*&gt; queue1;</span><br><span class="line">    queue1.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> n=queue1.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//        对这一层所有的元素进行加子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            TreeNode *cur=queue1.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left)&#123;</span><br><span class="line">                queue1.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;right)&#123;</span><br><span class="line">                queue1.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            queue1.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        for结束后这一层就结束了</span></span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定一个二叉树，找出其最大深度。&lt;/p&gt;
&lt;p&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/p&gt;
&lt;p&gt;说明</summary>
      
    
    
    
    
    <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>王道5.3_2_3非递归后续遍历</title>
    <link href="http://yoursite.com/2020/07/08/%E7%8E%8B%E9%81%935-3-2-3%E9%9D%9E%E9%80%92%E5%BD%92%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2020/07/08/%E7%8E%8B%E9%81%935-3-2-3%E9%9D%9E%E9%80%92%E5%BD%92%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/</id>
    <published>2020-07-08T03:39:50.000Z</published>
    <updated>2022-10-18T08:54:26.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个二叉树，返回它的 后序 遍历。</p><p>示例:</p><p>输入: [1,null,2,3] 1 \ 2 &#x2F; 3</p><p>输出: [3,2,1] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal">https://leetcode-cn.com/problems/binary-tree-postorder-traversal</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>构建模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( 栈非空 || p 非空)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( p 非空)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填写步骤</p><ol><li>p非空一直左压</li><li>然后，如果是空的，获取栈的顶端，如果右节点也是空的或者访问了的就是p.right&#x3D;pre，那么就直接访问当前的，并把p给pop出来，同时设置pre&#x3D;p，标志访问，*<strong>同时设置p&#x3D;null（否则下一次p会进入if判断，然后一直压）*</strong></li><li>如果不是空的，并且没有访问，那么把p&#x3D;p.right，他就会进入之前的if，一直左压</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    stack&lt;TreeNode*&gt; stack1;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vector;</span><br><span class="line"><span class="comment">//    两个一个判断，一个向前走</span></span><br><span class="line">    TreeNode *p=root;</span><br><span class="line">    TreeNode *pre= <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (p||!stack1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span> (p)&#123;</span><br><span class="line"><span class="comment">//            如果p存在就一直左压</span></span><br><span class="line">            stack1.<span class="built_in">push</span>(p);</span><br><span class="line">            p=p-&gt;left;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            不存在先取top</span></span><br><span class="line">            p=stack1.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (!p-&gt;right||p-&gt;right==pre)&#123;</span><br><span class="line"><span class="comment">//                不存在，或者是之前访问的了</span></span><br><span class="line">                vector.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line"><span class="comment">//                并设置这个也是访问的</span></span><br><span class="line">                pre=p;</span><br><span class="line"><span class="comment">//                弹出当前的</span></span><br><span class="line">                stack1.<span class="built_in">pop</span>();</span><br><span class="line">                p= <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//                设置为右边的，然后他访问右边的所有左树</span></span><br><span class="line">                p=p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vector;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给定一个二叉树，返回它的 后序 遍历。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: [1,null,2,3] 1 \ 2 &amp;</summary>
      
    
    
    
    
    <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>kmp数组求法</title>
    <link href="http://yoursite.com/2020/07/05/kmp%E6%95%B0%E7%BB%84%E6%B1%82%E6%B3%95/"/>
    <id>http://yoursite.com/2020/07/05/kmp%E6%95%B0%E7%BB%84%E6%B1%82%E6%B3%95/</id>
    <published>2020-07-05T08:15:01.000Z</published>
    <updated>2022-10-18T08:54:26.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-next求法"><a href="#1-next求法" class="headerlink" title="1.next求法"></a>1.next求法</h2><p>例如s&#x3D;‘abcac’，首先从第一位a开始，设置a为0（如果是-1，后面的都不需要+1），第二个是b，b的前面子串是a，没有匹配的设置成0+1，接下来是c，前面子串是ab，同理设置为0+1，下一个a也是0+1，最后是c，前面子串是abca，他的前缀子串a和后缀a相等，设置成1+1，所以next&#x3D;{0,1,1,1,2}</p><h2 id="2-nextval求法"><a href="#2-nextval求法" class="headerlink" title="2.nextval求法"></a>2.nextval求法</h2><p>例如，s&#x3D;‘aaaab’，next&#x3D;{0，1,2,3,4,}，第一个是a，i&#x3D;0，设置naxtval&#x3D;0，i++.第二个是a与第一位相同，设置nextval【2】&#x3D;nextval【1】&#x3D;0，i++，第三个是a与第i个相同就是nextval【3】&#x3D;nextval【2】，第四个与第3个也相同，也是nv【4】&#x3D;nv【3】，第5位是b与第4位是a不同，i不加，nextval【5】&#x3D;next【5】&#x3D;4，所以nextval&#x3D;{0,0,0,0,4}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-next求法&quot;&gt;&lt;a href=&quot;#1-next求法&quot; class=&quot;headerlink&quot; title=&quot;1.next求法&quot;&gt;&lt;/a&gt;1.next求法&lt;/h2&gt;&lt;p&gt;例如s&amp;#x3D;‘abcac’，首先从第一位a开始，设置a为0（如果是-1，后面的都不需要</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>王道2_2_24</title>
    <link href="http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-24/"/>
    <id>http://yoursite.com/2020/07/01/%E7%8E%8B%E9%81%932-2-24/</id>
    <published>2020-07-01T13:44:57.000Z</published>
    <updated>2022-10-18T08:54:26.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">题目大意</a></h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p>说明：不允许修改给定的链表。</p><p>。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>快慢两个指针，fast走两步，slow走一步，如果相遇就是有环</li><li>假设head与入幻点相差a，入环与slow差b，fast比slow多走a+b（2倍关系），若slow再走a会到入幻点（因为入幻与slow差b），而且head走a也是入幻点，所以如果a&#x3D;slow，那么就是入幻点</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快慢指针，若相遇择优换</span></span><br><span class="line">        ListNode *fast=head,*slow=head;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(slow&amp;&amp;fast-&gt;next)&#123;</span><br><span class="line">            <span class="comment">//fast走两次，所以需要检查fast的下一个</span></span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            ListNode *p=head;</span><br><span class="line">            <span class="keyword">while</span>(p!=slow)&#123;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">                slow=slow-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-list-cycle-ii/&quot;&gt;题目大意&lt;/a&gt;&lt;</summary>
      
    
    
    
    
    <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="王道数据结构" scheme="http://yoursite.com/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
