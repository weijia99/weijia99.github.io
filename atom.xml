<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-11-25T08:08:35.672Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>weijia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人际社会学</title>
    <link href="http://yoursite.com/2022/11/25/%E4%BA%BA%E9%99%85%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    <id>http://yoursite.com/2022/11/25/%E4%BA%BA%E9%99%85%E7%A4%BE%E4%BC%9A%E5%AD%A6/</id>
    <published>2022-11-25T07:17:18.000Z</published>
    <updated>2022-11-25T08:08:35.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="人机解剖"><a href="#人机解剖" class="headerlink" title="人机解剖"></a>人机解剖</h1><h2 id="1-什么叫魅力"><a href="#1-什么叫魅力" class="headerlink" title="1.什么叫魅力"></a>1.什么叫魅力</h2><blockquote><p>刚开始不认识对方还是和和气气的,认识之后就对对方可以调戏.这是因为我们知道了对方的框架.</p></blockquote><p>框架:</p><ol><li>对方能接受的底线(一开始不知道对方的底线)</li><li>包括对方喜欢什么,还有不接受什么</li></ol><p>人与人认识,就是认识对方的框架</p><hr><p>能量:</p><blockquote><p>为什么会在开始,就知道这个人能不能决胜.(因为已经做好准备了,兵马未动,粮草先行)</p></blockquote><p>决定你能不能取胜都是事前的准备(例如1km,取决于之前的锻炼,而不i是今天自己的爆发)</p><p>做好准备就是决定能量的多少就是你的实力</p><hr><p>实力:</p><ol><li>社会是幕强的</li><li>绝对实力再任何技巧面前都是没用的(只要篮球够好,总有一堆人喜欢你的)</li><li>赢家通吃(长得帅一堆女生)</li></ol><hr><p>提升实力:</p><p>能量&#x3D;&#x3D;&gt;包括实力</p><p>实力&#x3D;价值+稀缺性</p><p>实力可以包括:</p><ol><li>兴趣(使用电脑)</li><li>优势(数学&amp;英语)</li></ol><p>价值:取决于你所在位置的用途(滑雪对boss没什么用,只能当运动员)</p><p>稀缺性:阳光,空气还有水都有价值(但没有稀缺性,信息是有稀缺性的)</p><hr><p>稀缺性构建:</p><ol><li>信息过剩(查询到有用信息,查询会计师信息)</li><li>知识(知道信息,学习知识,使用某本书)</li><li>能力(需要联系的,能够和别人谈笑风生,都需要联系自己的交往能力的)</li><li>认识,能出其他人的角度思考</li><li>资源(资源永远是稀缺的,没人带你无法入门)</li></ol><hr><blockquote><p>重点部分</p></blockquote><p><strong>构成实力:</strong></p><ol><li><strong>干就完事了(不要多想)</strong></li><li>保持真实</li><li>再自己的主场(自己的主场,别人大佬也会请教你的,或者是自己的学晓)</li></ol><h2 id="2-人机关系痛苦"><a href="#2-人机关系痛苦" class="headerlink" title="2.人机关系痛苦"></a>2.人机关系痛苦</h2><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><blockquote><p>自己的需求得不到</p></blockquote><p>没有曼珠自己的需求</p><p>需求,不可能一直满足,所以会有痛苦.相反</p><p>当当时得到满足了,那个需求,那么一瞬间就是快乐</p><blockquote><ol><li>辩证的知道,没有痛苦就没有快乐</li><li>痛苦是常态</li></ol></blockquote><h3 id="他人攻击谩骂"><a href="#他人攻击谩骂" class="headerlink" title="他人攻击谩骂"></a>他人攻击谩骂</h3><blockquote><p>别人不喜欢,无所谓了</p></blockquote><blockquote><p>体温，为什么会被别人不喜欢</p><p>因为，他攻击力，是因为你当前这个角色没做好</p></blockquote><p>人是一切关系社会的综合，</p><p><strong>人也是角色的综合</strong></p><ol><li>自己是学生</li><li>自己也是老师</li><li>自己也是儿子</li><li>自己也是男朋友</li><li>自己也是同学</li><li>自己也是公司员工</li></ol><p><strong>高情商就是处理号自己的角色</strong></p><p>家长对孩子也是要辩证的</p><ol><li>孩子顶撞自己</li><li>孩子考试好了(阳)</li></ol><p>他只是攻击这个角色,并不是攻击我</p><hr><blockquote><p><strong>关于忍不忍</strong></p></blockquote><p><strong>主要是看是不是自己的核心利益</strong></p><p>辞职:这个时候辞职了,有没有下一家</p><h3 id="为什么会霸凌"><a href="#为什么会霸凌" class="headerlink" title="为什么会霸凌"></a>为什么会霸凌</h3><blockquote><p>一步步试探底线,发现你都可以接受(所以刚开始就要说不)</p></blockquote><p>为什么会干欺凌(因为没有代价)</p><p>如何解决:</p><ol><li>使劲闹大</li><li>增加犯错成本</li></ol><h2 id="3-恋爱"><a href="#3-恋爱" class="headerlink" title="3.恋爱"></a>3.恋爱</h2><p>分为下面多个阶段</p><h3 id="陌生人到男女朋友-暧昧期"><a href="#陌生人到男女朋友-暧昧期" class="headerlink" title="陌生人到男女朋友(暧昧期)"></a>陌生人到男女朋友(暧昧期)</h3><p>为什么会有的人自来熟(一见如故),因为他默认把你当作他多年的朋友.</p><p><strong>距离:你觉得近 就近,你觉得渊就远</strong></p><p>什么时候调:把对方当作你的情人</p><p>男女朋友(状态):</p><ol><li>直接开始吃饭</li><li>直接开始约会</li><li>直接做男女朋友的事</li></ol><h3 id="吸引"><a href="#吸引" class="headerlink" title="吸引"></a>吸引</h3><p>被你吸引事因为:</p><ol><li>被你这个人的世界所吸引(朋友圈,显示high value)</li><li>再这个领域事top(篮球)</li><li>会才艺(做饭)</li><li>处于焦点(经常出现,刷脸熟,容易被人记住)</li></ol><blockquote><p>人在专注的时候,别人会被你的世界吸引过来</p></blockquote><h3 id="激情"><a href="#激情" class="headerlink" title="激情"></a>激情</h3><p>好奇心(想了解你这个人的一切)</p><p>如何保持激情,就是保持好奇心,就是增加神秘感(你有你的世界,如果被知道了,就再增加)</p><h3 id="平淡"><a href="#平淡" class="headerlink" title="平淡"></a>平淡</h3><p>淡下去了,就去增加自己的神秘感</p><p>美好的声音≠好妻子</p><blockquote><p>结婚,找舒服的,想出舒服(情绪稳定,不要找个祖宗)(闹啊,你不爱我呀,打电话啊)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;人机解剖&quot;&gt;&lt;a href=&quot;#人机解剖&quot; class=&quot;headerlink&quot; title=&quot;人机解剖&quot;&gt;&lt;/a&gt;人机解剖&lt;/h1&gt;&lt;h2 id=&quot;1-什么叫魅力&quot;&gt;&lt;a href=&quot;#1-什么叫魅力&quot; class=&quot;headerlink&quot; title=&quot;1.什</summary>
      
    
    
    
    
    <category term="社会学" scheme="http://yoursite.com/tags/%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    
    <category term="多萝西" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%90%9D%E8%A5%BF/"/>
    
  </entry>
  
  <entry>
    <title>pa1.1小结</title>
    <link href="http://yoursite.com/2022/11/19/pa1-1%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2022/11/19/pa1-1%E5%B0%8F%E7%BB%93/</id>
    <published>2022-11-19T12:41:21.000Z</published>
    <updated>2022-11-19T13:25:04.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pa1-1"><a href="#pa1-1" class="headerlink" title="pa1.1"></a>pa1.1</h1><p>本章主要是要求大家进行使用构建完成简易表达式，主要包括单步执行，打印寄存器，还有扫描内存</p><blockquote><p>为什么使用static，因为使用static可以解决两个c文件有相同函数名的问题，不会造成编译问题</p></blockquote><h2 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a>单步执行</h2><p>但不执行，我们可以看到远吗使用的cmdc这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_c</span><span class="params">(<span class="type">char</span> *args)</span> &#123;</span><br><span class="line"><span class="comment">//    -1是65535最大的2的64-1</span></span><br><span class="line">  cpu_exec(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用cpu_exec代表就是直接执行，使用-1，因为这是uint，无符号，-1的无符号就是最大值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cpu_exec</span><span class="params">(<span class="type">uint64_t</span> n)</span> &#123;</span><br><span class="line">  g_print_step = (n &lt; MAX_INST_TO_PRINT);</span><br><span class="line">  <span class="keyword">switch</span> (nemu_state.state) &#123;</span><br><span class="line">    <span class="keyword">case</span> NEMU_END: <span class="keyword">case</span> NEMU_ABORT:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Program execution has ended. To restart the program, exit NEMU and run again.\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>: nemu_state.state = NEMU_RUNNING;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以我们只需要对当前的函数，进行查找出需要执行的步数，然后调用cpu——exec来进行执行代码</p><p>使用strtok来进行抽取参数就可以</p><p>然后转换函数可以直接使用atoi</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_si</span><span class="params">(<span class="type">char</span> *args)</span>&#123;</span><br><span class="line">    <span class="comment">/* extract the first argument */</span></span><br><span class="line">    <span class="comment">/*get steps,default is 1*/</span></span><br><span class="line">    <span class="type">char</span> *arg = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(arg==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">/* no argument given */</span></span><br><span class="line">        i=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt; <span class="built_in">strlen</span>(arg);j++)&#123;</span><br><span class="line">            i=i*<span class="number">10</span>+arg[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    printf(&quot;%s&quot;,arg);</span></span><br><span class="line">    cpu_exec(i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印寄存器"><a href="#打印寄存器" class="headerlink" title="打印寄存器"></a>打印寄存器</h2><blockquote><p>打印寄存器就更简单了. 不过既然寄存器的结构是ISA相关的, 我们希望能为简易调试器屏蔽ISA的差异. 框架代码已经为大家准备了如下的API:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// nemu/src/isa/$ISA/reg.c</span><br><span class="line">void isa_reg_display(void);</span><br></pre></td></tr></table></figure><p>执行<code>info r</code>之后, 就调用<code>isa_reg_display()</code>, 在里面直接通过<code>printf()</code>输出所有寄存器的值即可. 如果你从来没有使用过<code>printf()</code>, 请RTFM或者STFW. 如果你不知道要输出什么, 你可以参考GDB中的输出.</p></blockquote><p>这个因为我们使用的riscv，所以需要去riscv里面进行修改isa——display这个函数。</p><p>直接调用isa，主要思路就是在reg里面进行遍历每一个寄存器，然后reg里面有gpr这个可以直接获取值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">isa_reg_display</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line"><span class="comment">//        printf(&quot;%s %s&quot;,regs[i],isa_reg_str2val(regs[i],false));</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3s :0x%08lx |  \n&quot;</span>, regs[i], cpu.gpr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扫描内存"><a href="#扫描内存" class="headerlink" title="扫描内存"></a>扫描内存</h2><p>这个意思就是求出地址附近的10个值。如何求出值，观看rtfsc，可以发现调用vaddr，传入地址，还有字节数就行。默认riscv一个地址有4B，所以我们就传入就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_x</span><span class="params">(<span class="type">char</span> *args)</span>&#123;</span><br><span class="line">    <span class="comment">/* get N info,with the start of exp*/</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * vaddr_read(addr,len),这个len是长度的意思，单位是byte，一条指令默认4B，所以取的4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">char</span> *arg= strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N=atoi(arg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">paddr_t</span> exprs=<span class="number">0x80000000</span>;</span><br><span class="line"><span class="comment">//    printf(&quot;0x%08x&quot;,exprs);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    printf(&quot;Address    Dword block ... Byte sequence\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%8x  0x%08lx\n&quot;</span>,exprs + i*<span class="number">4</span>,vaddr_read(exprs + i * <span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后地址的话，每次都是更新4，。直接+4就可以</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说还是比较简单的，但是由于是第一次接触到这种作业，还是查了不少资料。重点还是要看jyy的2020ics的习题课</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pa1-1&quot;&gt;&lt;a href=&quot;#pa1-1&quot; class=&quot;headerlink&quot; title=&quot;pa1.1&quot;&gt;&lt;/a&gt;pa1.1&lt;/h1&gt;&lt;p&gt;本章主要是要求大家进行使用构建完成简易表达式，主要包括单步执行，打印寄存器，还有扫描内存&lt;/p&gt;
&lt;blockquo</summary>
      
    
    
    
    
    <category term="pa" scheme="http://yoursite.com/tags/pa/"/>
    
  </entry>
  
  <entry>
    <title>leetcode150</title>
    <link href="http://yoursite.com/2022/11/19/leetcode150/"/>
    <id>http://yoursite.com/2022/11/19/leetcode150/</id>
    <published>2022-11-19T12:33:58.000Z</published>
    <updated>2022-11-19T12:40:39.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-150"><a href="#leetcode-150" class="headerlink" title="leetcode 150"></a>leetcode 150</h1><blockquote><p>Evaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">Reverse Polish Notation</a>.</p><p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>. Each operand may be an integer or another expression.</p><p><strong>Note</strong> that division between two integers should truncate toward zero.</p><p>It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.</p></blockquote><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>本题是给你了逆波兰表达式，让你自己求，这个结果。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们可以发现，这个就是后缀表达式，使用后缀遍历，然后我们也可以发现，这个树的叶子节点就是数字。</p><p>整体思路就是遍历这个字符串，然后发现是数字就push到stack里面，然后发现是符号就pop出来两个数字，对他进行操作。</p><p>最后返回栈顶元素</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    stack&lt;<span class="type">long</span> <span class="type">long</span>&gt; s;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 简单的后缀表达式求和</span></span><br><span class="line">        set&lt;string&gt; rec;</span><br><span class="line">        rec.<span class="built_in">insert</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        rec.<span class="built_in">insert</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        rec.<span class="built_in">insert</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        rec.<span class="built_in">insert</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:tokens)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(rec.<span class="built_in">find</span>(i)!=rec.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="type">int</span> a=s.<span class="built_in">top</span>();</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> b=s.<span class="built_in">top</span>();</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="comment">// cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">if</span>(i==<span class="string">&quot;+&quot;</span>)&#123;</span><br><span class="line">                    s.<span class="built_in">push</span>(a+b);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="string">&quot;-&quot;</span>)&#123;</span><br><span class="line">                    s.<span class="built_in">push</span>(b-a);</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="string">&quot;*&quot;</span>)&#123;</span><br><span class="line">                    s.<span class="built_in">push</span>((<span class="type">long</span> <span class="type">long</span>)a*(<span class="type">long</span> <span class="type">long</span> )b);</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    s.<span class="built_in">push</span>(b/a);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s.<span class="built_in">push</span>(<span class="built_in">atoi</span>(i.<span class="built_in">c_str</span>()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">top</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcode-150&quot;&gt;&lt;a href=&quot;#leetcode-150&quot; class=&quot;headerlink&quot; title=&quot;leetcode 150&quot;&gt;&lt;/a&gt;leetcode 150&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Evaluate the valu</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
    <category term="后序遍历" scheme="http://yoursite.com/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>leetcode148</title>
    <link href="http://yoursite.com/2022/11/19/leetcode148/"/>
    <id>http://yoursite.com/2022/11/19/leetcode148/</id>
    <published>2022-11-19T12:13:00.000Z</published>
    <updated>2022-11-19T12:33:46.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-148"><a href="#leetcode-148" class="headerlink" title="leetcode 148"></a>leetcode 148</h1><blockquote><p>Given the <code>head</code> of a linked list, return <em>the list after sorting it in <strong>ascending order</strong></em>.</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16688601431171668860143064.png"></p><blockquote><p><strong>Follow up:</strong> Can you sort the linked list in <code>O(n logn)</code> time and <code>O(1)</code> memory (i.e. constant space)?</p></blockquote><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>把链表进行排序输出，但是只能使用o1的空间，nlogn的时间。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用nlogn的方法来进行排序只有快排还有归并，但是都是用来递归，那空间就是on。所以只能使用迭代的方法来进行排序。</p><p>地带也是给予归并的，就是我们手动从下到上，手动进行排序。排序完成一层厚，再次进行下一层来排序。</p><p>现在我们进行引进dummy还有cur，dummy使用尾插法，来构建新的完整的链表（这是新一层的）</p><p>每一层开始的时候p&#x3D;q&#x3D;head，</p><p>然后q多走i补来达到下一组的开始</p><p>然后引进p还有q，pq是两组的开头，对pq进行循环遍历，次数小于1,2,4，（这是分组的方式）。同事还有一个 o，o是2i的位置（表示新的一组开始进行排序，连接），这个都是用cur来进行尾插法。之后再把head&#x3D;o，开始进行下一组</p><p>完成一层厚，我们让head&#x3D;dummy-》next。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p><code>[4,3,1,7,8,9,2,11,5,6]</code>.这个进行排序</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">step=<span class="number">1</span>: (<span class="number">3</span>-&gt;<span class="number">4</span>)-&gt;(<span class="number">1</span>-&gt;<span class="number">7</span>)-&gt;(<span class="number">8</span>-&gt;<span class="number">9</span>)-&gt;(<span class="number">2</span>-&gt;<span class="number">11</span>)-&gt;(<span class="number">5</span>-&gt;<span class="number">6</span>)</span><br><span class="line">step=<span class="number">2</span>: (<span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">7</span>)-&gt;(<span class="number">2</span>-&gt;<span class="number">8</span>-&gt;<span class="number">9</span>-&gt;<span class="number">11</span>)-&gt;(<span class="number">5</span>-&gt;<span class="number">6</span>)</span><br><span class="line">step=<span class="number">4</span>: (<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">7</span>-&gt;<span class="number">8</span>-&gt;<span class="number">9</span>-&gt;<span class="number">11</span>)-&gt;(<span class="number">5</span>-&gt;<span class="number">6</span>)</span><br><span class="line">step=<span class="number">8</span>: (<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span>-&gt;<span class="number">7</span>-&gt;<span class="number">8</span>-&gt;<span class="number">9</span>-&gt;<span class="number">11</span>)</span><br></pre></td></tr></table></figure><p>我们可以看第一轮i&#x3D;1，dummy-&gt;next表示step1这个完整的链表（3417.。），cur都是尾插法，然后p&#x3D;4，q&#x3D;3，o&#x3D;1，34</p><p>结束后就是head&#x3D;o，p&#x3D;head&#x3D;1，q&#x3D;7，然后接着进行更新</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="comment">/*1.首先求出长度n</span></span><br><span class="line"><span class="comment">   2.第一个for i是求出层数</span></span><br><span class="line"><span class="comment">   3.第二个for是求出分了几组，想领2gei是一组</span></span><br><span class="line"><span class="comment">   4.然后对q走到下一个开头，p是当前的开头</span></span><br><span class="line"><span class="comment">   5.对o走到2i的位置，使他们可以接着循环</span></span><br><span class="line"><span class="comment">   6.之后就是常规的归并方法使用while</span></span><br><span class="line"><span class="comment">   7.一层遍历结束完成后，让cur-&gt;next=null,同事更新head为dummy-》nexzt表示新的开头</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用地带进行排序</span></span><br><span class="line">        <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            n++;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i*=<span class="number">2</span>)&#123;</span><br><span class="line">             <span class="keyword">auto</span> dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="comment">//  dummy指示的是一层的开始</span></span><br><span class="line">            cur=dummy;</span><br><span class="line">            <span class="comment">//第一层循环是层数，从第一个开始,1,2,4</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j+=<span class="number">2</span>*i)&#123;</span><br><span class="line">                <span class="comment">//第二个循环是组好，然后进行比较</span></span><br><span class="line">                <span class="comment">//  在组好开始进行排序 这是一次组里的比较</span></span><br><span class="line">               </span><br><span class="line">                <span class="comment">// auto cur=dummy;使用cur来进行插入</span></span><br><span class="line">                <span class="keyword">auto</span> p=head;<span class="comment">//第一组开始</span></span><br><span class="line">                 <span class="keyword">auto</span> q=p;<span class="comment">//第二组开始</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//找到下一个组开始的0号</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i&amp;&amp;q;k++)&#123;</span><br><span class="line">                    q=q-&gt;next;</span><br><span class="line">                    <span class="comment">//下一组的开始</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">auto</span> o=q;<span class="comment">//下一组的开始标签，使用2i开始</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;i&amp;&amp;o;k++)&#123;</span><br><span class="line">                    o=o-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 两个开始,第一组开始都是1开始比较</span></span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;q&amp;&amp;l&lt;i&amp;&amp;r&lt;i)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p-&gt;val&lt;q-&gt;val)&#123;</span><br><span class="line">                        l++;</span><br><span class="line">                     cur-&gt;next=p;</span><br><span class="line">                     cur=cur-&gt;next;</span><br><span class="line">                     p=p-&gt;next;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        r++;</span><br><span class="line">                        cur-&gt;next=q;</span><br><span class="line">                        cur=cur-&gt;next;</span><br><span class="line">                        q=q-&gt;next;</span><br><span class="line">                        <span class="comment">//尾插法</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(p&amp;&amp;l&lt;i)&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                     cur-&gt;next=p;</span><br><span class="line">                     cur=cur-&gt;next; </span><br><span class="line">                     p=p-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(q&amp;&amp;r&lt;i)&#123;</span><br><span class="line">                   r++;</span><br><span class="line">                        cur-&gt;next=q;</span><br><span class="line">                        cur=cur-&gt;next;</span><br><span class="line">                        q=q-&gt;next;</span><br><span class="line">                        <span class="comment">//尾插法 </span></span><br><span class="line">                &#125;</span><br><span class="line">                head=o;<span class="comment">//下一次开始</span></span><br><span class="line">                <span class="comment">// cout&lt;&lt;head-&gt;val&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 整个结束了，插入到开始</span></span><br><span class="line">            cur-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">//尾插法，是因为要保持开始的顺序不变</span></span><br><span class="line">            head=dummy-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcode-148&quot;&gt;&lt;a href=&quot;#leetcode-148&quot; class=&quot;headerlink&quot; title=&quot;leetcode 148&quot;&gt;&lt;/a&gt;leetcode 148&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;h</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
    <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>pa配置vscode</title>
    <link href="http://yoursite.com/2022/11/18/pa%E9%85%8D%E7%BD%AEvscode/"/>
    <id>http://yoursite.com/2022/11/18/pa%E9%85%8D%E7%BD%AEvscode/</id>
    <published>2022-11-18T12:59:12.000Z</published>
    <updated>2022-11-19T07:18:38.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pa配置vscode"><a href="#pa配置vscode" class="headerlink" title="pa配置vscode"></a>pa配置vscode</h1><h2 id="1-为什么会写这一个"><a href="#1-为什么会写这一个" class="headerlink" title="1.为什么会写这一个"></a>1.为什么会写这一个</h2><p>目前正在写nju pa。pa是用makefile进行构建的，然后使用了多个自定义宏，导致，无法进行，直接的和之前一样，按一下run就可以运行。所以得进行手动配置。</p><p>还有就是，没有使用ide进行编码，导致一堆{}对齐的问题，然后找bug比较难受</p><h2 id="2-配置方法"><a href="#2-配置方法" class="headerlink" title="2.配置方法"></a>2.配置方法</h2><p>根据jyy<a href="https://www.bilibili.com/video/BV1qa4y1j7xk?p=4&vd_source=d043013c6aa637931d747eae4c52b842">的课程</a>在1小时16分钟左右的时候，只需要进行vscode配置一会儿就可以正常使用。把defines里面进行添加宏就可以，这个宏如何查找，在第三届讲makefile的时候介绍过。我们使用make -nB(可以进行强制编译所有的)然后我们使用vim</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687772080711668777207848.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make -nB \</span><br><span class="line"> | grep -ve &#x27;^\(\#\|echo\|mkdir\)&#x27; \</span><br><span class="line"> | vim -</span><br></pre></td></tr></table></figure><p>然后进行搜索 -D ，这个参数就是在编译里面加入自定义宏，然后我们把这些宏进行拷贝过来，使用管道连接，去除echo 还有mkidr，传递给vim，vim用搜索按钮查找就可以</p><h2 id="3-vscode配置教程"><a href="#3-vscode配置教程" class="headerlink" title="3.vscode配置教程"></a>3.vscode配置教程</h2><p>参考教程：<a href="https://zhuanlan.zhihu.com/p/87864677">https://zhuanlan.zhihu.com/p/87864677</a></p><ol><li>安装c++插件</li><li>安装远程开发（我是用的虚拟机，进行ssh开发）</li><li>之后就是通过ssh连接虚拟机，然后插件安装后，进行设置</li><li>进行配置c_cpp_properties.json，在defines进行添加宏（无人其他改动）</li><li><strong>接下来就是配置gdb</strong></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;__GUESR_ISA__=riscv64&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;_GNU_SOURCE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;__STDC_CONSTANT_MACROS&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;__STDC_FORMAT_MACROS&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;__STDC_LIMIT_MACROS&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux-clang-x64&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>gdb配置有坑：</p><p>参考下面 ： <a href="https://www.youtube.com/watch?v=9VpiGwp8Vos&amp;ab_channel=SavvyNik">https://www.youtube.com/watch?v=9VpiGwp8Vos&amp;ab_channel=SavvyNik</a></p><p>我们要进行配置gdb，就得要在编译过程加入- g ，这个可以在makefile发现是在build.mk里面的，我们加入-g选项。然后还得设置launch.json</p><p>参考如下：<a href="https://blog.csdn.net/zztiger123/article/details/105544640">https://blog.csdn.net/zztiger123/article/details/105544640</a></p><p>修改program为build下面那个输出的，然后cwd，修改为nemu的目录</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/nemu/build/riscv64-nemu-interpreter&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-b&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stopAtConnect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/nemu&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这个结束之后，有个坑，jyy在is_mode_batch这个函数设置为true，我用gdb就追踪不了，我输入p命令的结果，把那个函数值设置为false就可以走正常流程，进行追踪。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make -j8&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: gcc 生成活动文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-fdiagnostics-color=always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-clion应该也一样"><a href="#4-clion应该也一样" class="headerlink" title="4.clion应该也一样"></a>4.clion应该也一样</h2><p>明天有空在进行配置clion，修改自定义make目标，然后进行添加，可以参考下面的连接</p><p><a href="https://www.jetbrains.com/help/clion/custom-build-targets.html#custom-rundebug">https://www.jetbrains.com/help/clion/custom-build-targets.html#custom-rundebug</a></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>pa确实难，对于我这个非科班跨考的。不过感觉也学到挺多知识的，好的大学，课程真的可以和没过高校的课程差不多，现在才做完1.2，还得接着写。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pa配置vscode&quot;&gt;&lt;a href=&quot;#pa配置vscode&quot; class=&quot;headerlink&quot; title=&quot;pa配置vscode&quot;&gt;&lt;/a&gt;pa配置vscode&lt;/h1&gt;&lt;h2 id=&quot;1-为什么会写这一个&quot;&gt;&lt;a href=&quot;#1-为什么会写这一个&quot;</summary>
      
    
    
    
    
    <category term="pa" scheme="http://yoursite.com/tags/pa/"/>
    
    <category term="nemu" scheme="http://yoursite.com/tags/nemu/"/>
    
    <category term="vscode" scheme="http://yoursite.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>学习技巧</title>
    <link href="http://yoursite.com/2022/11/18/%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2022/11/18/%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7/</id>
    <published>2022-11-18T09:48:27.000Z</published>
    <updated>2022-11-18T12:51:26.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-学习技巧"><a href="#1-学习技巧" class="headerlink" title="1.学习技巧"></a>1.学习技巧</h1><p>来源于youtube 的crashcourse 里面分为10节进行讲述，如何学习。一个半小时左右可以看完，还是很不错的。具体连接如下</p><p><a href="https://youtu.be/IhuwS5ZLwKY">https://youtu.be/IhuwS5ZLwKY</a></p><p>看完了这个视频，解决了我研一所与到的多个问题，是使用笔记本还是手写做笔记。做笔记的方法有哪些怎么进行读书</p><h2 id="1-1学会做笔记"><a href="#1-1学会做笔记" class="headerlink" title="1.1学会做笔记"></a>1.1学会做笔记</h2><p>分为下面几个重点</p><p>1.<strong>工具</strong></p><ol><li>电脑</li><li>传统的笔记本</li></ol><blockquote><p><strong>研究表明，使用电脑的打字速度会更快，但是，打字只会让自己变成一个记忆机器，没有自己的思考。人的大佬不能并行处理时间（打字还有进行思考），所以得需要使用纸币来进行记录，这样不会进行打断思路</strong></p></blockquote><p>2.<strong>记录内容</strong></p><ol><li>idea</li><li>专业术语</li><li>例子</li></ol><p>3.<strong>笔记记录方式</strong></p><ol><li>思维导图，xmind</li><li>cmu笔记，使用左边hint，右边笔记，下面是总结</li><li>总结（目录法），就是word</li></ol><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687713222201668771322176.png" alt="word大纲"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687713750721668771374689.png"></p><h2 id="1-2读书"><a href="#1-2读书" class="headerlink" title="1.2读书"></a>1.2读书</h2><p>只能处理4-7bit的信息</p><p>看论文的方法</p><p>如何学习可课本教科书</p><ol><li>简介</li><li>标题</li><li>课后习题</li></ol><p><strong>如何快速的阅读</strong></p><ol><li>设置时间ddl</li><li>使用highlight</li><li>使用跳读,(跳过 and,or)</li><li>消除默读现象</li></ol><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687716960771668771695525.png"></p><p>广泛的阅读还有其他多看书</p><ol><li>观点花点</li><li>论证的用破折号</li></ol><h2 id="1-3回忆与记忆"><a href="#1-3回忆与记忆" class="headerlink" title="1.3回忆与记忆"></a>1.3回忆与记忆</h2><p>recall&amp;memory</p><p>工作记忆只能处理4-7位的信息</p><p>长期记忆需要进行连接</p><p>记忆喜欢记得是图像,有形的(使用注记法),就是被关键词,使用联想法</p><p>然后就是记忆衰退的方法,多次检索,就会容易回忆(就是多次开始记录)</p><p>盒子记录：就是anki，会的就进入下一个盒子，不会的就重新回到第一个盒子</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687725300721668772529814.png"></p><p>，每天学习，没三天学习</p><h2 id="1-4如何做组织管理"><a href="#1-4如何做组织管理" class="headerlink" title="1.4如何做组织管理"></a>1.4如何做组织管理</h2><p>这一节，解决了我之前想的，到底如何进行处理数据。使用日历+todo+笔记系统（calendar+todo+typora）</p><p>学习必须要在学习环境，在图书馆，或者咖啡店</p><p><strong>及时捕获自己的想法</strong></p><ol><li>任务</li><li>事件</li><li>还有知识</li><li>想法（论文的idea）</li></ol><p><strong>输出自己的想法</strong></p><ol><li>写作</li><li>代码</li></ol><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687728890711668772888770.png"></p><p><strong>记录自己的戒指信息还有任务详情</strong></p><p>谷歌日历来进行记录</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687730720801668773071545.png"></p><p>云端笔记如何记录：</p><blockquote><p>使用电脑结构，跟目录，时间，课程</p></blockquote><p>quick catch：</p><ol><li>当时有的信息，就储存下来</li><li>使用todo，记录今天发生的事件</li></ol><p>每周计划还有每日计划</p><ol><li>每个星期天来做（分成几个小块）</li><li><strong>杂事（全部在一起处理）</strong></li><li>还要复盘，每周（什么做了。什么没做）</li></ol><p>为什么无法坚持，因为熵增定律</p><h2 id="1-5如何专注"><a href="#1-5如何专注" class="headerlink" title="1.5如何专注"></a>1.5如何专注</h2><blockquote><p>这个解决了，我为什么感觉什么都没有学到专注不了自己喜欢的东西</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687735320721668773531358.png"></p><p>基于任务的（做数学题），自顶向下的，但是会匹配</p><p>如何加强自己</p><ol><li>环境</li><li>兴趣爱好</li><li>还有大脑的状态</li></ol><p><strong>加强自己专注</strong></p><ol><li>去图书馆（健身房就会自己想去健身）</li><li>停止多线程，经常切换，会让自己的大脑没有思路</li><li>关闭手机（断网，有时候多就是少，关闭手机还有电脑）（请勿打扰）</li><li>把我任务进行结块（摘要，结论，研究方法，实验）</li><li>使用forset或者番茄土豆（不要切换任务）</li><li>还要学会放松</li></ol><h2 id="1-6拖延症"><a href="#1-6拖延症" class="headerlink" title="1.6拖延症"></a>1.6拖延症</h2><blockquote><p>又是一个好的course，给解决拖延症提供了思路</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687744690781668774468167.png"></p><p>预期可以考到那个学校（求其上这得中）</p><p>价值越高（就是工作给的钱，就不会不拖延）</p><p>冲动做其他的事，拖延的时间越长，就容易拖延（</p><p><strong>减少冲动</strong></p><ol><li>分解任务</li></ol><p><strong>寻求帮助</strong></p><ol><li><p>成立学习小组</p></li><li><p>提高奖励（看完论文和朋友看电影</p></li><li><p>提高体验（打游戏，很久时间）</p></li><li><p>去图书馆</p></li><li><p>使用block进行阻挡网络</p></li><li><p>使用番茄土豆</p></li></ol><p><strong>进行娱乐</strong></p><h2 id="1-10体育学习"><a href="#1-10体育学习" class="headerlink" title="1.10体育学习"></a>1.10体育学习</h2><p>健身版提供助学习，还是要运动。 </p><p>用进废退</p><p>定期训练</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-学习技巧&quot;&gt;&lt;a href=&quot;#1-学习技巧&quot; class=&quot;headerlink&quot; title=&quot;1.学习技巧&quot;&gt;&lt;/a&gt;1.学习技巧&lt;/h1&gt;&lt;p&gt;来源于youtube 的crashcourse 里面分为10节进行讲述，如何学习。一个半小时左右可以看完，还</summary>
      
    
    
    
    
    <category term="crash course" scheme="http://yoursite.com/tags/crash-course/"/>
    
    <category term="学习方法" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机网络</title>
    <link href="http://yoursite.com/2022/11/18/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2022/11/18/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2022-11-18T09:32:01.000Z</published>
    <updated>2022-11-18T09:46:59.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vmware桥接没有网络"><a href="#vmware桥接没有网络" class="headerlink" title="vmware桥接没有网络"></a>vmware桥接没有网络</h1><p>好久没有登录虚拟机，虚拟机的桥接出现问题。我以为是这个虚拟机iso的问题。于是我对manjaro这个linux进行折腾了半天。从下午折腾到晚上。</p><p>主要包括，自己手动进行网络配置，然后重新建立网卡，还使用其他网络工具。最后我对网络进行啥用nat可以联网，但是使用nat联网，我的jetbrains gateway的配置识别不了，换了nat的ip也进不去。于是我准备使用新的iso，同时在manjaro里面下载github，把我写的代码进行上传。manjaro仓库有github第三方，可以直接下载。然后我是用deepin进行安装，安装完成后，我也是使用桥接的方式来进行连接，结果发现网络还是连接不了。那我就意识到是vmware的问题，于是我去stfw，网上进行搜索，发现这个问题是因为vmwarre进行桥接的时候识别不了，本机现在联网的网卡，需要自己手动设置。我 手动设置之后，结果两个linux都连上网了，又是折腾了一下午。</p><p>主要还是对manjaro这个系统不熟悉，我看到他的问题，显示已经连上网络，但是不能上网，我就以为是可能香谷歌那种，只是上不了谷歌才显示的，于是就以为是linux的问题。但是deepin安装完成后，直接就是显示网络平已经断开，所以，我才觉得是虚拟机的问题。</p><hr><p>总结</p><ol><li>主要是对manjaro这个linux发行版不熟悉</li><li>然后就是vmaware这个软件的bug</li></ol><p>具体解决方法</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16687647390781668764738161.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vmware桥接没有网络&quot;&gt;&lt;a href=&quot;#vmware桥接没有网络&quot; class=&quot;headerlink&quot; title=&quot;vmware桥接没有网络&quot;&gt;&lt;/a&gt;vmware桥接没有网络&lt;/h1&gt;&lt;p&gt;好久没有登录虚拟机，虚拟机的桥接出现问题。我以为是这个虚拟机</summary>
      
    
    
    
    
    <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>多源bfs</title>
    <link href="http://yoursite.com/2022/11/12/%E5%A4%9A%E6%BA%90bfs/"/>
    <id>http://yoursite.com/2022/11/12/%E5%A4%9A%E6%BA%90bfs/</id>
    <published>2022-11-12T13:26:33.000Z</published>
    <updated>2022-11-12T14:04:01.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多源bfs-amp-最小树"><a href="#多源bfs-amp-最小树" class="headerlink" title="多源bfs&amp;最小树"></a>多源bfs&amp;最小树</h1><h2 id="0-证明"><a href="#0-证明" class="headerlink" title="0.证明"></a>0.证明</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682604660491668260465791.png"></p><p>归纳法,开始为0,不用证明</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682605600491668260559129.png"></p><p>去除对头的第一个元素x,可以加入3个x+1的元素,最多有两端</p><p>两个特性,一般是队列,前面是x,后面是x+1</p><p>默认开始的元素是最小值,喝dij的使用优先队列的最小值一样.</p><p>入队就是最小值的</p><h2 id="1-bfs"><a href="#1-bfs" class="headerlink" title="1.bfs"></a>1.bfs</h2><h3 id="1-1矩阵距离"><a href="#1-1矩阵距离" class="headerlink" title="1.1矩阵距离"></a>1.1矩阵距离</h3><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682596642021668259663290.png"></p><blockquote><p>大致意识就是求每个位置到1的最短距离</p></blockquote><p>这个就是求最短路,求每个点到一堆起点的距离,建立一个虚拟起点,让1 作为起点开始寻找,然后使用虚拟起点,连接所有的 1</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682598242021668259823715.png"></p><p>思路:先把所有是1的位置加入到queue里面,距离是0</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682603282041668260328053.png"></p><p>重点是找到放入所有的值,还有一个就是进行更新,tt&#x3D;-1</p><hr><p>总体思路如下</p><ol><li>使用1作为开始的点,把所有的1进行插入到队列</li><li>之后就是常规bfs,进行pop</li><li>然后第二阶段就是搜索周围的元素,找到符合的元素,二姐没有被使用(没有被使用就是距离为-1),使用的直接continue</li><li>然后进行更新,更新之后在把他插入到队列里面,</li></ol><h2 id="2-魔棒"><a href="#2-魔棒" class="headerlink" title="2.魔棒"></a>2.魔棒</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682614080511668261407501.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682616770571668261677035.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682616960541668261695181.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16682617290551668261728112.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多源bfs-amp-最小树&quot;&gt;&lt;a href=&quot;#多源bfs-amp-最小树&quot; class=&quot;headerlink&quot; title=&quot;多源bfs&amp;amp;最小树&quot;&gt;&lt;/a&gt;多源bfs&amp;amp;最小树&lt;/h1&gt;&lt;h2 id=&quot;0-证明&quot;&gt;&lt;a href=&quot;#0-证明&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pa1</title>
    <link href="http://yoursite.com/2022/11/11/pa1/"/>
    <id>http://yoursite.com/2022/11/11/pa1/</id>
    <published>2022-11-11T03:40:00.000Z</published>
    <updated>2022-11-11T03:49:13.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h2><h3 id="单步执行"><a href="#单步执行" class="headerlink" title="单步执行"></a>单步执行</h3><blockquote><p>单步执行的功能十分简单, 而且框架代码中已经给出了模拟CPU执行方式的函数, 你只要使用相应的参数去调用它就可以了. 如果你仍然不知道要怎么做, RTFSC</p></blockquote><p>我们从源代码可以看到这个，通过查看c（继续执行发现）他条用了一个exec函数，我们的目的，就是通过求职，得到那个数字是多少，然后调用exec这个函数，如何得到数字，使用strtok进行得到，之后得到的是char，转换需要使用atoi来进行使用</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打印寄存器"><a href="#打印寄存器" class="headerlink" title="打印寄存器"></a>打印寄存器</h3><blockquote><p>打印寄存器就更简单了. 不过既然寄存器的结构是ISA相关的, 我们希望能为简易调试器屏蔽ISA的差异. 框架代码已经为大家准备了如下的API:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// nemu/src/isa/$ISA/reg.c</span><br><span class="line">void isa_reg_display(void);</span><br></pre></td></tr></table></figure><p>执行<code>info r</code>之后, 就调用<code>isa_reg_display()</code>, 在里面直接通过<code>printf()</code>输出所有寄存器的值即可. 如果你从来没有使用过<code>printf()</code>, 请RTFM或者STFW. 如果你不知道要输出什么, 你可以参考GDB中的输出</p></blockquote><p>通过这个可以知道，我们需要使用打印寄存器，只需要调用isa——display，因为我们选择的是riscv，所以我们需要在，make menuconfig里面选择isa，同事也要去对应的架构下面完善这个打印函数，这个打印函数还要输出数字，这个数值，是使用gdr这个api得到的，这个在头文件里有定义</p><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="扫描内存"><a href="#扫描内存" class="headerlink" title="扫描内存"></a>扫描内存</h3><blockquote><p>扫描内存的实现也不难, 对命令进行解析之后, 先求出表达式的值. 但你还没有实现表达式求值的功能, 现在可以先实现一个简单的版本: 规定表达式<code>EXPR</code>中只能是一个十六进制数, 例如</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x 10 0x80000000</span><br></pre></td></tr></table></figure><p>这样的简化可以让你暂时不必纠缠于表达式求值的细节. 解析出待扫描内存的起始地址之后, 就可以使用循环将指定长度的内存数据通过十六进制打印出来. 如果你不知道要怎么输出, 同样的, 你可以参考GDB中的输出. 问题是, 我们要如何访问客户计算机的内存数据呢? (答案早就说了喂)</p><p>实现了扫描内存的功能之后, 你可以打印<code>0x80000000</code>或者<code>0x100000</code>附近的内存, 你应该会看到程序的代码, 和内置客户程序的内容进行对比, 检查你的实现是否正确.</p></blockquote><p>刚开始没有看懂题目意思，主要是使用，后面这个地址，来得到后10位地址的指，一个地址有4B，因此800下一个就是804，夹具体调用的函数是vaddr——read（addr，len），这个len是字节长度，写4就是4B，暂时是固定所有制来进行执行的</p><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-1&quot;&gt;&lt;a href=&quot;#1-1&quot; class=&quot;headerlink&quot; title=&quot;1.1&quot;&gt;&lt;/a&gt;1.1&lt;/h2&gt;&lt;h3 id=&quot;单步执行&quot;&gt;&lt;a href=&quot;#单步执行&quot; class=&quot;headerlink&quot; title=&quot;单步执行&quot;&gt;&lt;/a&gt;单步执</summary>
      
    
    
    
    
    <category term="pa，一生一芯" scheme="http://yoursite.com/tags/pa%EF%BC%8C%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF/"/>
    
  </entry>
  
  <entry>
    <title>word技巧</title>
    <link href="http://yoursite.com/2022/11/11/word%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2022/11/11/word%E6%8A%80%E5%B7%A7/</id>
    <published>2022-11-11T02:18:29.000Z</published>
    <updated>2022-11-11T03:16:41.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="word操作技巧"><a href="#word操作技巧" class="headerlink" title="word操作技巧"></a>word操作技巧</h1><h2 id="3-1项目"><a href="#3-1项目" class="headerlink" title="3.1项目"></a>3.1项目</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681334072201668133406077.png"></p><ol><li>带圈字符在拼音那里</li><li>然后段落可以设置行间距</li><li>选择之后可以设置字体，字体又是可以分为大小，还有样式</li><li>项目符号就是指那个三角形，编号是123，直接右击都是可以使用</li><li>最后的是使用对齐方式，使用居中对齐</li><li>还有一件事，可以使用格式刷，对已经设置好样式的文本进行复制粘贴。不需要自己手动设置格式</li></ol><h2 id="3-2项目"><a href="#3-2项目" class="headerlink" title="3.2项目"></a>3.2项目</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681337809981668133780647.png"></p><p>这个主要是学习表格的使用</p><ol><li>前面的格式样式设置就不提了</li><li>然后是插入表格</li><li>插入之后</li><li>选择之后表单有对齐的功能，使用对齐</li><li>还有合并单元格</li><li>.进行设置行高还有列宽</li><li>之后就是wps的功能，使用公式进行求和还有求级，product（left），还有sum</li><li>之后设置格式，设置的格式有，人民币大写，还有一些其他</li><li>设置表格变宽，使用全选进行设置，设置表格样式，选择线性颜色，还有粗细度</li></ol><h2 id="3-3项目"><a href="#3-3项目" class="headerlink" title="3.3项目"></a>3.3项目</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681348640571668134864015.png"></p><p>目前，难度比较大的一个。</p><p>学习这个就是药了解到文本框的作用。使用普通的文本没有办法</p><ol><li>文本框进行插入，插入之后可以对他进行字体设置吗，还有字体效果，同事去除文本边框</li><li>接下来就是进行图片插入，插入之后药把文字进行浮动与上方，不然不好移动图片</li><li>之后就是手指下沉</li><li>还有设置文字的行间距这些，就可以skip</li><li>最后一个就是进行插入分栏，插入分栏，需要选择药进行芬兰的段落，还要进行选择分割线。注意不要选择到回车键</li><li>然后就是艺术字进行设置，艺术字插入之后就是对齐，还有一些其他效果。</li></ol><h2 id="3-4项目"><a href="#3-4项目" class="headerlink" title="3.4项目"></a>3.4项目</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16681357919941668135791288.png"></p><p>本次项目还是实际作用比较大，这个对于文档排版还是很有帮助的</p><ol><li>首先就是设置标题，在进行设置标题之前，我们可以对标题格式进行自定义设置</li><li>然后就是对正文样式，还有标题2的样式进行设置</li><li>之后就是对每一本部分进行选择设置</li><li><strong>重点使用分节符，在第一页的最开头</strong>（这样可以分成，正文还有目录2节）‘</li><li>之后就是进行目录的插入，也要进行设置，在应用你进行插入目录</li><li>最后就是也没页脚之间的设置，使用页眉，可以定义最上面</li><li>使用页脚可以定义页码，在不同节的页码，我们就不连接上一节了。然后重新设置页码</li><li>最后就是插入封面，这个也是有点的</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些项目的操作，重点还是文本框的使用，行间距还有字体。对于我们使用的是最后一个项目，如何进行word排版，发出文章。还有那个字体和插入图片的意思。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;word操作技巧&quot;&gt;&lt;a href=&quot;#word操作技巧&quot; class=&quot;headerlink&quot; title=&quot;word操作技巧&quot;&gt;&lt;/a&gt;word操作技巧&lt;/h1&gt;&lt;h2 id=&quot;3-1项目&quot;&gt;&lt;a href=&quot;#3-1项目&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="word" scheme="http://yoursite.com/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>框架代码</title>
    <link href="http://yoursite.com/2022/11/08/%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2022/11/08/%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81/</id>
    <published>2022-11-08T02:30:13.000Z</published>
    <updated>2022-11-08T02:30:13.076Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>github的action</title>
    <link href="http://yoursite.com/2022/10/26/github%E7%9A%84action/"/>
    <id>http://yoursite.com/2022/10/26/github%E7%9A%84action/</id>
    <published>2022-10-26T09:58:55.000Z</published>
    <updated>2022-10-26T11:34:05.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="action-操作"><a href="#action-操作" class="headerlink" title="action 操作"></a>action 操作</h1><h2 id="1-workflow是什么"><a href="#1-workflow是什么" class="headerlink" title="1.workflow是什么"></a>1.workflow是什么</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667785330551666778532504.png"></p><p>假设你开发的java软件又bug,用户提交问题到issue,代码人员进行修复,修复完成,之后进行pull request,然后就进行合并,合并之后旧的进行测试才能发布,这就是一个流程</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667787870631666778786133.png"></p><h2 id="2-名称解释"><a href="#2-名称解释" class="headerlink" title="2.名称解释"></a>2.名称解释</h2><p><strong>event</strong></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667789010571666778900736.png"></p><p>就是我触发的条件(pull request)</p><p>workflow就是一系列自动化流程</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667789610561666778960997.png"></p><p>常用的cicd</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667791370571666779136700.png"></p><h2 id="3-为什么使用action"><a href="#3-为什么使用action" class="headerlink" title="3.为什么使用action"></a>3.为什么使用action</h2><p>因为你 不想配置环境变量   </p><h2 id="3-demo"><a href="#3-demo" class="headerlink" title="3.demo"></a>3.demo</h2><h3 id="3-1yaml教程"><a href="#3-1yaml教程" class="headerlink" title="3.1yaml教程"></a>3.1yaml教程</h3><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667809480571666780947313.png"></p><p>使用tab就是一个对象,使用kv来记录纸</p><p>使用过 list记录多个,那就需要-</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667810550641666781054310.png"></p><h3 id="3-2demo简介"><a href="#3-2demo简介" class="headerlink" title="3.2demo简介"></a>3.2demo简介</h3><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667812140551666781213509.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667812860561666781285494.png"></p><ol><li>name是可选</li><li>on就是event,单位需要出发的事件</li></ol><p>jobs,就是执行的事件</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667813680551666781367823.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667815090571666781508152.png"></p><p>到这一步就是进行代码检查,使用github编译好的checkout</p><p>每一个-,代表一个list,就代表一次操作</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667816150561666781614964.png"></p><blockquote><p>uses,时使用别人的action,run是自己执行linux命令</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667816900551666781689860.png"></p><h2 id="4-cicd在哪里执行"><a href="#4-cicd在哪里执行" class="headerlink" title="4.cicd在哪里执行"></a>4.cicd在哪里执行</h2><p>在github的服务器上 </p><p>jobs是并行的,如果publish需要build,那就要使用关键字,need</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>首先 on 是触发条件(push,pull)</p><p>接下来就是正常的jobs</p><p>首先第一步就是checkout,第二部就是设置值环境时候用java,然后就是读取使用run,之后就clone文件,并且进入,之后就是build,一般使用gradle,并且权限777</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16667840363551666784036329.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;action-操作&quot;&gt;&lt;a href=&quot;#action-操作&quot; class=&quot;headerlink&quot; title=&quot;action 操作&quot;&gt;&lt;/a&gt;action 操作&lt;/h1&gt;&lt;h2 id=&quot;1-workflow是什么&quot;&gt;&lt;a href=&quot;#1-workflow是什</summary>
      
    
    
    
    
    <category term="action" scheme="http://yoursite.com/tags/action/"/>
    
  </entry>
  
  <entry>
    <title>元编程</title>
    <link href="http://yoursite.com/2022/10/25/%E5%85%83%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2022/10/25/%E5%85%83%E7%BC%96%E7%A8%8B/</id>
    <published>2022-10-25T11:23:57.000Z</published>
    <updated>2022-10-26T00:49:18.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h1><h2 id="1-概念解释"><a href="#1-概念解释" class="headerlink" title="1.概念解释"></a>1.概念解释</h2><p>就相当云java构建spring项目,进行build.使用规则来定义如何使用这些文件来的到,jar包</p><p>cmake 比make跟smart,cmake查找本地的哭,make只会自己寻找文件</p><p>使用make来进行build固件,make寻找makefile来进行make </p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666973194161666697319373.png"></p><p>上面是需按照那两个文件,然后接下来才是进行编译代码</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666974668991666697465989.png"></p><h2 id="2-ci持续集成"><a href="#2-ci持续集成" class="headerlink" title="2.ci持续集成"></a>2.ci持续集成</h2><p>自动进行构建,每一个event出发一个action,自动调用</p><p>例如本文的网站,当我写好一个markdwon文件,然后使用push操作,github就会进行ci,并且生成网页</p><h2 id="3-测速"><a href="#3-测速" class="headerlink" title="3.测速"></a>3.测速</h2><p>单元测试,值测试某一个功能</p><p>集成测试,测试代码交互之间是不是又问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;元编程&quot;&gt;&lt;a href=&quot;#元编程&quot; class=&quot;headerlink&quot; title=&quot;元编程&quot;&gt;&lt;/a&gt;元编程&lt;/h1&gt;&lt;h2 id=&quot;1-概念解释&quot;&gt;&lt;a href=&quot;#1-概念解释&quot; class=&quot;headerlink&quot; title=&quot;1.概念解释&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git控制</title>
    <link href="http://yoursite.com/2022/10/25/git%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2022/10/25/git%E6%8E%A7%E5%88%B6/</id>
    <published>2022-10-25T02:26:53.000Z</published>
    <updated>2022-10-25T07:57:17.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h1><h2 id="1-模型"><a href="#1-模型" class="headerlink" title="1.模型"></a>1.模型</h2><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666653059061666665304945.png"></p><p>模型树。对于文件夹，叫做tree，对于文件叫做blob，根目录是root</p><p>git工作流</p><p>使用分支branch，还有merge合并</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666656019051666665601612.png"></p><p>元数据：作者，message</p><p><strong>数据模型</strong></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666657919001666665791145.png"></p><p>定义的文件为数组，tree是hash隐射，然后commit是要提交的stack</p><p>一个obejcect是一个版本，维护，使用hash进行映射</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666659669051666665966713.png"></p><h2 id="2git-demo"><a href="#2git-demo" class="headerlink" title="2git demo"></a>2git demo</h2><p>暂存区</p><blockquote><p>为什么add和commit分开</p></blockquote><p>因为add可能已经完成了一个新的feature，还有一些没有完成，只提交完成的就可以进行发布</p><p>也可能不想上传日志文件</p><p>git checkout 进行版本切换回退 </p><p>git diff进行代码比较</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666813658981666681365480.png"></p><p>可以比较不同时期某个文件的的区别</p><h2 id="3-分支"><a href="#3-分支" class="headerlink" title="3.分支"></a>3.分支</h2><p>git branch cat，新建一个cat分支</p><p> <img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666817818981666681781631.png"></p><p>可以之间checkout -b创新建新分支，然后进去</p><p>回到什么功能都没有的master分支，进行合并cat和dog分支</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666821539001666682152951.png"></p><p>首先git merge cat</p><p>然后出现合并不兼容的情况（conflic）</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666822748981666682274329.png"></p><p>因为那个if判断不对</p><p>最终结果</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666824468971666682446494.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git操作&quot;&gt;&lt;a href=&quot;#git操作&quot; class=&quot;headerlink&quot; title=&quot;git操作&quot;&gt;&lt;/a&gt;git操作&lt;/h1&gt;&lt;h2 id=&quot;1-模型&quot;&gt;&lt;a href=&quot;#1-模型&quot; class=&quot;headerlink&quot; title=&quot;1.模型&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>acw数论</title>
    <link href="http://yoursite.com/2022/10/24/acw%E6%95%B0%E8%AE%BA/"/>
    <id>http://yoursite.com/2022/10/24/acw%E6%95%B0%E8%AE%BA/</id>
    <published>2022-10-24T13:31:35.000Z</published>
    <updated>2022-10-25T02:27:12.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-数学知识"><a href="#4-数学知识" class="headerlink" title="4.数学知识"></a>4.数学知识</h1><h2 id="4-1质数"><a href="#4-1质数" class="headerlink" title="4.1质数"></a>4.1质数</h2><h3 id="4-1-1基本算法"><a href="#4-1-1基本算法" class="headerlink" title="4.1.1基本算法"></a>4.1.1基本算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n/;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2分解质因数"><a href="#4-1-2分解质因数" class="headerlink" title="4.1.2分解质因数"></a>4.1.2分解质因数</h3><p>从小到大尝试每一个因素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void divide(int n)&#123;</span><br><span class="line">for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">if(n%i==0)&#123;</span><br><span class="line">int s=0;</span><br><span class="line">#求出i的次数</span><br><span class="line">while(n%i==0)&#123;</span><br><span class="line">n/=s;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化版本</p><p>n中至多质保函一个最多大于根号n的因子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void divide(int n)&#123;</span><br><span class="line">for(int i=2;i&lt;=n/i;i++)&#123;</span><br><span class="line">if(n%i==0)&#123;</span><br><span class="line">int s=0;</span><br><span class="line">#求出i的次数</span><br><span class="line">while(n%i==0)&#123;</span><br><span class="line">n/=i;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">#这个循环是求出质数i的次数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(n&gt;1)print(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-3筛质数"><a href="#4-1-3筛质数" class="headerlink" title="4.1.3筛质数"></a>4.1.3筛质数</h3><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666190608981666619060512.png"></p><p>筛选倍数，直到n，是质数的倍数的直接pass</p><p>核心思想，反思倍数的，坑定不是质数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void get_prime(int n)&#123;</span><br><span class="line">for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">if(!st[i])&#123;</span><br><span class="line">prime[cnt++]=i;</span><br><span class="line">&#125;</span><br><span class="line">for(int j=i+i;j&lt;=n;j+=i)&#123;</span><br><span class="line">st[i]=true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>下面这个是线性筛法</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666205978511666620597830.png"></p><p>为什么是正确的，n只会倍最小质因子甩掉。从小到大枚举质数，每次筛掉i和质数</p><p><strong>当break发生意味着prime【j】是i的最小质因子，因此primes【j】</strong></p><p>第一次出现摸他为0 ，一定是质因子</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666209365431666620936520.png"></p><p>如果摸不是0，pj也一定是pj*i的最小质因子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-数学知识&quot;&gt;&lt;a href=&quot;#4-数学知识&quot; class=&quot;headerlink&quot; title=&quot;4.数学知识&quot;&gt;&lt;/a&gt;4.数学知识&lt;/h1&gt;&lt;h2 id=&quot;4-1质数&quot;&gt;&lt;a href=&quot;#4-1质数&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="算法基础" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>bilibili视频下载</title>
    <link href="http://yoursite.com/2022/10/24/bilibili%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yoursite.com/2022/10/24/bilibili%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD/</id>
    <published>2022-10-24T13:02:31.000Z</published>
    <updated>2022-10-24T13:03:54.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-哔哩哔哩下载"><a href="#1-哔哩哔哩下载" class="headerlink" title="1.哔哩哔哩下载"></a>1.哔哩哔哩下载</h1><p>发现一个好用的工具,直接输入连接,就可以批量下载哔哩哔哩视频</p><p>推荐大家star</p><p><a href="https://github.com/leiurayer/downkyi">leiurayer&#x2F;downkyi: 哔哩下载姬downkyi，B站视频下载工具，支持批量下载，支持8K、HDR、杜比视界，提供工具箱（音视频提取、去水印等）。 (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-哔哩哔哩下载&quot;&gt;&lt;a href=&quot;#1-哔哩哔哩下载&quot; class=&quot;headerlink&quot; title=&quot;1.哔哩哔哩下载&quot;&gt;&lt;/a&gt;1.哔哩哔哩下载&lt;/h1&gt;&lt;p&gt;发现一个好用的工具,直接输入连接,就可以批量下载哔哩哔哩视频&lt;/p&gt;
&lt;p&gt;推荐大家star</summary>
      
    
    
    
    
    <category term="使用工具" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="bilibili" scheme="http://yoursite.com/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>command教程</title>
    <link href="http://yoursite.com/2022/10/24/command%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2022/10/24/command%E6%95%99%E7%A8%8B/</id>
    <published>2022-10-24T09:39:20.000Z</published>
    <updated>2022-10-24T11:28:07.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令行教程"><a href="#命令行教程" class="headerlink" title="命令行教程"></a>命令行教程</h1><p>工作流，终端复用，dotfile配置，还有远程服务器</p><h2 id="2-工作流"><a href="#2-工作流" class="headerlink" title="2.工作流"></a>2.工作流</h2><p>ctrl+c是打断程序</p><p>ctrl+z是暂停</p><p>ctrl+\是结束程序 </p><p><strong>使用&amp;表示程序后台执行</strong></p><p>使用jobs可以查看当前执行的进程状态，</p><p>使用bg %1，回复倍暂停的jobs</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666049269001666604925973.png"></p><p>产生式挂起进程使用nohup</p><h2 id="2-tmux"><a href="#2-tmux" class="headerlink" title="2.tmux"></a>2.tmux</h2><p>一般使用screen，不过也学习一下</p><p>三大核心，session，windows，panel</p><ul><li><p>会话</p><p>- 每个会话都是一个独立的工作区，其中包含一个或多个窗口</p><ul><li><code>tmux</code> 开始一个新的会话</li><li><code>tmux new -s NAME</code> 以指定名称开始一个新的会话</li><li><code>tmux ls</code> 列出当前所有会话</li><li>在 <code>tmux</code> 中输入 <code>&lt;C-b&gt; d</code> ，将当前会话分离</li><li><code>tmux a</code> 重新连接最后一个会话。您也可以通过 <code>-t</code> 来指定具体的会话</li></ul></li></ul><p>windows&#x3D;&#x3D;tab（浏览器的窗口）</p><ul><li><p>会话</p><p>- 每个会话都是一个独立的工作区，其中包含一个或多个窗口</p><ul><li><code>tmux</code> 开始一个新的会话</li><li><code>tmux new -s NAME</code> 以指定名称开始一个新的会话</li><li><code>tmux ls</code> 列出当前所有会话</li><li>在 <code>tmux</code> 中输入 <code>&lt;C-b&gt; d</code> ，将当前会话分离</li><li><code>tmux a</code> 重新连接最后一个会话。您也可以通过 <code>-t</code> 来指定具体的会话</li></ul></li></ul><p>ctrl+a （n，是下一个，p是之前一个tmux窗口</p><h2 id="3-重命名"><a href="#3-重命名" class="headerlink" title="3.重命名"></a>3.重命名</h2><p>alias把长命令进行缩短</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666058858981666605885498.png"></p><p>alias gc&#x3D;“git clone”</p><p>如何写入重命名，关闭终端，重命名就结束了</p><p><strong>直接写入到dotfiles</strong></p><h2 id="4-符号链接"><a href="#4-符号链接" class="headerlink" title="4.符号链接"></a>4.符号链接</h2><p>就是和快捷方式一样</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16666064699001666606468924.png"></p><h2 id="5-ssh"><a href="#5-ssh" class="headerlink" title="5.ssh"></a>5.ssh</h2><p>这个已经熟练了</p><p>、</p><p>还有设置别名，在ssh里面进行配置，就不用一个刚刚输入IP了</p><h2 id="6-homework"><a href="#6-homework" class="headerlink" title="6.homework"></a>6.homework</h2><h3 id="6-1任务控制"><a href="#6-1任务控制" class="headerlink" title="6.1任务控制"></a>6.1任务控制</h3><blockquote><ol><li>我们可以使用类似 <code>ps aux | grep</code> 这样的命令来获取任务的 pid ，然后您可以基于pid 来结束这些进程。但我们其实有更好的方法来做这件事。在终端中执行 <code>sleep 10000</code> 这个任务。然后用 <code>Ctrl-Z</code> 将其切换到后台并使用 <code>bg</code>来继续允许它。现在，使用 <a href="https://www.man7.org/linux/man-pages/man1/pgrep.1.html"><code>pgrep</code></a> 来查找 pid 并使用 <a href="https://www.man7.org/linux/man-pages/man1/pgrep.1.html"><code>pkill</code></a> 结束进程而不需要手动输入pid。(提示：: 使用 <code>-af</code> 标记)。</li></ol></blockquote><p>这一题使用的pger&#x3D;&#x3D;ps aux|grep python</p><p>pgrep python</p><p>使用prep sleep可以得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sleep 10000</span><br><span class="line">Ctrl-Z</span><br><span class="line">bg</span><br><span class="line"></span><br><span class="line">pgrep sleep </span><br><span class="line"></span><br><span class="line">pkill  -af sleep</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li><p>如果您希望某个进程结束后再开始另外一个进程， 应该如何实现呢？在这个练习中，我们使用 <code>sleep 60 &amp;</code> 作为先执行的程序。一种方法是使用 <a href="http://man7.org/linux/man-pages/man1/wait.1p.html"><code>wait</code></a> 命令。尝试启动这个休眠命令，然后待其结束后再执行 <code>ls</code> 命令。</p><p>但是，如果我们在不同的 bash 会话中进行操作，则上述方法就不起作用了。因为 <code>wait</code> 只能对子进程起作用。之前我们没有提过的一个特性是，<code>kill</code> 命令成功退出时其状态码为 0 ，其他状态则是非0。<code>kill -0</code> 则不会发送信号，但是会在进程不存在时返回一个不为0的状态码。请编写一个 bash 函数 <code>pidwait</code> ，它接受一个 pid 作为输入参数，然后一直等待直到该进程结束。您需要使用 <code>sleep</code> 来避免浪费 CPU 性能。</p></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令行教程&quot;&gt;&lt;a href=&quot;#命令行教程&quot; class=&quot;headerlink&quot; title=&quot;命令行教程&quot;&gt;&lt;/a&gt;命令行教程&lt;/h1&gt;&lt;p&gt;工作流，终端复用，dotfile配置，还有远程服务器&lt;/p&gt;
&lt;h2 id=&quot;2-工作流&quot;&gt;&lt;a href=&quot;#2-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vim教程</title>
    <link href="http://yoursite.com/2022/10/22/vim%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2022/10/22/vim%E6%95%99%E7%A8%8B/</id>
    <published>2022-10-22T07:08:51.000Z</published>
    <updated>2022-10-22T08:05:04.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h1><h2 id="1-模式区分"><a href="#1-模式区分" class="headerlink" title="1.模式区分"></a>1.模式区分</h2><p>分为normal还有iinsert</p><p>norm是倒过来,insert是输入</p><p>:这个是是command命令模式</p><h2 id="2-缓冲区和窗口"><a href="#2-缓冲区和窗口" class="headerlink" title="2.缓冲区和窗口"></a>2.缓冲区和窗口</h2><p>vim也开开启多个tab</p><p>使用:sp可以进行分区</p><p>使用:tabnew创建一个行窗口,一个窗口多个buffer</p><p>使用:qa进行全部关闭窗口</p><h2 id="3-文本编辑"><a href="#3-文本编辑" class="headerlink" title="3.文本编辑"></a>3.文本编辑</h2><p>使用w是向后,b是向前,e是单词结尾,使用s开头,$是结尾</p><p>浏览模式,使用u(向上),使用D(向下)</p><p>查找模式使用f,后面加要查找的单词</p><blockquote><p>以上都是normal模式</p></blockquote><hr><p>下面是insert模式</p><p>使用d进行删除,使用u进行undo,删除到结尾就是de(delete end)</p><p>dd删除一行,cc是删除后给一个空白的给你(d和c差不多)</p><p>u是undo, ctrl+r是重做</p><p>y是粘贴,p是赋值</p><h2 id="4-visual模式"><a href="#4-visual模式" class="headerlink" title="4.visual模式"></a>4.visual模式</h2><p>这个就是进行多选使用的,按住v进入</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16664246597541666424658817.png"></p><p>然后使用y进行赋值,p紧张粘贴</p><h2 id="5-计数模式"><a href="#5-计数模式" class="headerlink" title="5.计数模式"></a>5.计数模式</h2><p>就是使用4j,线下跳转4行,就是前面加上数字</p><h2 id="6-修饰词"><a href="#6-修饰词" class="headerlink" title="6.修饰词"></a>6.修饰词</h2><p>i是inside ,a是all</p><p>使用da(,会删除所有的值,在(,包括() </p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16664250417491666425041531.png"></p><p>使用&#x2F;进行查找,n进行查找下一个符合的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vim基础&quot;&gt;&lt;a href=&quot;#vim基础&quot; class=&quot;headerlink&quot; title=&quot;vim基础&quot;&gt;&lt;/a&gt;vim基础&lt;/h1&gt;&lt;h2 id=&quot;1-模式区分&quot;&gt;&lt;a href=&quot;#1-模式区分&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shell教程</title>
    <link href="http://yoursite.com/2022/10/19/shell%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2022/10/19/shell%E6%95%99%E7%A8%8B/</id>
    <published>2022-10-19T02:44:36.000Z</published>
    <updated>2022-10-20T07:58:32.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-shell脚本"><a href="#0-shell脚本" class="headerlink" title="0.shell脚本"></a>0.shell脚本</h1><h2 id="0-1shell赋值"><a href="#0-1shell赋值" class="headerlink" title="0.1shell赋值"></a>0.1shell赋值</h2><p>一般使用双一号,这样可以进行输出</p><p>使用方法和python的f差不多,直接使用$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo=bar</span><br><span class="line">echo &quot;$foo&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印 bar</span></span><br><span class="line">echo &#x27;$foo&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印 <span class="variable">$foo</span></span></span><br></pre></td></tr></table></figure><p><img src="/.com//code\site\weijia99.github.io\source_posts\shell教程\image-20221019203249378.png" alt="image-20221019203249378"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661831919761666183191589.png"></p><h2 id="0-2shell进行函数变换"><a href="#0-2shell进行函数变换" class="headerlink" title="0.2shell进行函数变换"></a>0.2shell进行函数变换</h2><p>如何使用sh脚本,直接加载到source,使用source保存,然后直接运行函数</p><p>&amp;1-9是保存的函数变量,</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661833769821666183376434.png"></p><blockquote><p>经常会遇到权限不够的问题,写入,或者读取,那么只要使用sudo!!,就可以执行上面一个权限不够的命令</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661835669731666183566863.png"></p><p>grep是查找函数 ,$?代表是不是有错误,正确就是0(没有错误,0个错误)</p><p>这里的||的意思是第一个不对,就执行第二个</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661838109721666183810355.png"></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661839759721666183975015.png"></p><p>目前看来这里的||还有&amp;&amp; 都是相反的,一个是只有,一个是或者</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661840729731666184072240.png"></p><p><strong>使用()代表的是全局变量,局部自定义的变量不需要括号,linux命令</strong></p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661843409731666184340326.png"></p><p>例题讲解</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661844299741666184429787.png"></p><p>0代表函数的名称, &amp;#代表参数的数量(#是number的意思) $$代表当前运行的pid </p><ul><li><code>$@</code> - 所有参数 读取参数</li></ul><p>-ne是不相等就代表错误</p><p>for循环所有的参数,然后进行grep查找,有就进行写入,没有就有错误,然后进行追加</p><ul><li><blockquote><p>花括号<code>&#123;&#125;</code> - 当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。</p></blockquote></li></ul><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661858169731666185816168.png"></p><p>直接进行扩展,可以建立多个文件,或者是少些几个命令</p><p>同时花括号还宽裕使用{a..b},遵循笛卡尔乘积,使用{a…h}表示a到h</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661859079801666185907753.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">convert image.&#123;png,jpg&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会展开为</span></span><br><span class="line">convert image.png image.jpg</span><br><span class="line"></span><br><span class="line">cp /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会展开为</span></span><br><span class="line">cp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以结合通配使用</span></span><br><span class="line">mv *&#123;.py,.sh&#125; folder</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会移动所有 *.py 和 *.sh 文件</span></span><br><span class="line"></span><br><span class="line">mkdir foo bar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面命令会创建foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h这些文件</span></span><br><span class="line">touch &#123;foo,bar&#125;/&#123;a..h&#125;</span><br><span class="line">touch foo/x bar/y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较文件夹 foo 和 bar 中包含文件的不同</span></span><br><span class="line">diff &lt;(ls foo) &lt;(ls bar)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt; x</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">---</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt; y</span></span><br></pre></td></tr></table></figure><p>shell最开始是指定运行的文件位置</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16661863736751666186372698.png"></p><h1 id="1-shell工具"><a href="#1-shell工具" class="headerlink" title="1.shell工具"></a>1.shell工具</h1><h2 id="1-1查询使用帮助"><a href="#1-1查询使用帮助" class="headerlink" title="1.1查询使用帮助"></a>1.1查询使用帮助</h2><ol><li>使用-h</li><li>或者直接man rm（man是Manuel</li></ol><h2 id="1-2查找文件"><a href="#1-2查找文件" class="headerlink" title="1.2查找文件"></a>1.2查找文件</h2><p>顾名思义就是使用使用find</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -name src -type d </span><br><span class="line">#这是查找名称为src的文件夹，type可以分为d，f，f是文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -path */test/*.py -type f</span><br><span class="line">#这是查找路径</span><br></pre></td></tr></table></figure><p>还有其他的参数 -exec就是执行命令，找到后删除</p><p>fd还可以使用</p><p>ctrl+r 也是可以进行查找使用的快捷键</p><h1 id="2-课后练习"><a href="#2-课后练习" class="headerlink" title="2.课后练习"></a>2.课后练习</h1><h2 id="2-1ls命令"><a href="#2-1ls命令" class="headerlink" title="2.1ls命令"></a>2.1ls命令</h2><blockquote><ol><li><p>阅读 <a href="https://man7.org/linux/man-pages/man1/ls.1.html"><code>man ls</code></a> ，然后使用<code>ls</code> 命令进行如下操作：</p><ul><li>所有文件（包括隐藏文件）</li><li>文件打印以人类可以理解的格式输出 (例如，使用454M 而不是 454279954)</li><li>文件以最近访问顺序排序</li><li>以彩色文本显示输出结果</li></ul><p>典型输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--   1 user group 1.1M Jan 14 09:53 baz</span><br><span class="line">drwxr-xr-x   5 user group  160 Jan 14 09:53 .</span><br><span class="line">-rw-r--r--   1 user group  514 Jan 14 06:42 bar</span><br><span class="line">-rw-r--r--   1 user group 106M Jan 13 12:12 foo</span><br><span class="line">drwx------+ 47 user group 1.5K Jan 12 18:08 ..</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>1.直接使用ls -a</p><p>2.搜索打印就是-h</p><p><img src="https://files.catbox.moe/kuxnto.png"></p><p>3.直接搜索time</p><p><img src="https://files.catbox.moe/a0vaqn.png"></p><p>4.直接搜索color</p><p><img src="https://fastly.jsdelivr.net/gh/weijia99/blog_image@main/16662495226761666249521717.png"></p><h2 id="2-2shell函数"><a href="#2-2shell函数" class="headerlink" title="2.2shell函数"></a>2.2shell函数</h2><blockquote><ol><li>编写两个bash函数 <code>marco</code> 和 <code>polo</code> 执行下面的操作。 每当你执行 <code>marco</code> 时，当前的工作目录应当以某种形式保存，当执行 <code>polo</code> 时，无论现在处在什么目录下，都应当 <code>cd</code> 回到当时执行 <code>marco</code> 的目录。 为了方便debug，你可以把代码写在单独的文件 <code>marco.sh</code> 中，并通过 <code>source marco.sh</code>命令，（重新）加载函数。</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">这里忘了加开始解释的地址</span></span><br><span class="line"> marco()&#123;</span><br><span class="line">     echo &quot;$(pwd)&quot; &gt; $HOME/marco_history.log</span><br><span class="line">     echo &quot;save pwd $(pwd)&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> polo()&#123;</span><br><span class="line">     cd &quot;$(cat &quot;$HOME/marco_history.log&quot;)&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-3错误检验"><a href="#2-3错误检验" class="headerlink" title="2.3错误检验"></a>2.3错误检验</h2><blockquote><p>假设您有一个命令，它很少出错。因此为了在出错时能够对其进行调试，需要花费大量的时间重现错误并捕获输出。 编写一段bash脚本，运行如下的脚本直到它出错，将它的标准输出和标准错误流记录到文件，并在最后输出所有内容。 加分项：报告脚本在失败前共运行了多少次。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">n=$(( RANDOM % 100 ))</span><br><span class="line"></span><br><span class="line">if [[ n -eq 42 ]]; then</span><br><span class="line">    echo &quot;Something went wrong&quot;</span><br><span class="line">    &gt;&amp;2 echo &quot;The error was using magic numbers&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;Everything went according to plan&quot;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">count=1</span><br><span class="line"></span><br><span class="line"> while true</span><br><span class="line"> do</span><br><span class="line">     ./buggy.sh 2&gt; out.log</span><br><span class="line">     if [[ $? -ne 0 ]]; then</span><br><span class="line">         echo &quot;failed after $count times&quot;</span><br><span class="line">         cat out.log</span><br><span class="line">         break</span><br><span class="line">     fi</span><br><span class="line">     ((count++))</span><br><span class="line"></span><br><span class="line"> done</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-shell脚本&quot;&gt;&lt;a href=&quot;#0-shell脚本&quot; class=&quot;headerlink&quot; title=&quot;0.shell脚本&quot;&gt;&lt;/a&gt;0.shell脚本&lt;/h1&gt;&lt;h2 id=&quot;0-1shell赋值&quot;&gt;&lt;a href=&quot;#0-1shell赋值&quot; cla</summary>
      
    
    
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
    <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
    <category term="计算机教程缺失的一课" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E7%A8%8B%E7%BC%BA%E5%A4%B1%E7%9A%84%E4%B8%80%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>dfg代码解读</title>
    <link href="http://yoursite.com/2022/10/18/dfg%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://yoursite.com/2022/10/18/dfg%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%AF%BB/</id>
    <published>2022-10-18T14:05:12.000Z</published>
    <updated>2022-10-18T14:05:12.498Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
